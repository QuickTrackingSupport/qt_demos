/*! 2021-12-20 17:29:33 */
module.exports = function(e) {
    function t(a) {
        if (n[a]) return n[a].exports;
        var o = n[a] = {
            exports: {},
            id: a,
            loaded: !1
        };
        return e[a].call(o.exports, o, o.exports, t), o.loaded = !0, o.exports;
    }
    var n = {};
    return t.m = e, t.c = n, t.p = "", t(0);
}([ function(e, t, n) {
    e.exports = n(1);
}, function(e, t, n) {
    "use strict";
    n(2).initGlobal(), e.exports = function(e) {
        var t = n(4);
        return n(91)(e, t);
    };
}, function(e, t, n) {
    "use strict";
    var a, o = n(3), r = o.APLUS, s = o.APLUS_QUEUE, i = o.GOLDLOG, u = o.GOLDLOG_QUEUE, c = !1;
    try {
        a = window, c = !0;
    } catch (e) {
        a = {};
    }
    t.getContext = function() {
        return a;
    }, t.initGlobal = function(e) {
        a = e ? e : {
            v: 1,
            aplus: {},
            aplus_queue: []
        };
        var t, n;
        if (c) try {
            t = a.aplus || (a.aplus = {});
            var o = a.goldlog_queue || (a.goldlog_queue = []);
            n = a.aplus_queue || (a.aplus_queue = []), n = o.concat(n);
        } catch (e) {} else t = a.aplus, n = a.aplus_queue;
        return a.aplus = a.goldlog = t, a.aplus_queue = a.goldlog_queue = n, a;
    };
    var p = function(e) {
        if (e === r || e === i) {
            var t = a[r] || a[i];
            return t || (t = a[r] = a[i] = {}), t;
        }
        var n = u, o = s;
        if (e === o || e === n) {
            var c = a[o] || a[n];
            return c || (c = a[o] = a[n] = []), c;
        }
    };
    t.getGlobalValue = p, t.setGlobalValue = function(e, t) {
        a[e] = t;
    };
    var l = function(e) {
        var t;
        try {
            var n = p(r);
            t = n[e];
        } catch (e) {
            t = "";
        } finally {
            return t;
        }
    };
    t.getGoldlogVal = l;
    var g = function(e, t) {
        var n = !1;
        try {
            var a = p(r);
            e && (a[e] = t, n = !0);
        } catch (e) {
            n = !1;
        } finally {
            return n;
        }
    };
    t.setGoldlogVal = g, t.getClientInfo = function() {
        return l("_aplus_client") || {};
    };
}, function(e, t) {
    var n = "aplus", a = "goldlog", o = n + "_queue", r = a + "_queue", s = "mw_change", i = "MetaInfo", u = "append" + i, c = "set" + i, p = "http", l = "_pubsub", g = "other", f = "2101", d = "2201", h = "2202", _ = "19999", v = "1023", m = "1010", y = 3e4, b = 18e5, S = "ekvs", P = 1e4, I = 1, C = 3e3, A = "$$_page_start", T = "$$_page_end", E = "$$_app_start", x = "$$_app_end", M = "aplus_user_profile", O = "imprint", w = "aplus-idtype", U = "aplus-jsbridge-only", k = "aplus-page-config", N = "aplus-skip-apv-rules";
    e.exports = {
        PAGE_ENTER: "PAGE_ENTER",
        CURRENT_PAGE_CONFIG: "CURRENT_PAGE_CONFIG",
        _ANONY_ID: "_anony_id",
        _USER_ID: "_user_id",
        DEFAULT_CODE: g,
        OTHER: _,
        EVENT_MAP: {
            "2101": "click",
            "2201": "exposure",
            "2202": "exposure",
            "19999": g,
            "1023": "app_show",
            "1010": "app_hide_or_unload"
        },
        EVENT_ID_MAP: {
            EXP: d,
            IMPEXP: h,
            CLK: f,
            OTHER: _,
            SHOW: v,
            H_OR_U: m
        },
        APLUS: n,
        GOLDLOG: a,
        UNSUBSCRIBE: n + "." + n + l + ".unsubscribe",
        SUBSCRIBE: n + "." + n + l + ".subscribe",
        PUBLISH: n + "." + n + l + ".publish",
        CACHE_PUBS: n + "." + n + l + ".cachePubs",
        APLUS_UNIVERSAL: n + "_universal",
        APLUS_QUEUE: o,
        GOLDLOG_QUEUE: r,
        COMPLETE: "complete",
        PV_CODE: "2001",
        EXP_CODE: d,
        CLK_CODE: f,
        OTHER_CODE: _,
        CLK: "CLK",
        EXP: "EXP",
        SPM_CNT: "spm-cnt",
        SPM_URL: "spm-url",
        SPM_PRE: "spm-pre",
        MW_CHANGE_PV: s + "_pv",
        MW_CHANGE_HJLJ: s + "_hjlj",
        HTTP: p + ":",
        HTTPS: "https:",
        APPEND_META_INFO: u,
        SET_META_INFO: c,
        APLUS_APPEND_META_INFO: n + "." + u,
        APLUS_SET_META_INFO: n + "." + c,
        PVID: "pvid",
        APLUS_LOG_PIPE: "aplus-log-pipe",
        openAPIs: [ "send", "enter", "sendPV", "record", "combineRecord", "recordUdata", "requestVTConfig", "setPageSPM", "setMetaInfo", "appendMetaInfo", "updatePageProperties", "updateNextPageProperties", "updatePageUtparam", "updateNextPageUtparam", "pageAppear", "pageDisappear", "skipPage", "updateSessionProperties", "getPageSpmUrl", "getPageSpmPre", "setPageName", "getElementSPM" ],
        SESSION_INTERVAL: y,
        SESSION_PAUSE_TIME: "session_pause_time",
        IMPRINT: "imprint",
        CURRENT_SESSION: "current_session",
        MAX_EVENTID_LENGTH: 128,
        MAX_PROPERTY_KEY_LENGTH: 256,
        MAX_PROPERTY_KEYS_COUNT: 100,
        REQUESTS: "requests",
        SHARES: "shares",
        APLUS_SSRC: "_aplus_ssrc",
        EKVS: S,
        EVENT_MAX_COUNT: P,
        MEMORY_MAX_COUNT: I,
        EVENT_SEND_DEFAULT_INTERVAL: C,
        PAGE_START: A,
        PAGE_END: T,
        APP_START: E,
        APP_END: x,
        USER_PROFILE_KEY: M,
        SHARE_CACHE_INTERVAL: b,
        IMPRINT: O,
        ID_TYPE: w,
        JSBRIDGE_ONLY: U,
        PAGE_CONFIG: k,
        APLUS_SKIP_APV_RULES: N
    };
}, function(e, t, n) {
    e.exports = {
        metaInfo: {
            "aplus-rhost-v": "",
            "aplus-rhost-g": "",
            "aplus-mmstat-timeout": "10000",
            sdkId: "aplus_mini_cloud_um"
        },
        globalConfig: {
            isAli: !1,
            isDecodeUrl: !0,
            APLUS_QUEUE: "aplus_queue",
            ETAG_STORAGE_KEY: "__ETAG__CNA__ID__",
            script_name: "aplus_mini.js",
            "aplus-globaldata": {},
            lver: "1.7.10"
        },
        plugins: [ {
            name: "inject_app_um",
            path: n(5)
        }, {
            name: "inject_page_um",
            path: n(31)
        }, {
            name: "open_api",
            path: n(33)
        }, {
            name: "aplus_client",
            path: n(34)
        }, {
            name: "pubsub",
            path: n(35)
        }, {
            name: "aplus_meta_inject",
            path: n(38)
        }, {
            name: "aplus_ac",
            path: n(42),
            deps: [ "inject_page_um" ]
        }, {
            name: "aplus_ae",
            path: n(47),
            deps: [ "inject_page_um" ]
        }, {
            name: "aplus_mini_spm",
            path: n(54)
        }, {
            name: "aplus_mini_report_um",
            path: n(55)
        }, {
            name: "aplus_log_inject",
            path: n(60),
            deps: [ "aplus_meta_inject" ],
            config: {
                plugins: {
                    pv: [ {
                        name: "etag",
                        path: n(61)
                    }, {
                        name: "when_to_sendpv",
                        path: n(66),
                        config: {
                            aplusWaiting: ""
                        }
                    }, {
                        name: "where_to_send",
                        path: n(67)
                    }, {
                        name: "what_to_send",
                        path: n(68),
                        config: {
                            logdataToUt: {}
                        }
                    }, {
                        name: "miniapp_data",
                        path: n(72)
                    }, {
                        name: "what_to_sendpv_userdata",
                        path: n(73),
                        deps: [ "what_to_send" ]
                    }, {
                        name: "can_to_sendpv",
                        path: n(74)
                    } ],
                    hjlj: [ {
                        name: "etag",
                        path: n(61)
                    }, {
                        name: "where_to_send",
                        path: n(67)
                    }, {
                        name: "what_to_send",
                        path: n(68),
                        deps: []
                    }, {
                        name: "miniapp_data",
                        path: n(72)
                    }, {
                        name: "what_to_hjlj_userdata",
                        path: n(75)
                    } ]
                }
            }
        }, {
            name: "aplus_api",
            path: n(76),
            deps: [ "aplus_log_inject", "aplus_meta_inject" ]
        }, {
            name: "meta_queue",
            path: n(83),
            config: {
                isOpenApi: !0
            }
        }, {
            name: "etag",
            path: n(61)
        }, {
            name: "aplus_queue",
            path: n(85),
            config: {
                isOpenApi: !0
            }
        }, {
            name: "auto_tracker_um",
            path: n(86),
            deps: [ "inject_page_um" ]
        } ]
    };
}, function(e, t, n) {
    "use strict";
    function a(e, t) {
        var n = {};
        t && (n.scene = t), e && e.miniappDebugId && (n.debugId = e.miniappDebugId);
        for (var a in e) "$$_share_uid" !== a && 0 !== a.indexOf("$$_utm_") || (n[a] = e[a]);
        return n;
    }
    function o(e) {
        h().load(function() {
            v.logger({
                msg: "aplus-----cache init success"
            });
        });
        var t = {}, n = p(e);
        for (var a in n) "object" == typeof n[a] ? t = y.assign(n[a], t) : n[a] && (t[a] = n[a]);
        d().load();
        var o = g().resume(t), r = g().getCurrentSessionId();
        f().setSessionId(r), o && d().add(_.DataType.HALF_SESSION, {}, function() {
            v.logger({
                msg: "-----before send session"
            }), d().send();
        });
    }
    function r() {
        g().pause(), d().send(_.DataType.CLOSE_SESSION, {}, function() {
            d().save(), h().save(), v.logger({
                msg: "-----after send session"
            });
        });
    }
    function s() {
        var e = App, t = !1, n = !1, s = i.getContext(), p = l.getContext(), g = {
            onLaunch: function(e) {
                l.initIsTB();
                var t = e ? e.query : {}, n = e ? e.referrerInfo : {};
                if (S += 1, s.aplus_queue.push({
                    action: "aplus.appendMetaInfo",
                    arguments: [ "aplus-session-args", y.assign(n, {
                        scene: e.scene || ""
                    }) ]
                }), t) {
                    var o = {};
                    if (t.spm && (s.aplus.spm_orign = t.spm), e.scene && (o.scene = e.scene), t.miniappDebugId) {
                        var r = t.miniappDebugId.trim(), i = r.split("_");
                        o = y.assign(o, {
                            aplus_work_no: i.length > 2 ? i[1] : r,
                            aplus_track_debug_id: r,
                            aplus_flag: "aplus_test"
                        });
                    }
                    s.aplus_queue.push({
                        action: "aplus.appendMetaInfo",
                        arguments: [ "aplus-exdata", o ]
                    }), s.aplus_queue.push({
                        action: "aplus.appendMetaInfo",
                        arguments: [ "aplus-cpvdata", o ]
                    }), s.aplus_queue.push({
                        action: "aplus.appendMetaInfo",
                        arguments: [ "aplus-global-args", a(t, e.scene) ]
                    });
                }
            },
            onShow: function(e) {
                S += 1;
                var n, r = e ? e.query : {}, i = e ? e.scene : "";
                s.aplus_queue.push({
                    action: "aplus.setMetaInfo",
                    arguments: [ "aplus-global-args", a(r, i) ]
                }), i && (s.aplus_queue.push({
                    action: "aplus.appendMetaInfo",
                    arguments: [ "aplus-exdata", {
                        scene: i
                    } ]
                }), s.aplus_queue.push({
                    action: "aplus.appendMetaInfo",
                    arguments: [ "aplus-cpvdata", {
                        scene: i
                    } ]
                }), s.aplus_queue.push({
                    action: "aplus.appendMetaInfo",
                    arguments: [ "aplus-session-args", {
                        scene: i
                    } ]
                })), 2 === S ? n = 1 : 1 === S ? n = 0 : v.logger({
                    msg: "APP_LAUNCH_TYPE should not reach this, value = " + S
                }), u.onAplusReady(s.aplus_queue, c.SUBSCRIBE, function() {
                    t || (t = !0, o(e));
                    var a = s.aplus.globalConfig || {};
                    if (!a.isAli) {
                        var r = m.getPageCode();
                        s.onAppShowTime = new Date().getTime(), s.aplus_queue.push({
                            action: "aplus.record",
                            arguments: [ c.APP_START, "SHOW", {
                                start_type: n,
                                page_name: r || e.path || "-",
                                url: e.path || "-"
                            } ]
                        });
                    }
                });
            },
            onHide: function() {
                u.onAplusReady(s.aplus_queue, c.SUBSCRIBE, function() {
                    var e = s.aplus.globalConfig || {}, n = m.getPageCode();
                    if (!e.isAli) {
                        var a = m.getCurrentPagePath(), o = new Date().getTime() - s.onAppShowTime;
                        s.aplus_queue.push({
                            action: "aplus.record",
                            arguments: [ c.APP_END, "H_OR_U", {
                                duration: o,
                                end_type: 0,
                                page_name: n || a || "-",
                                url: a || "-",
                                start_time: s.onAppShowTime
                            } ]
                        });
                    }
                    t = !1, r();
                }), S = 0;
            }
        };
        App = function(t) {
            var n = i.getContext();
            t.aplus = n, e(t);
        }, p.onAppShow(function(e) {
            if (!n) {
                var t = {};
                t = b(p.getLaunchOptionsSync) ? p.getLaunchOptionsSync() || {} : e, g.onLaunch(t), 
                n = !0;
            }
            g.onShow(e);
        }), p.onAppHide(function() {
            g.onHide();
        });
    }
    var i = n(2), u = n(6), c = n(3), p = n(7), l = n(8), g = n(11), f = n(17), d = n(19), h = n(12), _ = n(15), v = n(26), m = n(30), y = n(28), b = n(9), S = 0;
    e.exports = function() {
        return {
            run: function() {
                [ "object", "function" ].indexOf(typeof App) > -1 && s();
            }
        };
    };
}, function(e, t) {
    e.exports = {
        resetFn: function() {
            var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}, t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "", n = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : function() {}, a = e[t];
            e[t] = function() {
                var e = a && a.apply(this, arguments);
                return e ? n.call(this, e) : n.apply(this, arguments);
            };
        },
        rewriteFn: function(e, t, n) {
            var a = e[t];
            e[t] = function(e) {
                n.call(this, e), a && a.call(this, e);
            };
        },
        onAplusReady: function(e, t, n) {
            e.push({
                action: t,
                arguments: [ "aplusReady", function(e) {
                    "complete" === e && "function" == typeof n && n();
                } ]
            });
        }
    };
}, function(e, t) {
    function n(e) {
        var t, a = Array.isArray(e) ? [] : {};
        if ("object" == typeof e) {
            if (JSON && JSON.parse) t = JSON.stringify(e), a = JSON.parse(t); else for (var o in e) a[o] = "object" == typeof e[o] ? n(e[o]) : e[o];
            return a;
        }
    }
    e.exports = n;
}, function(e, t, n) {
    "use strict";
    function a() {
        if ("boolean" == typeof u) return u;
        var e = !1;
        try {
            var t = navigator ? navigator.userAgent || navigator.swuserAgent : "";
            e = !!/AliApp/i.test(t), (/AliApp\(AP/i.test(t) || /AliApp\(DingTalk/i.test(t) || /AliApp\(AMAP/i.test(t)) && (e = !1), 
            /AliApp\(KB/i.test(t) && (e = !!/Mist/.test(t)), /AlipayIDE Taobao/.test(t) && (e = !0);
            var n = c().ctx;
            "function" == typeof n.canIUse && (e = !!n.canIUse("callUserTrack"));
        } catch (e) {}
        return u = e, e;
    }
    function o() {
        return "boolean" == typeof u ? !!u : a();
    }
    var r = n(9), s = n(2), i = n(10);
    t.getCurrentPage = function() {
        var e = getCurrentPages();
        return e[e.length - 1] || {};
    };
    var u;
    t.resetIsTB = function(e) {
        u = e;
    }, t.initIsTB = a;
    var c = function() {
        try {
            return {
                ctx: dd,
                platType: "dd",
                sdkType: "ddmp",
                logDomain: "/ddm_logs"
            };
        } catch (e) {
            try {
                return {
                    ctx: my,
                    platType: my && my.tb ? "taobao" : "my",
                    sdkType: my && my.tb ? "taobaomp" : "mymp",
                    logDomain: "/alipaym_logs"
                };
            } catch (e) {
                try {
                    return {
                        ctx: tt,
                        platType: "tt",
                        sdkType: "ttmp",
                        logDomain: "/bytedancem_logs"
                    };
                } catch (e) {
                    try {
                        return {
                            ctx: swan,
                            platType: "bd",
                            sdkType: "bdmp",
                            logDomain: "/baidum_logs"
                        };
                    } catch (e) {
                        try {
                            return {
                                ctx: wx,
                                platType: "wx",
                                sdkType: "wxmp",
                                logDomain: "/wxm_logs"
                            };
                        } catch (e) {
                            return {
                                ctx: {},
                                platType: "UNKNOW",
                                sdkType: "UNKNOW"
                            };
                        }
                    }
                }
            }
        }
    };
    t.isTB = o, t.getPlatformType = function() {
        return c().platType;
    }, t.getSdkType = function() {
        return c().sdkType;
    }, t.getContext = function() {
        return c().ctx;
    }, t.getLogDomain = function() {
        return c().logDomain;
    };
    var p = "httpRequest", l = "request", g = function() {};
    t.request = function(e, t, n, a) {
        var o = c().ctx;
        t || (t = {}), r(a) || (a = g), r(n) || (n = g);
        var u = t.requestMethodName || l, f = o[u];
        r(f) || (u !== l ? u = l : u !== p && (u = p), f = o[u]);
        var d = t.dataType || "json", h = t.timeout || 5e3, _ = t.method || "GET";
        e = i.can2https(e);
        var v;
        if (r(f)) {
            var m = {
                url: e,
                method: _,
                dataType: d,
                timeout: h,
                success: function(e) {
                    n(e);
                },
                fail: function(t) {
                    console && console.warn("request " + e + " failure, the msg is ", t), a(t);
                }
            };
            "object" == typeof t.data && "POST" === _ && (m.data = t.data, m.url = m.url.split("?")[0]);
            var y = s.getGlobalValue("aplus"), b = y.getMetaInfo("aplus-request-extinfo");
            "object" == typeof b && (m._extInfo = b), f(m);
        } else console && console.warn('can not find "' + u + '"!'), a(v);
    };
}, function(e, t) {
    "use strict";
    e.exports = function(e) {
        return "function" == typeof e;
    };
}, function(e, t) {
    "use strict";
    function n(e) {
        var t, n, o, r = [], s = e.length;
        for (o = 0; o < s; o++) t = e[o][0], n = e[o][1], r.push(0 === t.indexOf(a) ? n : t + "=" + encodeURIComponent(n));
        return r.join("&");
    }
    var a = "::-plain-::";
    t.mkPlainKey = function() {
        return a + Math.random();
    }, t.s_plain_obj = a, t.mkPlainKeyForExparams = function(e) {
        var t = e || a;
        return t + "exparams";
    }, t.arr2param = n, t.param2arr = function(e) {
        for (var t, n = e.split("&"), a = 0, o = n.length, r = []; a < o; a++) t = n[a].split("="), 
        r.push([ t.shift(), t.join("=") ]);
        return r;
    }, t.arr2obj = function(e) {
        var t, n, a, o = {}, r = e.length;
        for (a = 0; a < r; a++) t = e[a][0], n = e[a][1], o[t] = n;
        return o;
    }, t.jsonLikeStr2JSON = function(e) {
        if (!e || "string" != typeof e) return {};
        for (var t = e.replace(/['"{}]+/g, ""), n = t.split(","), a = [], o = 0; o < n.length; o++) a.push(n[o].split(":"));
        var r = this.arr2obj(a);
        return r;
    }, t.can2https = function(e) {
        if (0 === e.indexOf("//")) {
            var t = "https:";
            /(\d+\.){3,}\d+/.test(e) && (t = "http:"), e = t + e;
        }
        return e;
    }, t.checkEmptyObj = function(e) {
        return "object" != typeof e || 0 === Object.keys(e).length;
    };
}, function(e, t, n) {
    var a = n(12), o = n(14), r = n(3), s = n(8), i = n(7), u = n(15), c = n(2);
    e.exports = function() {
        function e() {
            return {
                resume: function(e) {
                    var t = !1;
                    f || (f = a().get(r.CURRENT_SESSION));
                    var s = new Date();
                    return g = s.getTime(), !f || !f.end_time || g - f.end_time > r.SESSION_INTERVAL ? (t = !0, 
                    n(e), o().v("开始新的session(%s): ", f.id, f)) : o().v("延续上一次session(%s): %s ", f.id, s.toLocaleTimeString(), f), 
                    t;
                },
                pause: function() {
                    p();
                },
                getCurrentSessionId: function() {
                    return (f || {}).id;
                },
                getCurrentSession: function() {
                    return f;
                },
                cloneCurrentSession: function() {
                    return i(f);
                }
            };
        }
        function t(e) {
            var t = {};
            for (var n in e) t[n] = e[n];
            return o().v("query: ", e), t;
        }
        function n(e) {
            try {
                var n = (f || {}).options || {}, a = u.assign({}, t(e.query));
                a.path = e.path || n.path, a.scene = e.scene ? s.getPlatformType() + "_" + e.scene : n.scene;
                var r = e.referrerInfo;
                r && (a.referrerAppId = r.appId), o().v("session options: ", a);
                var i = c.getGlobalValue("aplus"), p = i.getMetaInfo("globalproperty"), l = Date.now();
                f = {
                    id: u.getRandomStr(10) + l,
                    start_time: l,
                    options: a,
                    state_s: 1
                }, p && (f.gp = p);
            } catch (e) {
                o().e("生成新session失败: ", e);
            }
        }
        function p() {
            if (f) {
                var e = new Date();
                f.end_time = e.getTime(), "number" != typeof f.duration && (f.duration = 0), f.duration = f.end_time - g, 
                f.state_s = 0, a().set(r.CURRENT_SESSION, f), o().v("退出会话(%s): %s ", f.id, e.toLocaleTimeString(), f);
            }
        }
        var l = null, g = null, f = null;
        return function() {
            return l || (l = e()), l;
        };
    }();
}, function(e, t, n) {
    var a = n(8), o = n(9), r = n(13), s = n(14);
    e.exports = function() {
        function e() {
            var e = a.getContext(), t = n(2), p = t.getGlobalValue("aplus");
            this.load = function(t) {
                u ? (e.removeStorage({
                    key: i
                }), o(t) && t()) : (i = "aplus_cache_" + (p.getMetaInfo("appKey") || p.getMetaInfo("appId")), 
                e.getStorage({
                    key: i,
                    success: function(n) {
                        u = n && n.data ? r.parse(n.data) || {} : {}, c = !0, e.removeStorage({
                            key: i
                        }), o(t) && t();
                    },
                    fail: function(n) {
                        s().w(i + ": " + n.errMsg), u = {}, c = !0, e.removeStorage({
                            key: i
                        }), o(t) && t();
                    }
                }));
            }, this.save = function() {
                u && e.setStorage({
                    key: i,
                    data: r.stringfy(u)
                });
            }, this.set = function(e, t) {
                u && (u[e] = t);
            }, this.get = function(e) {
                return (u || {})[e];
            }, this.remove = function(e) {
                u && u[e] && delete u[e];
            }, this.getAll = function() {
                return u;
            }, this.clear = function() {
                u = null;
            }, this.has = function(e) {
                return !!this.get(e);
            }, this.isLoaded = function() {
                return c;
            };
        }
        var t = null, i = "", u = null, c = !1;
        return function() {
            return t || (t = new e()), t;
        };
    }();
}, function(e, t) {
    t.stringfy = function(e) {
        if (e) try {
            return JSON.stringify(e);
        } catch (e) {}
        return "";
    }, t.parse = function(e) {
        if (e) try {
            return JSON.parse(e);
        } catch (e) {}
        return null;
    }, t.parseToArray = function(e) {
        if (e) try {
            return JSON.parse(e);
        } catch (e) {}
        return [];
    };
}, function(e, t) {
    var n = "[APLUS] -- ";
    e.exports = function() {
        function e() {
            this.setDebug = function(e) {
                a = e;
            }, this.d = function() {
                if (a) try {
                    "string" == typeof arguments[0] && (arguments[0] = n + arguments[0]), console.debug.apply(console, arguments);
                } catch (e) {}
            }, this.i = function() {
                try {
                    if (a) try {
                        "string" == typeof arguments[0] && (arguments[0] = n + arguments[0]), console.info.apply(console, arguments);
                    } catch (e) {}
                } catch (e) {}
            }, this.e = function() {
                if (a) try {
                    "string" == typeof arguments[0] && (arguments[0] = n + arguments[0]), console.error.apply(console, arguments);
                } catch (e) {}
            }, this.w = function() {
                if (a) try {
                    "string" == typeof arguments[0] && (arguments[0] = n + arguments[0]), console.warn.apply(console, arguments);
                } catch (e) {}
            }, this.v = function() {
                if (a) try {
                    "string" == typeof arguments[0] && (arguments[0] = n + arguments[0]), console.log.apply(console, arguments);
                } catch (e) {}
            }, this.t = function() {
                if (a) try {
                    console.table.apply(console, arguments);
                } catch (e) {}
            }, this.tip = function() {
                try {
                    "string" == typeof arguments[0] && (arguments[0] = n + arguments[0]), console.log.apply(console, arguments);
                } catch (e) {}
            }, this.tip_w = function(e) {
                try {
                    console.log("%c " + n + e, "background:red; padding: 4px; padding-right: 8px; border-radius: 4px; color: #fff;");
                } catch (e) {}
            }, this.err = function() {
                try {
                    "string" == typeof arguments[0] && (arguments[0] = n + arguments[0]), console.error.apply(console, arguments);
                } catch (e) {}
            }, this.repeat = function(e) {
                for (var t = e; t.length < 86; ) t += e;
                return t;
            };
        }
        var t = null, a = !1;
        return function() {
            return null === t && (t = new e()), t;
        };
    }();
}, function(e, t, n) {
    t.getRandomStr = function(e) {
        for (var t = "", n = [ "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z" ], a = 0; a < Number(e); a++) {
            var o = Math.round(Math.random() * (n.length - 1));
            t += n[o];
        }
        return t;
    }, t.startsWith = function(e, t) {
        return !(!e || !t || 0 === t.length || t.length > e.length) && e.substr(0, t.length) === t;
    }, t.assign = function(e) {
        if (void 0 === e || null === e) throw new TypeError("Cannot convert undefined or null to object");
        for (var t = Object(e), n = 1; n < arguments.length; n++) {
            var a = arguments[n];
            if (a) for (var o in a) Object.prototype.hasOwnProperty.call(a, o) && (t[o] = a[o]);
        }
        return t;
    }, t.checkEvent = function(e, t) {
        var a = n(3), o = n(14);
        if (!e || "string" != typeof e) return o().e('please check trackEvent id. id should be "string" and not null'), 
        !1;
        var r = [ "id", "du" ], s = {};
        if (r.forEach(function(e) {
            s[e] = 1;
        }), s[e]) return o().e("eventId不能与以下保留字冲突: " + r.join(",")), !1;
        if (e.length > a.MAX_EVENTID_LENGTH) return o().e("The maximum length of event id shall not exceed " + a.MAX_EVENTID_LENGTH), 
        !1;
        if (t && ("object" != typeof t || Array.isArray(t)) && "string" != typeof t) return o().e("please check trackEvent properties. properties should be string or object(not include Array)"), 
        !1;
        if ("object" == typeof t) {
            var i = 0;
            for (var u in t) if ({}.hasOwnProperty.call(t, u)) {
                if (u.length > a.MAX_PROPERTY_KEY_LENGTH) return o().e("The maximum length of property key shall not exceed " + a.MAX_PROPERTY_KEY_LENGTH), 
                !1;
                if (i >= a.MAX_PROPERTY_KEYS_COUNT) return o().e("The maximum count of properties shall not exceed " + a.MAX_PROPERTY_KEYS_COUNT), 
                !1;
                if (s[u]) return o().e("属性中的key不能与以下保留字冲突: " + r.join(",")), !1;
                i += 1;
            }
        }
        return !0;
    };
    var a = n(16);
    t.deleteInfo = function(e, t) {
        return a(t, function(t) {
            delete e[t];
        }), e;
    }, t.checkEmptyObj = function(e) {
        return "object" != typeof e || 0 === Object.keys(e).length;
    }, t.DataType = {
        HALF_SESSION: "half_session",
        CLOSE_SESSION: "close_session",
        EKV: "ekv",
        ENTER_PAGE: "enter_page",
        LEAVE_PAGE: "leave_page"
    }, t.AccessType = {
        MOBILE_NETWORK_2G: "2g",
        MOBILE_NETWORK_3G: "3g",
        MOBILE_NETWORK_4G: "4g",
        MOBILE_NETWORK_NONE: "none"
    };
}, function(e, t) {
    "use strict";
    e.exports = function(e, t) {
        var n, a = e.length;
        for (n = 0; n < a; n++) {
            var o = t(e[n], n);
            if ("break" === o) break;
        }
    };
}, function(e, t, n) {
    var a = n(12), o = n(14), r = n(3), s = n(18);
    e.exports = function() {
        function e() {
            if (p.length) {
                var e = a().get(r.EKVS);
                n(e) + p.length <= r.EVENT_MAX_COUNT && (e = t(e, p), a().set(r.EKVS, e));
            }
        }
        function t(e, t) {
            e = e || {};
            var n = e[c];
            return s(n) && n.length ? e[c] = n.concat(t) : e[c] = [].concat(t), e;
        }
        function n(e) {
            var t = 0;
            for (var n in e) s(e[n]) && (t += e[n].length);
            return t;
        }
        function i() {
            return {
                addEvent: function(t) {
                    t && (c ? (p.unshift(t), p.length > r.MEMORY_MAX_COUNT && (e(c), p.length = 0)) : (o().w("session id is null: ", c), 
                    l.unshift(t)));
                },
                setSessionId: function(e) {
                    if (c = e, o().v("setSessionId: ", c), s(l) && l.length && c) {
                        for (var t = 0; t < l.length; t++) this.addEvent(l[t]);
                        l.length = 0;
                    }
                },
                getEkvs: function() {
                    var e = a().get(r.EKVS);
                    return p && p.length && (e = t(e, p)), e;
                },
                clear: function() {
                    a().remove(r.EKVS), p.length = 0, l.length = 0;
                }
            };
        }
        var u, c, p = [], l = [];
        return function() {
            return u || (u = i()), u;
        };
    }();
}, function(e, t) {
    "use strict";
    e.exports = function(e) {
        return Array.isArray ? Array.isArray(e) : /Array/.test(Object.prototype.toString.call(e));
    };
}, function(e, t, n) {
    var a = n(20), o = n(12), r = n(3), s = n(14), i = n(21), u = n(22), c = n(27), p = n(9), l = n(28), g = n(7), f = 50;
    e.exports = function() {
        function e(e, t, o) {
            t = t || {};
            var s = i(e);
            if (s) {
                var u = n(2), c = u.getGlobalValue(r.APLUS), g = c._aplus_client || {};
                s.header = l.assign(s.header, a.getNetInfo(g)), s.noCache = t.noCache, b.enqueue(s);
            }
            p(o) && o();
        }
        function t(e) {
            var n = b.front(), a = function() {
                b.dequeue(), t(e);
            }, o = function() {
                var n = b.dequeue();
                n && !n.noCache && y.push(n), t(e);
            };
            n ? u(n, a, o) : (d(), e());
        }
        function d() {
            y.forEach(function(e) {
                b.enqueue(e);
            }), y.length = 0;
        }
        function h(e) {
            if (m) return void s().i("队列正在发送中");
            m = !0;
            var n = function() {
                m = !1, p(e) && e();
            };
            t(n);
        }
        function _() {
            this.send = function(e, t, n) {
                e ? this.add(e, t, function() {
                    h(n);
                }) : h(n);
            }, this.add = function(t, n, a) {
                e(t, n, a);
            }, this.load = function() {
                var e = o().get(r.REQUESTS);
                e && e.length && e.forEach(function(e) {
                    b.enqueue(e);
                }), o().remove(r.REQUESTS);
            }, this.save = function() {
                o().set(r.REQUESTS, g(b.items())), b.clear();
            };
        }
        var v = null, m = !1, y = [], b = new c(f);
        return function() {
            return v || (v = new _()), v;
        };
    }();
}, function(e, t, n) {
    var a = n(8), o = n(3), r = n(12), s = n(2), i = n(15);
    t.getNetInfo = function(e) {
        var t = {}, n = e.networkType;
        switch ("none" === n && (n = "unknown"), n = n ? n.toLowerCase() : "") {
          case i.AccessType.MOBILE_NETWORK_4G:
            t.access_subtype = "LTE", t.access = "4G";
            break;

          case i.AccessType.MOBILE_NETWORK_3G:
            t.access_subtype = "CDMA", t.access = "3G";
            break;

          case i.AccessType.MOBILE_NETWORK_2G:
            t.access_subtype = "GRPS", t.access = "2G";
            break;

          default:
            t.access = n, delete t.access_subtype;
        }
        return t;
    }, t.getHeaderInfo = function() {
        var e = {}, t = s.getGlobalValue(o.APLUS), n = t.globalConfig || {}, i = t._aplus_client || {}, u = r().get(o.IMPRINT);
        u && (e.imprint = u), e.device_type = "Phone", e.sdk_version = n.lver, e.appkey = t.getMetaInfo("appKey") || t.getMetaInfo("appId"), 
        e.device_info = "", e.appid = i.appId, e.app_env = i.appEnv, e.app_version = t.getMetaInfo("appVersion") || "devtools";
        var c = t.getMetaInfo("aplus-global-args");
        c && c.debugId && (e.miniappDebugId = c.debugId);
        var p = i || {};
        p.safeArea = p.safeArea || {};
        var l = p.model || "", g = p.platform || "", f = p.brand || "", d = f.toLowerCase();
        e.sdk_type = a.getSdkType(), e.platform = a.getPlatformType(), e.platform_sdk_version = p.SDKVersion, 
        e.platform_version = p.platformVersion;
        var h = Math.round(p.screenWidth * p.pixelRatio), _ = Math.round(p.screenHeight * p.pixelRatio);
        e.resolution = h > _ ? h + "*" + _ : _ + "*" + h, e.pixel_ratio = p.pixelRatio, 
        e.os = g, e.font_size_setting = p.fontSizeSetting, e.device_model = l, e.device_brand = f, 
        e.device_manufacturer = d, e.device_manuid = l, e.device_name = l, e.os_version = p.os_version, 
        e.language = p.language;
        var v = this.getNetInfo(i);
        return e.access = v.access, v.access_subtype && (e.access_subtype = v.access_subtype), 
        e;
    };
}, function(e, t, n) {
    function a() {
        var e = null, t = s().cloneCurrentSession();
        return t && (e = {
            header: {
                st: "1"
            },
            analytics: {
                sessions: [ t ]
            }
        }), e;
    }
    function o() {
        var e = null, t = {}, n = s().cloneCurrentSession();
        n && (t.sessions = [ n ]);
        var a = i().getEkvs();
        return a && (t.ekvs = c(a), i().clear()), (t.sessions || t.ekvs) && (e = {
            analytics: t
        }), e;
    }
    function r() {
        var e = null, t = i().getEkvs();
        return t && (e = {
            analytics: {
                ekvs: c(t)
            }
        }, i().clear()), e;
    }
    var s = n(11), i = n(17), u = n(15), c = n(7);
    e.exports = function(e) {
        var t = null;
        switch (e) {
          case u.DataType.HALF_SESSION:
            t = a();
            break;

          case u.DataType.CLOSE_SESSION:
            t = o();
            break;

          case u.DataType.EKV:
            t = r();
        }
        return t;
    };
}, function(e, t, n) {
    function a() {
        var e = d.getGlobalValue(_.APLUS), t = e.getMetaInfo("aplus-rhost-v"), n = i.getLogDomain();
        if (!t || !n) return m.logger({
            msg: "current request domain invalid, please check your aplus-rhost-v value inside metainfo!"
        }), "";
        var a = [ "//", t, n ].join(""), o = _.HTTPS;
        return /(\d+\.){3,}\d+/.test(a) && (o = "http:"), a = o + a;
    }
    function o(e) {
        var t = i.getContext(), n = e.success, a = e.fail, o = !1, r = null;
        e.success = function(e) {
            o || (r && clearTimeout(r), v(n) && n(e));
        }, e.fail = function() {
            o || (r && clearTimeout(r), v(a) && a(!1));
        };
        try {
            t.request(e);
        } catch (t) {
            try {
                dd && dd.httpRequest(e);
            } catch (e) {
                l().w("请求发送失败: ", e);
            }
        }
        r = setTimeout(function() {
            r && clearTimeout(r), o = !0, v(a) && a(o);
        }, e.timeout || y);
    }
    function r(e) {
        e && (p.set(e), p.save(), l().v("imprint: ", p.getImpObj()));
    }
    function s() {
        var e = i.getSdkType() + "/json", t = !1;
        try {
            my && (t = !0);
        } catch (e) {}
        return t ? {
            headers: {
                "Content-Type": e,
                "Msg-Type": e
            }
        } : {
            header: {
                "Content-Type": e,
                "Msg-Type": e
            }
        };
    }
    var i = n(8), u = n(20), c = n(23), p = n(24), l = n(14), g = n(13), f = n(25), d = n(2), h = n(15), _ = n(3), v = n(9), m = n(26), y = 5e3;
    e.exports = function(e, t, n, m) {
        var y = d.getGlobalValue(_.APLUS), b = u.getHeaderInfo();
        if ("my" === i.getPlatformType() || "taobao" === i.getPlatformType() ? (b.id_type = "alipay_id", 
        b.id_tracking = {
            alipay_id: y.getMetaInfo(_._ANONY_ID) || "",
            unionid: y.getMetaInfo("_dev_id") || "",
            userId: y.getMetaInfo(_._USER_ID) || ""
        }) : (b.id_type = "openid", b.id_tracking = {
            openid: y.getMetaInfo(_._ANONY_ID) || "",
            unionid: y.getMetaInfo("_dev_id") || "",
            userId: y.getMetaInfo(_._USER_ID) || ""
        }), p.get() && (b[_.IMPRINT] = p.get()), e.analytics) {
            var S = y.getMetaInfo(_._USER_ID), P = y.getMetaInfo("_user_nick");
            e.analytics.active_user = {
                puid: S,
                provider: P
            };
        }
        e.header = h.assign(b, e.header, {
            ts: Date.now(),
            traceId: h.getRandomStr(10) + Date.now() + h.getRandomStr(9)
        });
        var I = c(e), C = g.stringfy(I), A = a(), T = {
            url: A,
            method: "POST",
            data: f.encode(C),
            success: function(a) {
                var o = a.code || a.status || a.statusCode;
                200 === o || 413 === o ? (l().i("数据发送成功: ", e, C), r((a.data || {}).imprint), v(t) && t(a)) : (l().w("数据发送失败: ", C), 
                v(n) && n());
            },
            fail: function(e) {
                l().w("超时: ", C), v(n) && n();
            },
            complete: function() {
                v(m) && m();
            }
        };
        o(h.assign(T, s()));
    };
}, function(e, t) {
    function n(e, t) {
        var n = a(e, t);
        return e && e.id_tracking && (n[t.id_tracking || "id_tracking"] = a(e.id_tracking, i)), 
        n;
    }
    function a(e, t) {
        var n = {};
        for (var a in e) t[a] ? n[t[a]] = e[a] : n[a] = e[a];
        return n;
    }
    function o(e, t) {
        var n = {};
        if (e) for (var a in e) e[a] && (n[t[a]] = e[a]);
        return n;
    }
    var r = {
        sessions: "sn",
        ekvs: "e",
        active_user: "active_user"
    }, s = {
        sdk_type: "sdt",
        access: "ac",
        access_subtype: "acs",
        device_model: "dm",
        language: "lang",
        device_type: "dt",
        device_manufacturer: "dmf",
        device_name: "dn",
        platform_version: "pv",
        id_type: "it",
        font_size_setting: "fss",
        os_version: "ov",
        device_manuid: "did",
        platform_sdk_version: "psv",
        device_brand: "db",
        appkey: "ak",
        _id: "id",
        id_tracking: "itr",
        imprint: "imp",
        sdk_version: "sv",
        resolution: "rl",
        testToken: "ttn",
        miniappDebugId: "dk",
        pixel_ratio: "pr"
    }, i = {
        uuid: "ud",
        unionid: "und",
        openid: "od",
        anonymousid: "nd",
        alipay_id: "ad",
        device_id: "dd",
        userid: "puid"
    };
    e.exports = function(e) {
        return {
            h: n(e.header, s),
            a: o(e.analytics, r)
        };
    };
}, function(e, t, n) {
    function a() {
        var e = "", t = this;
        this.set = function(t) {
            e = t;
        }, this.get = function() {
            return e;
        }, this.getImpObj = function() {
            return r.parse(s.decode(e));
        }, this.getItem = function(e) {
            var n = t.getImpObj();
            return n ? n[e] || "" : "";
        }, this.load = function() {
            e = o().get(i.IMPRINT);
        }, this.save = function() {
            e && o().set(i.IMPRINT, e);
        };
    }
    var o = n(12), r = n(13), s = n(25), i = n(3), u = new a();
    e.exports = u;
}, function(e, t) {
    var n = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", a = function(e) {
        for (var t = {}, n = 0, a = e.length; n < a; n++) t[e.charAt(n)] = n;
        return t;
    }(n), o = String.fromCharCode, r = function(e) {
        var t;
        return e.length < 2 ? (t = e.charCodeAt(0), t < 128 ? e : t < 2048 ? o(192 | t >>> 6) + o(128 | 63 & t) : o(224 | t >>> 12 & 15) + o(128 | t >>> 6 & 63) + o(128 | 63 & t)) : (t = 65536 + 1024 * (e.charCodeAt(0) - 55296) + (e.charCodeAt(1) - 56320), 
        o(240 | t >>> 18 & 7) + o(128 | t >>> 12 & 63) + o(128 | t >>> 6 & 63) + o(128 | 63 & t));
    }, s = /[\uD800-\uDBFF][\uDC00-\uDFFFF]|[^\x00-\x7F]/g, i = function(e) {
        return e.replace(s, r);
    }, u = function(e) {
        var t = [ 0, 2, 1 ][e.length % 3], a = e.charCodeAt(0) << 16 | (e.length > 1 ? e.charCodeAt(1) : 0) << 8 | (e.length > 2 ? e.charCodeAt(2) : 0), o = [ n.charAt(a >>> 18), n.charAt(a >>> 12 & 63), t >= 2 ? "=" : n.charAt(a >>> 6 & 63), t >= 1 ? "=" : n.charAt(63 & a) ];
        return o.join("");
    }, c = function(e) {
        return e.replace(/[\s\S]{1,3}/g, u);
    }, p = function(e) {
        return c(i(e));
    }, l = function(e, t) {
        return t ? p(String(e)).replace(/[+\/]/g, function(e) {
            return "+" == e ? "-" : "_";
        }).replace(/\=/g, "") : p(String(e));
    }, g = new RegExp([ "[À-ß][-¿]", "[à-ï][-¿]{2}", "[ð-÷][-¿]{3}" ].join("|"), "g"), f = function(e) {
        switch (e.length) {
          case 4:
            var t = (7 & e.charCodeAt(0)) << 18 | (63 & e.charCodeAt(1)) << 12 | (63 & e.charCodeAt(2)) << 6 | 63 & e.charCodeAt(3), n = t - 65536;
            return o((n >>> 10) + 55296) + o((1023 & n) + 56320);

          case 3:
            return o((15 & e.charCodeAt(0)) << 12 | (63 & e.charCodeAt(1)) << 6 | 63 & e.charCodeAt(2));

          default:
            return o((31 & e.charCodeAt(0)) << 6 | 63 & e.charCodeAt(1));
        }
    }, d = function(e) {
        return e.replace(g, f);
    }, h = function(e) {
        var t = e.length, n = t % 4, r = (t > 0 ? a[e.charAt(0)] << 18 : 0) | (t > 1 ? a[e.charAt(1)] << 12 : 0) | (t > 2 ? a[e.charAt(2)] << 6 : 0) | (t > 3 ? a[e.charAt(3)] : 0), s = [ o(r >>> 16), o(r >>> 8 & 255), o(255 & r) ];
        return s.length -= [ 0, 0, 2, 1 ][n], s.join("");
    }, _ = function(e) {
        return e.replace(/[\s\S]{1,4}/g, h);
    }, v = function(e) {
        return d(_(e));
    }, m = function(e) {
        return v(String(e).replace(/[-_]/g, function(e) {
            return "-" == e ? "+" : "/";
        }).replace(/[^A-Za-z0-9\+\/]/g, ""));
    };
    t.encode = l, t.decode = m;
}, function(e, t, n) {
    "use strict";
    var a = "[aplus log]: ";
    t.logger = function(e) {
        e || (e = {});
        var t = e.level || "warn";
        console && console[t] && console[t](a + e.msg);
    }, t.debugLog = function(e) {
        var t = n(2).getGlobalValue("aplus");
        t && t.aplusDebug && this.logger(e);
    };
}, function(e, t, n) {
    var a = n(14);
    e.exports = function(e) {
        var t = e, n = [];
        this.enqueue = function(e) {
            "number" == typeof t && this.size() >= t && this.dequeue(), n.push(e);
        }, this.dequeue = function() {
            return n.shift();
        }, this.front = function() {
            return n[0];
        }, this.isEmpty = function() {
            return 0 === n.length;
        }, this.clear = function() {
            n.length = 0;
        }, this.size = function() {
            return n.length;
        }, this.items = function() {
            return n;
        }, this.print = function() {
            a().v("---queue: ", n.toString());
        };
    };
}, function(e, t, n) {
    "use strict";
    t.assign = n(29), t.makeCacheNum = function() {
        return Math.floor(268435456 * Math.random()).toString(16);
    }, t.isStartWith = function(e, t) {
        return 0 === e.indexOf(t);
    }, t.isEndWith = function(e, t) {
        var n = e.length, a = t.length;
        return n >= a && e.indexOf(t) == n - a;
    }, t.any = function(e, t) {
        var n, a = e.length;
        for (n = 0; n < a; n++) if (t(e[n])) return !0;
        return !1;
    }, t.isNumber = function(e) {
        return "number" == typeof e;
    }, t.isNaN = function(e) {
        return isNaN ? isNaN(e) : e !== e;
    }, t.isContain = function(e, t) {
        return e.indexOf(t) > -1;
    };
    var a = function(e) {
        var t, n = e.constructor === Array ? [] : {};
        if ("object" == typeof e) {
            if (JSON && JSON.parse) t = JSON.stringify(e), n = JSON.parse(t); else for (var o in e) n[o] = "object" == typeof e[o] ? a(e[o]) : e[o];
            return n;
        }
    };
    t.cloneDeep = a;
}, function(e, t) {
    e.exports = function(e, t) {
        return "function" != typeof Object.assign ? function(e) {
            for (var t = Object(e), n = 1; n < arguments.length; n++) {
                var a = arguments[n];
                if (null !== a) for (var o in a) Object.prototype.hasOwnProperty.call(a, o) && (t[o] = a[o]);
            }
            return t;
        }(e, t) : Object.assign({}, e, t);
    };
}, function(e, t, n) {
    function a(e, t) {
        if (!e) return "";
        var n = [];
        for (var a in t) n.push(a + "=" + t[a]);
        var o = n.join("&");
        return o ? e + "?" + o : e;
    }
    var o = n(2), r = "", s = {};
    t.getCurrentPagePath = function() {
        return r;
    }, t.setCurrentPath = function(e) {
        e && (r = e);
    }, t.getPageQuery = function(e) {
        if (e) return s[e];
    }, t.setPageQuery = function(e, t) {
        e && (s[e] = t);
    }, t.getFullPath = function(e) {
        return a(r, s[e]);
    }, t.getPageName = function(e) {
        var t = o.getGlobalValue("aplus"), n = t.getMetaInfo("pageConfig"), a = e || r;
        try {
            if (n && "object" == typeof n) for (var s in n) {
                if (s === a) break;
                if (n[s] && n[s].regRule) {
                    a = n[s].regRule.test(e) ? s : a;
                    break;
                }
            }
        } catch (e) {}
        return n[a];
    }, t.getPageCode = function(e) {
        return (this.getPageName(e) || {}).pageName;
    }, t.getVTRealtimeCode = function() {
        if (r) {
            var e = s[r] || {}, t = /^\$vt_/, n = decodeURIComponent(e.scene);
            return n && t.test(n) && n.replace(t, "");
        }
    };
}, function(e, t, n) {
    "use strict";
    function a(e, t) {
        var n = m.getContext(), a = A.getCurrentPage(), o = a.route || a.is || "", r = a.options || {}, s = P.obj2param(r, !0);
        s && (o = o + "?" + s), e.query || (e.query = {}), e.query.$$_share_uid = n.aplus.getMetaInfo("_anony_id") || n.aplus.__ETAG__CNA__ID__, 
        e.query.$$_utm_medium = 3, e.query = S.assign({}, r, e.query);
        var i = e.path || o, u = "$$_share_uid=" + e.query.$$_share_uid + "&$$_utm_medium=3";
        return i.indexOf("?") > -1 ? e.path = i + "&" + u : e.path = i + "?" + u, e.status = "ready", 
        n.aplus_queue.push({
            action: y.PUBLISH,
            arguments: [ t, e ]
        }), e;
    }
    function o() {
        var e = m.getContext(), t = {
            status: "ready"
        };
        e.aplus_queue.push({
            action: y.PUBLISH,
            arguments: [ "onPullDownRefresh", t ]
        });
    }
    function r() {
        var e = m.getContext(), t = this, n = {
            status: "ready",
            context: t
        };
        e.aplus_queue.push({
            action: y.PUBLISH,
            arguments: [ "onReachBottom", n ]
        });
    }
    function s(e) {
        var t = m.getContext();
        try {
            C.setCurrentPath(this.route), e && C.setPageQuery(this.route, e), I().v("Page onLoad: ", this.route, e);
            var n = this;
            b.onAplusReady(t.aplus_queue, y.SUBSCRIBE, function() {
                t.aplus_queue.push({
                    action: y.PUBLISH,
                    arguments: [ "onLoad", {
                        status: "ready",
                        context: n
                    } ]
                });
                var e = A.getCurrentPage();
                b.resetFn(e, "setData", function(e) {
                    t.aplus_queue.push({
                        action: y.PUBLISH,
                        arguments: [ "onPageDataChanged", {
                            data: e,
                            context: n
                        } ]
                    });
                });
            });
        } catch (e) {
            I().w("onPageLoad: ", e);
        }
    }
    function i() {
        var e = m.getContext();
        try {
            C.setCurrentPath(this.route), b.onAplusReady(e.aplus_queue, y.SUBSCRIBE, function() {
                var t = this;
                e.aplus_queue.push({
                    action: y.PUBLISH,
                    arguments: [ "onShow", {
                        status: "ready",
                        context: t
                    } ]
                });
            });
        } catch (e) {
            I().w("onPageShow: ", e);
        }
    }
    function u() {
        var e = m.getContext();
        try {
            var t = this;
            e.aplus_queue.push({
                action: y.PUBLISH,
                arguments: [ "onReady", {
                    status: "ready",
                    context: t
                } ]
            });
        } catch (e) {
            I().w("onPageReady: ", e);
        }
    }
    function c() {
        var e = m.getContext();
        try {
            e.aplus_queue.push({
                action: y.PUBLISH,
                arguments: [ "onHide", {
                    status: "ready"
                } ]
            });
        } catch (e) {
            I().w("onPageHide: ", e);
        }
    }
    function p() {
        var e = m.getContext();
        try {
            e.aplus_queue.push({
                action: y.PUBLISH,
                arguments: [ "onUnload", {
                    status: "ready"
                } ]
            });
        } catch (e) {
            I().w("onPageUnload: ", e);
        }
    }
    function l(e) {
        var t = m.getContext();
        t.aplus_queue.push({
            action: y.PUBLISH,
            arguments: [ "onAplusClk", {
                status: "ready",
                event: e,
                context: this
            } ]
        });
    }
    function g(e) {
        var t = m.getContext(), n = this;
        t.aplus_queue.push({
            action: y.PUBLISH,
            arguments: [ "onAplusTouch", {
                status: "ready",
                context: n,
                event: e
            } ]
        });
    }
    function f(e) {
        if (e.onShareAppMessage) {
            var t = e.onShareAppMessage;
            e.onShareAppMessage = function(e) {
                var n = t.call(this, e) || {};
                return a(n, "onShareAppMessage");
            };
        }
    }
    function d(e) {
        if (e.onShareTimeline) {
            var t = e.onShareTimeline;
            e.onShareTimeline = function(e) {
                var n = t.call(this, e) || {};
                return a(n, "onShareTimeline");
            };
        }
    }
    function h() {
        try {
            var e = Page;
            Page = function(t) {
                b.rewriteFn(t, "onShow", i), b.rewriteFn(t, "onHide", c), b.rewriteFn(t, "onUnload", p), 
                b.rewriteFn(t, "onLoad", s), b.rewriteFn(t, "onReady", u), b.rewriteFn(t, "onPullDownRefresh", o), 
                b.rewriteFn(t, "onReachBottom", r), b.rewriteFn(t, "onAplusClk", l), b.rewriteFn(t, "onAplusTouch", g), 
                f(t), d(t), e(t);
            };
        } catch (e) {
            I().w("Page 重写异常");
        }
    }
    function _() {
        try {
            var e = Component;
            Component = function(t) {
                try {
                    t.methods = t.methods || {};
                    var n = t.methods;
                    b.rewriteFn(n, "onShow", i), b.rewriteFn(n, "onHide", c), b.rewriteFn(n, "onUnload", c), 
                    b.rewriteFn(n, "onLoad", s), f(n), e(t);
                } catch (n) {
                    e(t);
                }
            };
        } catch (e) {
            I().w("Component 重写异常");
        }
    }
    function v(e, t, n) {
        [ "object", "function" ].indexOf(typeof e) > -1 ? n() : console.log("typeof " + t + " is not object cant watchExp.");
    }
    var m = n(2), y = n(3), b = n(6), S = n(15), P = n(32), I = n(14), C = n(30), A = n(8);
    e.exports = function() {
        return {
            run: function() {
                v(Page, "Page", h), v(Component, "Component", _);
            }
        };
    };
}, function(e, t) {
    "use strict";
    function n(e, t) {
        var n, o, r, s = [], i = e.length;
        for (r = 0; r < i; r++) {
            n = e[r][0], o = e[r][1];
            var u = 0 === n.indexOf(a), c = u || t ? o : encodeURIComponent(o);
            s.push(u ? c : n + "=" + c);
        }
        return s.join("&");
    }
    t.arr2obj = function(e) {
        var t, n, a, o = {}, r = e.length;
        for (a = 0; a < r; a++) t = e[a][0], n = e[a][1], o[t] = n;
        return o;
    }, t.param2obj = function(e) {
        if ("object" == typeof e) return e;
        e || (e = "");
        for (var t = {}, n = e.split("&"), a = 0; a < n.length; a++) {
            var o = n[a], r = o.indexOf("="), s = o.split("="), i = o.length;
            if (2 === s.length) t[s[0]] = s[1] || ""; else if (r > 0) {
                var u = o.slice(0, r), c = o.slice(r + 1, i) || "";
                t[u] = c;
            } else t[s[0]] = "";
        }
        return t;
    };
    var a = "::-plain-::";
    t.s_plain_obj = a, t.arr2param = n, t.obj2param = function(e, t) {
        var n, o, r, s = [];
        for (n in e) n && e.hasOwnProperty(n) && (o = "" + e[n], r = n + "=" + o, t ? s.push(r) : s.push(0 === n.indexOf(a) ? o : r));
        return s.join("&");
    }, t.encodeGokeyValue = function(e) {
        return e;
    };
}, function(e, t, n) {
    "use strict";
    var a = n(2), o = n(3), r = n(16);
    e.exports = function() {
        return {
            pushQueue: function(e, t) {
                var n = a.getGlobalValue("aplus_queue");
                n.push({
                    action: "aplus." + e,
                    arguments: t
                });
            },
            run: function() {
                var e = this, t = a.getGlobalValue(o.APLUS);
                r(o.openAPIs, function(n) {
                    t[n] = function() {
                        var t = [];
                        r(arguments, function(e) {
                            t.push(e);
                        });
                        var a = "enter" === n ? "_sendPV" : "_" + n;
                        e.pushQueue(a, t);
                    };
                });
            }
        };
    };
}, function(e, t, n) {
    "use strict";
    var a = n(8), o = n(2);
    e.exports = function() {
        return {
            _getNetworkType: function(e) {
                var t = a.getContext();
                t.getNetworkType ? t.getNetworkType({
                    success: function(t) {
                        e(t ? t.networkType : "");
                    }
                }) : e("");
            },
            _getSystemInfo: function(e) {
                var t = this, n = {}, o = t.SYSTEM_INFO || {};
                if (o && o.version) e(t.SYSTEM_INFO); else try {
                    a.getContext().getSystemInfo({
                        complete: function(a) {
                            a && a.version ? t._getNetworkType(function(n) {
                                a.networkType = n, t.SYSTEM_INFO = a, e(a);
                            }) : t._getNetworkType(function(t) {
                                n.networkType = t, e(n);
                            });
                        }
                    });
                } catch (t) {
                    e(n);
                }
            },
            _getAccountInfoSync: function() {
                var e = {};
                try {
                    var t = a.getContext();
                    if (t.getAccountInfoSync && t.canIUse("getAccountInfoSync")) {
                        var n = t.getAccountInfoSync(), o = n.miniProgram || {}, r = n.plugin || {};
                        e.appId = o.appId, e.appVersion = o.version || o.envVersion, e.pluginAppId = r.appId, 
                        e.pluginAppVersion = r.version;
                    } else if (t.getAppIdSync && t.canIUse("getAppIdSync")) {
                        var s = t.getAppIdSync() || {};
                        e.appId = s.appId || "";
                    }
                } catch (e) {}
                return e;
            },
            run: function(e, t) {
                var n = this;
                return this._getSystemInfo(function(e) {
                    e.userAgent = "-", e.os = e.platform ? e.platform.toLocaleUpperCase() : "", e.os_version = e.system ? e.system : "", 
                    e.access = e.brand ? e.brand : "";
                    var a = "";
                    e.host && "string" == typeof e.host.env && (a = e.host.env), e.host = a;
                    var r = n._getAccountInfoSync(), s = Object.assign({}, e, r), i = o.getGlobalValue("aplus");
                    i._aplus_client = s, t();
                }), 2e3;
            }
        };
    };
}, function(e, t, n) {
    var a = n(36), o = n(2);
    e.exports = function() {
        return {
            run: function() {
                var e = o.getGlobalValue("aplus");
                e.aplus_pubsub || (e.aplus_pubsub = a.create());
            }
        };
    };
}, function(e, t, n) {
    "use strict";
    var a = n(9), o = n(37), r = function(e) {
        for (var t = e.length, n = new Array(t - 1), a = 1; a < t; a++) n[a - 1] = e[a];
        return n;
    }, s = o.extend({
        callable: function(e) {
            if (!a(e)) throw new TypeError(e + " is not a function");
            return e;
        },
        create: function(e) {
            var t = new this();
            for (var n in e) t[n] = e[n];
            return t.handlers = [], t.pubs = {}, t;
        },
        setHandlers: function(e) {
            this.handlers = e;
        },
        subscribe: function(e, t) {
            this.callable(t);
            var n = this, a = n.pubs || {}, o = a[e] || [];
            if (o) for (var r = 0; r < o.length; r++) {
                var s = o[r]();
                t.apply(n, s);
            }
            var i = n.handlers || [];
            return e in i || (i[e] = []), i[e].push(t), n.setHandlers(i), n;
        },
        unsubscribe: function(e, t) {
            this.callable(t);
            try {
                var n = this.handlers[e];
                if (!n) return this;
                if ("object" == typeof n && n.length > 0) {
                    for (var a = 0; a < n.length; a++) {
                        var o = t.toString(), r = n[a].toString();
                        o === r && n.splice(a, 1);
                    }
                    this.handlers[e] = n;
                } else delete this.handlers[e];
            } catch (e) {}
            return this;
        },
        publish: function(e) {
            var t = r(arguments), n = this.handlers || [], o = n[e] ? n[e].length : 0;
            if (o > 0) for (var s = 0; s < o; s++) {
                var i = n[e][s];
                a(i) && i.apply(this, t);
            }
            return this;
        },
        cachePubs: function(e) {
            var t = this.pubs || {}, n = r(arguments);
            t[e] || (t[e] = []), t[e].push(function() {
                return n;
            });
        }
    });
    e.exports = s;
}, function(e, t, n) {
    "use strict";
    function a() {}
    var o = n(9);
    a.prototype.extend = function() {}, a.prototype.create = function() {}, a.extend = function(e) {
        return this.prototype.extend.call(this, e);
    }, a.prototype.create = function(e) {
        var t = new this();
        for (var n in e) t[n] = e[n];
        return t;
    }, a.prototype.extend = function(e) {
        var t = function() {};
        try {
            o(Object.create) || (Object.create = function(e) {
                function t() {}
                return t.prototype = e, new t();
            }), t.prototype = Object.create(this.prototype);
            for (var n in e) t.prototype[n] = e[n];
            t.prototype.constructor = t, t.extend = t.prototype.extend, t.create = t.prototype.create;
        } catch (e) {
            console && console.log(e);
        } finally {
            return t;
        }
    }, e.exports = a;
}, function(e, t, n) {
    "use strict";
    e.exports = function() {
        return {
            run: function() {
                n(39)(this.options.context.aplus_config);
            }
        };
    };
}, function(e, t, n) {
    "use strict";
    var a = n(2), o = n(3), r = n(40);
    e.exports = function(e) {
        var t = a.getGlobalValue(o.APLUS), n = t._$ = t._$ || {};
        n.is_terminal = !0, n.send_pv_count = 0, n.spm = {
            data: {}
        }, n.meta_info = r.qGet() || {}, t.globalConfig = e.globalConfig;
        for (var s in e.metaInfo) r.setMetaInfo(s, e.metaInfo[s]);
        t._$ = n, t.isInternational = function() {
            return !1;
        };
    };
}, function(e, t, n) {
    "use strict";
    function a() {
        return s = p || {}, p;
    }
    function o() {
        return s || a();
    }
    function r(e, t) {
        return s || (s = {}), s[e] = t, !0;
    }
    var s, i = n(41), u = n(32), c = n(2), p = {}, l = "object", g = "string";
    t.getInfo = a, t.qGet = o, t.setMetaInfo = r;
    var f = function(e) {
        return s || (s = {}), s[e] || "";
    };
    t.getMetaInfo = f;
    var d = function(e, t) {
        if (e && t) {
            var n, a = function(n) {
                try {
                    var a = typeof t === g ? JSON.parse(t) : t;
                    s(e, Object.assign({}, n, a));
                } catch (e) {}
            }, o = function(n) {
                try {
                    var a = typeof t === g ? JSON.parse(t) : t;
                    s(e, n.concat(a));
                } catch (e) {}
            }, r = function(e) {
                e.constructor === Array ? o(e) : a(e);
            }, s = function(e, t) {
                h(e, t, {
                    from: "appendMetaInfo"
                });
            }, i = f(e);
            if ("aplus-exinfo" === e && (s(e, Object.assign({}, i, u.param2obj(t))), n = !0), 
            "aplus-page-properties" === e) {
                var c = t;
                if (i) for (var p in i) t[p] ? c[p] = Object.assign({}, i[p], t[p]) : c[p] = i[p];
                s(e, c), n = !0;
            }
            if (i) if (typeof i === l) r(i), n = !0; else try {
                var d = JSON.parse(i);
                typeof d === l && (r(d), n = !0);
            } catch (e) {}
            n || s(e, t);
        }
    };
    t.appendMetaInfo = d;
    var h = function(e, t) {
        var n, a, s = "OVERWRITE", u = s;
        if ("object" == typeof e ? (n = e.metaName, a = e.metaValue, u = e.mode || s) : (n = e, 
        a = t), u !== s) return d(n, a);
        if (r(n, a)) {
            var p = c.getGoldlogVal("_$") || {};
            p.meta_info = o();
            var l = c.setGoldlogVal("_$", p), g = [ "setMetaInfo", n, a, {} ];
            return i.doPubMsg(g), i.doCachePubs(g), l;
        }
    };
    t._setMetaInfo = h;
}, function(e, t, n) {
    "use strict";
    var a = n(2), o = "function", r = function() {
        var e = a.getGlobalValue("aplus"), t = e.aplus_pubsub || {}, n = typeof t.publish === o;
        return n ? t : "";
    };
    t.doPubMsg = function(e) {
        var t = r();
        t && typeof t.publish === o && t.publish.apply(t, e);
    }, t.doCachePubs = function(e) {
        var t = r();
        t && typeof t.cachePubs === o && t.cachePubs.apply(t, e);
    }, t.doSubMsg = function(e, t) {
        var n = r();
        n && typeof n.subscribe === o && n.subscribe(e, t);
    };
}, function(e, t, n) {
    "use strict";
    e.exports = function() {
        return {
            run: function() {
                n(43)();
            }
        };
    };
}, function(e, t, n) {
    "use strict";
    var a = n(44), o = n(2), r = n(3), s = n(18), i = n(7), u = n(28), c = n(30);
    e.exports = function() {
        var e = o.getContext(), t = o.getGlobalValue("aplus"), n = [], p = function(e) {
            n = t.getMetaInfo("aplus-auto-clk");
            var o = c.getPageCode();
            s(n) && n.forEach(function(t) {
                u.isStartWith(t.cssSelector, ".") || (t.cssSelector = "." + t.cssSelector), t.spmB || (t.spmB = o);
                var n = e.context.createSelectorQuery().selectAll(t.cssSelector);
                "function" == typeof n.fields ? n.fields({
                    id: !0,
                    dataset: !0,
                    rect: !0,
                    scrollOffset: !0
                }, function(n) {
                    a.watch_click(e.event || e.res, i(n), t);
                }).exec() : n.boundingClientRect().exec(function(n) {
                    n && n.length > 0 && n[0] && a.watch_click(e.event, i(n[0]), t);
                });
            });
        };
        e.aplus_queue.push({
            action: r.SUBSCRIBE,
            arguments: [ "aplusReady", function(e) {
                "complete" === e && (n = t.getMetaInfo("aplus-auto-clk"));
            } ]
        }), e.aplus_queue.push({
            action: r.SUBSCRIBE,
            arguments: [ "onShow", function() {} ]
        }), e.aplus_queue.push({
            action: r.SUBSCRIBE,
            arguments: [ "onHide", function() {} ]
        }), e.aplus_queue.push({
            action: r.SUBSCRIBE,
            arguments: [ "onAplusClk", function(e) {
                "ready" === e.status && p(e);
            } ]
        }), t.aplus_pubsub.subscribe("onUnload", function(e) {
            "ready" === e.status;
        });
    };
}, function(e, t, n) {
    "use strict";
    function a(e, t) {
        var n = r.getGoldlogVal("_aplus_auto_exp") || {}, a = n.hashMap || {};
        for (var s in a) for (var u = a[s] || [], c = 0; c < u.length; c++) {
            var p = u[c] || {}, l = p.expConfig || {};
            if (e.cssSelector === l.cssSelector) {
                var g = i({
                    index: t
                }, l);
                if (g === p.hash_value) return o(p.dataset);
            }
        }
    }
    var o = n(7), r = n(2), s = n(45), i = n(46), u = n(10);
    t.watch_click = function(e, t, n) {
        function o(e, t) {
            var n = {};
            e && (e.changedTouches ? n = e.changedTouches[0] : e.detail && (n = e.detail));
            var a = n.clientX || 0, o = n.clientY || 0, r = t.top, s = t.bottom;
            return t.scrollTop && (r += t.scrollTop, s += t.scrollTop), t.left < a && a < t.right && r < o && o < s;
        }
        for (var i = r.getGlobalValue("aplus"), c = 0; c < t.length; c++) {
            var p = t[c];
            if (o(e, p)) {
                var l = c + 1, g = p.dataset || a(n, l) || {}, f = {}, d = u.jsonLikeStr2JSON(g.trackerParams) || {};
                if (i.globalConfig.isAli) {
                    var h = g.tracker || n.cssSelector.replace(/\'|\"|\;|\:|\=|\[|\]|\.|\#|\-|\/|\|/g, "");
                    if (f = i._$.spm.data || {}, f.c = h, f.c && "0" !== f.c) {
                        var _ = "d" + l;
                        f.d = _;
                    }
                } else f.b = n.spmB, n.spmC ? f.c = n.spmC : f.c = d.spmC ? encodeURIComponent(d.spmC) : "", 
                n.spmD ? f.d = l ? n.spmD + "_" + l : n.spmD : f.d = d.spmD ? encodeURIComponent(d.spmD) : "";
                s.pushEvent("CLK", g, n, p, f);
            }
        }
    };
}, function(e, t, n) {
    function a(e, t, n) {
        var a = r.getGlobalValue("aplus") || {}, o = a.getMetaInfo;
        if ("function" == typeof o) {
            var u = o(e), c = {};
            return "function" == typeof u && (c = u(t ? i(t) : {}, n)), s.param2obj(c);
        }
        return {};
    }
    function o(e, t) {
        var n = "";
        try {
            var a = new Number(e);
            n = parseFloat(a.toFixed(t));
        } catch (t) {
            n = e;
        }
        return n;
    }
    var r = n(2), s = n(32), i = n(7), u = n(18), c = n(37), p = {}, l = 3, g = "POST", f = "EXP", d = c.extend({
        push: function(e) {
            var t = r.getGlobalValue("aplus");
            for (this.buffer.push(e); this.buffer.length >= this.pkgSize; ) {
                var n = this.buffer.splice(0, this.pkgSize);
                n.length > 0 && t.combineRecord(this.logkey, f, n, this.method);
            }
        }
    });
    t.pushEvent = function(e, t, n, s, i) {
        var c = r.getGlobalValue("aplus"), l = n.props || [], d = {}, h = {};
        if (t) for (var _ in t) h[_.toLowerCase().replace(/^data-/, "").replace(/-/g, "")] = t[_];
        if (l && u(l)) for (var v = 0; v < l.length; v++) {
            var m = l[v].toLowerCase().replace(/^data-/, "").replace(/-/g, "");
            d[l[v]] = h[m];
        } else d = Object.assign({}, h);
        s && e === f && (d = Object.assign({}, d, {
            _w: o(s.width, 2),
            _h: o(s.height, 2),
            _x: o(s.x, 2),
            _y: o(s.y, 2),
            _rate: o(s.viewabilityRate || s.intersectionRatio, 2),
            _viewability: "intersection"
        })), n._vt && (d._vt = n._vt);
        var y = e === f ? "aplus-auto-exp-userfn" : "aplus-auto-clk-userfn", b = a(y, s, n.cssSelector);
        b.spm || (c.globalConfig.isAli && i && i.a && i.b ? b.spm = [ i.a, i.b, i.c || "0", i.d || "0" ].join(".") : b.spm = i && i.b ? i : void 0);
        var S = {}, P = t.trackerParams || t["tracker-params"];
        if (P) try {
            var I = JSON.parse(P);
            d = Object.assign(d, I), delete d.trackerParams, delete d.trackerparams;
        } catch (e) {}
        "EXP" === e && c.globalConfig.isAli && p[n.logkey] ? (S = Object.assign({}, {
            exargs: d
        }, b), p[n.logkey].push(S)) : (S = Object.assign({}, d, b, n.customArgs), c.record(n.logkey, e, S, g));
    }, t.watchRecord = function(e) {
        var t = r.getGlobalValue("aplus");
        t.globalConfig.isAli && e && e.forEach(function(e) {
            p.hasOwnProperty(e.logkey) || (p[e.logkey] = d.create({
                length: 0,
                buffer: [],
                logkey: e.logkey,
                pkgSize: "number" == typeof e.pkgSize && e.pkgSize || l,
                method: e.method || g
            }));
        });
    }, t.clearRecord = function() {
        var e = r.getGlobalValue("aplus");
        if (e.globalConfig.isAli) for (var t in p) {
            var n = p[t].buffer;
            n.length > 0 && (e.combineRecord(t, f, n, g), p[t].buffer = []);
        }
    };
}, function(e, t) {
    e.exports = function(e, t) {
        var n = [ t.logkey, t.cssSelector, t.positionSelector ];
        return e.id && n.push(e.id), e.dataset && n.push(JSON.stringify(e.dataset)), n = n.join("_");
    };
}, function(e, t, n) {
    "use strict";
    e.exports = function() {
        return {
            run: function() {
                n(48)();
            }
        };
    };
}, function(e, t, n) {
    "use strict";
    var a = n(2), o = n(49), r = n(50), s = n(3), i = n(8), u = {};
    e.exports = function() {
        function e(e, t, n) {
            var a = function(n, a) {
                if ("aplus-auto-exp" === n) {
                    var s = r.getAutoExpConfig(a);
                    if (JSON.stringify(s) === JSON.stringify(f)) return;
                    f = s, a && f && f.length > 0 && o.watch_exposure(e, f, t);
                }
            };
            c.aplus_queue.push({
                action: n,
                arguments: [ "setMetaInfo", a ]
            });
        }
        function t(e, t) {
            f = g.getMetaInfo("aplus-auto-exp"), setTimeout(function() {
                o.watch_exposure(e, f, t);
            }, 0);
        }
        function n(e) {
            try {
                var n = i.getCurrentPage(), a = n.route || n.is, o = u[a], r = JSON.stringify(e.data);
                o !== r && (u[a] = r, t(e.context, 0));
            } catch (e) {}
        }
        var c = a.getContext(), p = 0, l = 0, g = a.getGlobalValue("aplus");
        if (!g._aplus_auto_exp) {
            g._aplus_auto_exp = {
                hashMap: {}
            };
            var f = [];
            c.aplus_queue.push({
                action: s.SUBSCRIBE,
                arguments: [ "onShow", function(n) {
                    if ("ready" === n.status) {
                        e(n.context, 1, s.SUBSCRIBE), 0 === p ? (t(n.context, 1), p = 1) : t(n.context, 0);
                        try {
                            var a = i.getCurrentPage(), o = a.route || a.is;
                            u[o] = o;
                        } catch (e) {}
                    }
                } ]
            }), c.aplus_queue.push({
                action: s.SUBSCRIBE,
                arguments: [ "onAplusTouch", function(e) {
                    "ready" === e.status && (0 === l ? (l = 1, t(e.context, 1)) : n(e));
                } ]
            }), c.aplus_queue.push({
                action: s.SUBSCRIBE,
                arguments: [ "onPageDataChanged", function(e) {
                    setTimeout(function() {
                        n(e);
                    }, 200);
                } ]
            }), c.aplus_queue.push({
                action: s.SUBSCRIBE,
                arguments: [ "onHide", function(t) {
                    "ready" === t.status && (u = {}, p = 0, l = 0, e(t.context, 1, s.UNSUBSCRIBE), o.clear());
                } ]
            }), c.aplus_queue.push({
                action: s.SUBSCRIBE,
                arguments: [ "onUnload", function(e) {
                    "ready" === e.status && (u = {}, o.clear());
                } ]
            });
        }
    };
}, function(e, t, n) {
    "use strict";
    var a, o = n(2), r = n(50), s = n(7), i = n(45), u = n(46), c = [], p = n(8), l = n(28), g = n(10), f = n(51), d = n(30);
    t.watch_exposure = function(e, t, n, h) {
        function _(o) {
            function r(e) {
                var t = u[0];
                t && !l.isStartWith(u[0], ".") && (t = "." + t);
                try {
                    var n = a.createSelectorQuery().selectAll(t);
                    "function" == typeof n.fields ? n.fields({
                        dataset: !0,
                        id: !0
                    }, function(t) {
                        if (t && f.isArray(t)) {
                            for (var n = 0; n < t.length; n++) t[n].index = "" + (n + 1);
                            e({
                                elements: t,
                                type: "COMMON"
                            });
                        }
                    }).exec() : console.warn("该平台不支持自动曝光");
                } catch (e) {
                    console.warn("该平台不支持自动曝光, err = ", e);
                }
            }
            if (o < t.length) {
                var i = t[o];
                I = 0, c.forEach(function(e) {
                    e.subject[0] === i.cssSelector && e.subject[1] === i.positionSelector && (I = 1);
                });
                var u = [ i.cssSelector, i.positionSelector ];
                r(function(t) {
                    for (var a = t.elements || [], r = 0; r < a.length; r++) {
                        var p = a[r];
                        if (0 === I || 0 === n) {
                            var l = y(e);
                            l.subject = u, c.push(l), p.index && !v(p, i) && (m(p, i), b(l, i, p.index, function(e, t, n) {
                                if (n) {
                                    var a = s(e);
                                    a.index = "" + n;
                                    var o = s(a.dataset);
                                    m({
                                        id: a.id,
                                        index: a.index,
                                        dataset: o
                                    }, t), S(a, o, i);
                                }
                            }));
                        }
                    }
                    _(++o);
                });
            }
        }
        function v(e, t) {
            var n = u(e, t), a = e.index;
            return A[t.logkey] && A[t.logkey].forEach(function(e) {
                if (e.hash_value === n && e.index === a) return !0;
            }), !1;
        }
        function m(e, t) {
            var n = u(e, t);
            try {
                var a = e.index;
                if (A[t.logkey]) {
                    var o = 0;
                    A[t.logkey].forEach(function(t) {
                        t.hash_value === n && (o = 1, e.id && (t.id = e.id), e.dataset && (t.dataset = e.dataset), 
                        e.status && (t.status = e.status));
                    }), o || A[t.logkey].push({
                        id: e.id,
                        hash_value: n,
                        status: 0,
                        expConfig: t,
                        dataset: e.dataset,
                        index: a
                    });
                } else A[t.logkey] = [ {
                    id: e.id,
                    hash_value: n,
                    status: 0,
                    expConfig: t,
                    dataset: e.dataset,
                    index: a
                } ];
            } catch (e) {
                console.log("error === ", e);
            }
        }
        function y(e) {
            var t = {
                thresholds: [ r.AUTO_AT_VIEW_RATE ],
                initialRatio: 0
            }, n = !1;
            try {
                my && (n = !0);
            } catch (e) {}
            return n ? (t.selectAll = !0, a.createIntersectionObserver(t)) : (t.observeAll = !0, 
            a.createIntersectionObserver(e, t));
        }
        function b(e, t, n, a) {
            var o = t.cssSelector;
            o && !l.isStartWith(o, ".") && (o = "." + o), t.positionSelector ? e.relativeTo(t.positionSelector).observe(o, function(e) {
                try {
                    a(e, t, n);
                } catch (e) {
                    console.log("errorMessage: ", e);
                }
            }) : e.relativeToViewport().observe(o, function(e) {
                try {
                    a(e, t, n);
                } catch (e) {
                    console.log("errorMessage: ", e);
                }
            });
        }
        function S(e, t, n) {
            var a = o.getGlobalValue("aplus"), r = new Date().getTime(), u = P(r, e, n);
            if (u && u.length > 0) {
                var c = u[0], p = t.tracker || n.cssSelector.replace(/\'|\"|\;|\:|\=|\[|\]|\.|\#|\-|\/|\|/g, ""), l = {}, f = g.jsonLikeStr2JSON(t.trackerParams || {}) || {}, h = c.index;
                if (a.globalConfig.isAli) {
                    if (l = s(a._$.spm.data || {}), l.c = p, l.c && "0" !== l.c) {
                        var _ = "d" + h;
                        l.d = _;
                    }
                } else d.getPageCode() && (l.b = d.getPageCode()), n.spmC ? l.c = n.spmC : l.c = f.spmC ? encodeURIComponent(f.spmC) : "", 
                n.spmD ? l.d = h ? n.spmD + "_" + h : n.spmD : l.d = f.spmD ? encodeURIComponent(f.spmD) : "";
                i.pushEvent("EXP", t, n, Object.assign({}, e, {
                    x: c.x,
                    y: c.y,
                    width: c.width,
                    height: c.height,
                    hash_value: c.hash_value
                }), l);
            }
        }
        function P(e, t, n) {
            var a = o.getGoldlogVal("_aplus_auto_exp") || {}, s = a.hashMap || {}, i = [];
            for (var c in s) for (var p = s[c] || [], l = 0; l < p.length; l++) {
                var g = u(t, n), f = p[l] || {};
                if (0 === f.status && f.expConfig && g === f.hash_value) {
                    var d = t.boundingClientRect || {};
                    d.width && d.height && (f.dataset = t.dataset, f.x = d.left, f.y = d.top, f.width = d.width, 
                    f.height = d.height, f.size = d.width * d.height, t.intersectionRatio >= r.AUTO_AT_VIEW_RATE && (f.exposureTime = e, 
                    f.status = 1, i.push(f)));
                }
            }
            return i;
        }
        a && !h || (a = p.getContext());
        var I, C = o.getGoldlogVal("_aplus_auto_exp") || {}, A = C.hashMap || {};
        i.watchRecord(t), _(0);
    }, t.reset = function() {}, t.clear = function() {
        i.clearRecord();
        for (var e = 0; e < c.length; e++) c[e].disconnect();
        c = [];
        var t = o.getGoldlogVal("_aplus_auto_exp") || {}, n = t.hashMap || {};
        for (var a in n) delete n[a];
    };
}, function(e, t, n) {
    "use strict";
    function a(e) {
        return aplus && aplus.getMetaInfo ? aplus.getMetaInfo(e) : r.getMetaCnt(e);
    }
    var o = n(51), r = n(52), s = n(26);
    t.DATA_APLUS_AE_KEY = "data-aplus-ae", t.DATA_APLUS_AC_KEY = "data-aplus-clk", t.DATA_APLUS_SPM_ANCHOR_ID_KEY = "data-spm-anchor-id", 
    t.DATA_APLUS_VT_ITEM_INDEX_KEY = "data-aplus-vt-pos", t.LOOP_TIME = 1e3, t.getDefaultRequestCfg = function() {
        return {
            method: "POST",
            pkgSize: 10
        };
    };
    var i = function(e) {
        var t = e;
        try {
            var n = a("aplus-auto-exp-visible");
            n && (t = parseFloat(n)), t <= 0 && (t = e);
        } catch (n) {
            t = e;
        } finally {
            return t;
        }
    };
    t.AUTO_AT_VIEW_RATE = i(.3);
    var u = function(e) {
        var t = e;
        try {
            var n = a("aplus-auto-exp-duration"), o = parseInt(n);
            o + "" != "NaN" && (t = o);
        } catch (e) {} finally {
            return t;
        }
    };
    t.EXP_DURATION = u(300);
    var c = function(e, t) {
        var n, r = [], i = [];
        try {
            n = t || a(e);
            var u = [];
            if (n && "string" == typeof n) try {
                u = JSON.parse(n);
            } catch (e) {
                u = JSON.parse(n.replace(/'/g, '"'));
            } else "object" == typeof n && n.constructor === Array && (u = n);
            if (u && u.constructor === Array) for (var c = 0; c < u.length; c++) {
                var p = u[c] || {}, l = p.logkey || "", g = p.tag ? p.tag : "", f = p.filter, d = p.cssSelector, h = d || g && f;
                if (!l || !h) throw new Error("meta " + e + " config error, " + JSON.stringify(p));
                f = "string" == typeof f ? f.split("=") : [];
                var _ = g;
                if (f.length >= 2 ? _ += "[" + f.shift() + '="' + decodeURIComponent(f.join("")) + '"]' : 1 == f.length && f[0] && (_ += "[" + decodeURIComponent(f[0]) + "]"), 
                d && (_ += d), p.elementSelector = _, o.indexof(i, _) > -1) throw new Error("meta " + e + " config error, tag_filter_cssSelector " + _ + " repeated");
                i.push(_), r.push(p);
            }
        } catch (e) {
            s.logger({
                msg: e
            });
        } finally {
            return r;
        }
    };
    t.getAutoExpConfig = function(e) {
        return c("aplus-auto-exp", e) || [];
    }, t.getAutoExpUserFn = function() {
        var e = a("aplus-auto-exp-userfn");
        if (e) {
            var t = window[e] || e;
            if ("function" == typeof t) return t;
        }
        return null;
    }, t.isThrottleWatchDom = function() {
        var e = !1;
        try {
            e = "throttle" === a("aplus-auto-exp-watchdom");
        } catch (e) {}
        return e;
    }, t.getAutoClkConfig = function(e) {
        return c("aplus-auto-clk", e) || [];
    }, t.getAutoClkUserFn = function() {
        var e = a("aplus-auto-clk-userfn");
        if (e) {
            var t = window[e] || e;
            if ("function" == typeof t) return t;
        }
        return null;
    };
}, function(e, t) {
    "use strict";
    t.indexof = function(e, t) {
        var n = -1;
        try {
            n = e.indexOf(t);
        } catch (o) {
            for (var a = 0; a < e.length; a++) e[a] === t && (n = a);
        } finally {
            return n;
        }
    }, t.itemMatch = function(e, t) {
        var n = !1;
        try {
            if (!this.isArray(e)) return n;
            n = e.some(function(e) {
                return e && e.length > 0 && t.indexOf(e) !== -1;
            });
        } catch (o) {
            for (var a = 0; a < e.length; a++) if (t.indexOf(e[a]) !== -1) {
                n = !0;
                break;
            }
        }
        return n;
    }, t.isArray = function(e) {
        return Array.isArray ? Array.isArray(e) : /Array/.test(Object.prototype.toString.call(e));
    };
}, function(e, t, n) {
    "use strict";
    function a(e) {
        return s = s || document.getElementsByTagName("head")[0], i && !e ? i : s ? i = s.getElementsByTagName("meta") : [];
    }
    function o(e, t) {
        var n, o, r, s = a(), i = s.length;
        for (n = 0; n < i; n++) o = s[n], u.tryToGetAttribute(o, "name") === e && (r = u.tryToGetAttribute(o, t || "content"));
        return r || "";
    }
    function r(e) {
        var t = {
            isonepage: "-1",
            urlpagename: ""
        }, n = e.qGet();
        if (n && n.hasOwnProperty("isonepage_data")) t.isonepage = n.isonepage_data.isonepage, 
        t.urlpagename = n.isonepage_data.urlpagename; else {
            var a = o("isonepage") || "-1", r = a.split("|");
            t.isonepage = r[0], t.urlpagename = r[1] ? r[1] : "";
        }
        return t;
    }
    var s, i, u = n(53);
    t.getMetaTags = a, t.getMetaCnt = o, t.getOnePageInfo = r;
}, function(e, t) {
    "use strict";
    t.tryToGetAttribute = function(e, t) {
        return e && e.getAttribute ? e.getAttribute(t) || "" : "";
    };
    var n = function(e, t, n) {
        if (e && e.setAttribute) try {
            e.setAttribute(t, n);
        } catch (e) {}
    };
    t.tryToSetAttribute = n, t.tryToRemoveAttribute = function(e, t) {
        if (e && e.removeAttribute) try {
            e.removeAttribute(t);
        } catch (a) {
            n(e, t, "");
        }
    };
}, function(e, t, n) {
    var a = n(2), o = n(18), r = n(3), s = n(8);
    e.exports = function() {
        return {
            resetLastPageSpm: function() {
                var e = a.getGlobalValue(r.APLUS, {}), t = e._$.spm || {};
                t.spm_cnt = "";
            },
            listen: function() {
                var e = this, t = a.getGlobalValue(r.APLUS_QUEUE, []);
                t.push({
                    action: r.SUBSCRIBE,
                    arguments: [ "onShow", function(e) {
                        if ("ready" === e.status) {
                            var t = a.getGlobalValue(r.APLUS, {}), n = t.getMetaInfo("pages"), i = s.getCurrentPage(), u = i.route || i.is;
                            if (o(n)) for (var c = 0; c < n.length; c++) {
                                var p = n[c];
                                if (p.matchUrl === u) {
                                    t.setPageSPM(p.spmA, p.spmB);
                                    break;
                                }
                            }
                        }
                    } ]
                }), t.push({
                    action: r.SUBSCRIBE,
                    arguments: [ "clearPageSPM", function() {
                        e.resetLastPageSpm();
                    } ]
                }), t.push({
                    action: r.SUBSCRIBE,
                    arguments: [ "setPageSPM", function(e) {
                        try {
                            var t = a.getGlobalValue(r.APLUS, {}), n = t._$.spm || {}, o = getCurrentPages() || [], s = e.spmCnt ? e.spmCnt.split(".") : [ n.data.a || "0", n.data.b || "0" ];
                            2 === s.length && (s = s.concat([ "0", "0" ]));
                            var i = s.join("."), u = o[o.length - 1], c = o[o.length - 2] || {}, p = o[o.length - 3] || {};
                            o.length > 0 && u && (o[o.length - 1].spm = i);
                            var l = n.data && n.data.a ? [ n.data.a, n.data.b, n.data.c || "0", n.data.d || "0" ].join(".") : "";
                            n.data.a = s[0] ? "" + s[0] : "0", n.data.b = s[1] ? "" + s[1] : "0", n.data.c = "0", 
                            n.data.d = "0", n.page_referrer = o.length > 1 && u ? u.route || u.is : "", n.spm_cnt = i;
                            var g = t.spm_orign || n.spm_orign;
                            n.spm_pre = e.spmPre || n.spm_url || p.spm || "", n.spm_url = e.spmUrl || l || c.spm || g || "", 
                            t._$.spm = n;
                        } catch (e) {
                            console.log("setPageSPM error, the errorInfo is ", e);
                        }
                    } ]
                });
            },
            run: function() {
                this.listen();
            }
        };
    };
}, function(e, t, n) {
    e.exports = function() {
        return {
            run: function() {
                var e = n(56), t = e.create();
                t.run(this.options);
            }
        };
    };
}, function(e, t, n) {
    "use strict";
    function a(e, t) {
        if (u().v("event: ", e, t), i.checkEvent(e, t)) {
            var a = n(59)(e, t);
            r().addEvent(a), s().send(i.DataType.EKV, {
                noCache: !1
            }, function() {
                u().i("event send success: ", e, a);
            });
        }
    }
    var o = n(57), r = n(17), s = n(19), i = n(15), u = n(14), c = n(7), p = n(28), l = n(2), g = n(8), f = n(3), d = n(30);
    e.exports = o.extend({
        handlerMiddleware: function(e) {
            var t = l.getGlobalValue("aplus");
            u().setDebug(!!t.getMetaInfo("DEBUG"));
            var n, o, r, s = e && e.userdata && e.userdata.logkey, h = e && e.userdata && e.userdata.gmkey, _ = e && e.what_to_send && e.what_to_send.logdata && e.what_to_send.logdata || {}, v = t.getMetaInfo("globalproperty");
            if ("CLK" === h || "EXP" === h || "OTHER" === h || s === f.APP_START || s === f.APP_END) {
                n = c(e && e.userdata && e.userdata.gokey || {}), o = _.gokey || {};
                var m, y = {};
                "$$_share" === s && (y.refer_page = _.url, y.share_type = n.share_type), o.scene && (y.scene = g.getPlatformType() + "_" + o.scene), 
                r = n["data-pagename"] || n.page_name || n.spm && n.spm.b || t.getPageName() || _.url || "", 
                y.page_name = r, y.url = _.url || "-", (n.page_name || n["data-pagename"]) && (delete n.page_name, 
                delete n["data-pagename"]), v && (y.gp = v), n.spm && (y["spm-cnt"] = [ encodeURIComponent(r), n.spm.c, n.spm.d ].filter(function(e) {
                    return !!e;
                }).join("."), delete n.spm);
                var b = c(n);
                for (var S in b) "string" == typeof S && i.startsWith(S, "_") && (y[S] = b[S], delete n[S]);
                m = s === f.APP_START || s === f.APP_END ? p.assign(y, n) : p.assign(y, {
                    cusp: n
                }), a(s, m);
            } else if ("2001" === _.event_code) {
                var P = {}, I = f.PAGE_START;
                o = c(_.gokey || {}), r = o.page_name || t.getPageName() || d.getPageCode(_.url) || _.url || "", 
                P.r = _.arg1 || _.logkey || "-", P.page_name = r, P.url = _.url || "-", P.ref_url = _.pre, 
                o._page_auto_pv ? (P.is_auto = 1, delete o._page_auto_pv) : P.is_auto = 0, o.duration && (P.duration = o.duration, 
                delete o.duration), v && (P.gp = v), o.scene && (P.scene = g.getPlatformType() + "_" + o.scene), 
                o = i.deleteInfo(o, [ "_anony_id", "_dev_id", "_session_id", "_user_id", "_user_nick", "uaid", "pvid", "scene" ]), 
                P["spm-cnt"] = encodeURIComponent(r), o._page_auto_id && (I = o._page_auto_id, delete o._page_auto_id), 
                o.page_start && (P.page_start = o.page_start, delete o.page_start), o.page_name, 
                a(I, p.assign(P, {
                    cusp: o
                }));
            }
        },
        run: function() {
            this.watchLOG();
        }
    });
}, function(e, t, n) {
    "use strict";
    var a = n(37), o = n(58), r = n(3);
    e.exports = a.extend({
        subscribeLogs: function(e, t) {
            o.pushIntoGoldlogQueue(r.SUBSCRIBE, [ e, function(e) {
                e.status === r.COMPLETE && t(e);
            } ]);
        },
        getLogicSymbol: function() {
            return "ALI" === this.format ? "&" : "||";
        },
        handlerMiddleware: function() {},
        watchLOG: function() {
            var e = this;
            e.subscribeLogs(r.MW_CHANGE_PV, function(t) {
                e.handlerMiddleware(t, "pv");
            }), e.subscribeLogs(r.MW_CHANGE_HJLJ, function(t) {
                e.handlerMiddleware(t, r.APLUS);
            });
        },
        run: function() {
            this.watchLOG();
        }
    });
}, function(e, t, n) {
    "use strict";
    var a = n(2);
    t.pushIntoGoldlogQueue = function(e, t) {
        var n = a.getGlobalValue("aplus_queue"), o = a.getGlobalValue("aplus"), r = e.split("."), s = o[r[1]], i = s ? s[r[2]] : null;
        o && 2 === r.length && s ? s.apply(o, t) : 3 === r.length && i ? i.apply(s, t) : n.push({
            action: e,
            arguments: t
        });
    };
}, function(e, t, n) {
    var a = n(2);
    e.exports = function(e, t) {
        if ("string" != typeof e) return null;
        var n = Object.create(null);
        n.id = e, t && t.ts || (n.ts = Date.now());
        var o = typeof t;
        if ("object" === o) for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]);
        var s = a.getGlobalValue("aplus"), i = s.getMetaInfo("globalproperty");
        return i && (n.gp = i), n;
    };
}, function(e, t, n) {
    "use strict";
    var a = n(16);
    e.exports = function() {
        return {
            getLogConfig: function() {
                var e = {}, t = this.options.config.plugins;
                for (var n in t) e[n] = {
                    plugins: t[n],
                    context: {}
                }, a(t[n], function(t) {
                    e[n].context[t.name] = t.config || {};
                });
                return e;
            },
            run: function() {
                this.options.context.logConfig = this.getLogConfig(), this.options.context.logConfig.pageLoadTime = this.options.context.PAGE_LOAD_TIME;
            }
        };
    };
}, function(e, t, n) {
    "use strict";
    var a = n(2), o = n(8), r = n(3), s = n(62), i = "EMPTY_CNA";
    e.exports = function() {
        return {
            _syncEtag: function(e) {
                var t, n = a.getGlobalValue(r.APLUS), u = this, c = function(t) {
                    var o = t && t.data ? t.data.cna : "";
                    o ? (a.setGoldlogVal(g, o), e(o)) : "Y" === n.fetchEtagStatus ? n.aplus_pubsub.subscribe("etag", function(t) {
                        e(t);
                    }) : f();
                }, p = n.getMetaInfo("aplus-rhost-v");
                p && (t = s.getUrl({
                    egUrl: (p.indexOf("//") === -1 ? "//" + p : p) + "/eg.js"
                }), u.options.context.etag && (u.options.context.etag.egUrl = t));
                var l = o.getContext(), g = n.globalConfig.ETAG_STORAGE_KEY, f = function() {
                    t && (n.fetchEtagStatus = "Y", o.request(t, {
                        dataType: "text",
                        requestMethodName: "request"
                    }, function(t) {
                        n.fetchEtagStatus = "N";
                        var o = "";
                        try {
                            var r = t.data || "", s = r.split(";");
                            if (s.length > 1) {
                                var u = s[1], c = u.split("=");
                                o = c[1] || "", o = o.replace(/\"/g, ""), a.setGoldlogVal(g, o), l.setStorage({
                                    key: g,
                                    data: {
                                        cna: o
                                    }
                                }), n.aplus_pubsub.publish("etag", o), n.aplus_pubsub.cachePubs("etag", o);
                            }
                        } catch (e) {
                            console.log(e);
                        }
                        o || (o = i), e(o);
                    }, function(e) {
                        console.log(e);
                    }));
                }, d = a.getGoldlogVal(g);
                d ? e(d) : l.getStorage({
                    key: g,
                    success: function(e) {
                        c(e);
                    },
                    fail: function(e) {
                        c(e);
                    }
                });
            },
            run: function(e, t) {
                var n = this, o = a.getGlobalValue("aplus"), r = o.getMetaInfo("aplus-etag-timeout"), s = 200, i = s;
                try {
                    i = parseInt(r), isNaN(i) && (i = s);
                } catch (e) {}
                if (this._syncEtag(function(e) {
                    n.options.context.etag && (n.options.context.etag.cna = e), i >= 200 && t(e);
                }), !(i < 200)) return i;
            }
        };
    };
}, function(e, t, n) {
    "use strict";
    var a = n(63);
    t.getUrl = function(e) {
        var t = a.getUrl(e && e.egUrl);
        if (0 !== t.indexOf("http")) {
            var n = "https:";
            /(\d+\.){3,}\d+/.test(t) && (n = "http:"), t = n + t;
        }
        return t;
    };
}, function(e, t, n) {
    "use strict";
    var a = n(64), o = n(65), r = n(2);
    e.exports = {
        tryToDecodeURIComponent: function(e, t) {
            var n = t || "";
            if (e) try {
                n = decodeURIComponent(e);
            } catch (e) {}
            return n;
        },
        parseSemicolonContent: function(e, t, n) {
            t = t || {};
            var o, r, s = e.split(";"), i = s.length;
            for (o = 0; o < i; o++) {
                r = s[o].split("=");
                var u = a.trim(r.slice(1).join("="));
                t[a.trim(r[0]) || ""] = n ? u : this.tryToDecodeURIComponent(u);
            }
            return t;
        },
        nodeListToArray: function(e) {
            var t, n;
            try {
                return t = [].slice.call(e);
            } catch (o) {
                t = [], n = e.length;
                for (var a = 0; a < n; a++) t.push(e[a]);
                return t;
            }
        },
        getLsCna: function(e, t) {
            if (o.set && o.test()) {
                var n = "", a = o.get(e);
                if (a) {
                    var r = a.split("_") || [];
                    n = t ? r.length > 1 && t === r[0] ? r[1] : "" : r.length > 1 ? r[1] : "";
                }
                return decodeURIComponent(n);
            }
            return "";
        },
        setLsCna: function(e, t, n) {
            n && o.set && o.test() && o.set(e, t + "_" + encodeURIComponent(n));
        },
        getUrl: function(e) {
            var t = r.getGlobalValue("aplus"), n = e || "//log.mmstat.com/eg.js";
            try {
                var a = t.getMetaInfo("aplus-rhost-v"), o = /[[a-z|\-|\_|0-9\.]+[a-z|\-|\_|0-9](:\d*)?/, s = a.match(o);
                s && s[0] && (n = "//" + s[0] + "/eg.js");
            } catch (e) {}
            return n;
        }
    };
}, function(e, t) {
    "use strict";
    function n(e) {
        return "string" == typeof e ? e.replace(/^\s+|\s+$/g, "") : "";
    }
    t.trim = n;
}, function(e, t) {
    "use strict";
    e.exports = {
        set: function(e, t) {
            try {
                return localStorage.setItem(e, t), !0;
            } catch (e) {
                return !1;
            }
        },
        get: function(e) {
            try {
                return localStorage.getItem(e);
            } catch (e) {
                return "";
            }
        },
        test: function() {
            var e = "grey_test_key";
            try {
                return localStorage.setItem(e, 1), localStorage.removeItem(e), !0;
            } catch (e) {
                return !1;
            }
        },
        remove: function(e) {
            localStorage.removeItem(e);
        }
    };
}, function(e, t, n) {
    "use strict";
    var a = n(2), o = n(3);
    e.exports = function() {
        return {
            getMetaInfo: function() {
                var e = a.getGoldlogVal("_$") || {}, t = e.meta_info;
                return t;
            },
            getAplusWaiting: function() {
                var e = this.getMetaInfo() || {};
                return e["aplus-waiting"];
            },
            run: function(e, t) {
                var n = this.options.config || {}, a = this.getAplusWaiting();
                if (a && n.is_auto) switch (a = this.getAplusWaiting() + "", this.options.context.when_to_sendpv = {
                    aplusWaiting: a
                }, a) {
                  case o._USER_ID:
                  case o._ANONY_ID:
                  case "MAN":
                    return "done";

                  case "1":
                    return this.options.context.when_to_sendpv.isWait = !0, setTimeout(function() {
                        t();
                    }, 6e3), 6e3;

                  default:
                    var r = 1 * a;
                    if (r + "" != "NaN") return this.options.context.when_to_sendpv.isWait = !0, setTimeout(function() {
                        t();
                    }, r), r;
                }
            }
        };
    };
}, function(e, t, n) {
    "use strict";
    var a = n(2), o = n(26), r = n(8), s = n(3);
    e.exports = function() {
        return {
            getMetaInfo: function(e) {
                var t = a.getGoldlogVal("_$") || {};
                return (t.meta_info || {})[e];
            },
            getHostUrl: function() {
                var e = this.getMetaInfo("aplus-rhost-v"), t = r.getLogDomain();
                if (!e || !t) return o.logger({
                    msg: "current request domain invalid, please check your aplus-rhost-v value inside metainfo!"
                }), "";
                var n = [ "//", e, t ];
                return n.join("");
            },
            run: function() {
                this.options.context.where_to_send.method = "POST";
                var e = this.getHostUrl();
                if (!e) return "done";
                if (0 !== e.indexOf("//")) return o.logger({
                    msg: "上报域名无效: " + e
                }), "done";
                var t = s.HTTPS;
                /(\d+\.){3,}\d+/.test(e) && (t = "http:"), e = t + e, this.options.context.where_to_send.url = e;
            }
        };
    };
}, function(e, t, n) {
    "use strict";
    var a = n(2), o = n(3), r = n(26), s = n(8), i = n(69), u = n(71), c = o.SPM_CNT, p = o.SPM_URL, l = o.SPM_PRE;
    e.exports = function() {
        return {
            getCommonParams: function() {
                var e = a.getGlobalValue(o.APLUS), t = this.options.context || {}, n = t.etag || {}, g = t.userdata || {}, f = a.getGoldlogVal("_$") || {}, d = f.spm || {}, h = this.options.config || {}, _ = e.getMetaInfo("platformType") || s.getPlatformType(), v = {
                    _dev_id: e.getMetaInfo("_dev_id"),
                    _anony_id: e.getMetaInfo(o._ANONY_ID),
                    _user_id: e.getMetaInfo(o._USER_ID),
                    _user_nick: e.getMetaInfo("_user_nick"),
                    _session_id: e.getMetaInfo("_session_id"),
                    uaid: e.getMetaInfo("uaid") + "" == "1" ? 1 : 0
                }, m = e._aplus_client || {}, y = e.globalConfig || {}, b = "-";
                try {
                    var S = getCurrentPages()[0];
                    b = S.route || S.is;
                } catch (e) {}
                var P = new Date().getTime() + b, I = m.model + m.networkType + h.title + n.cna, C = (y.isDecodeUrl ? "DC_" : "") + i.getLogId(P, I), A = e.getMetaInfo("appKey") || e.getMetaInfo("appId");
                A || r.logger({
                    msg: "please set appId in aplus metaInfo before sendPV!"
                });
                var T = Object.assign({}, {
                    appKey: A,
                    cache: C,
                    cna: n.cna,
                    etag: n,
                    pre: f.page_referrer || "-",
                    sdk_info: {
                        jsver: y.script_name,
                        lver: y.lver,
                        customSdkId: e.getMetaInfo("customSdkId") || "",
                        platformType: _.toLowerCase()
                    },
                    title: h.title || "",
                    url: b || "-",
                    client: m,
                    timeZone: u.getTimeZone(),
                    gmkey: g.gmkey || "",
                    method: this.options.context.where_to_send.method
                }, v), E = v;
                return d.spm_url && (E[p] = d.spm_url || ""), d.spm_pre && (E[l] = d.spm_pre || ""), 
                d.spm_cnt && (E[c] = d.spm_cnt || ""), E[o.PVID] = e.pvid || "", T.sessionArgs = e.getMetaInfo("aplus-session-args"), 
                T.globalArgs = e.getMetaInfo("aplus-global-args"), T.gokey = E, T;
            },
            getPvParams: function() {
                var e = a.getGlobalValue(o.APLUS), t = this.getCommonParams();
                return this.options.config.is_auto || (t.sdk_info.mansndlog = 1), Object.assign({}, t, {
                    event_code: o.PV_CODE,
                    logtype: "1",
                    logkey: "/vx.gif",
                    event_timestamp: e._$.send_pv_count > 0 ? new Date() : e.logConfig.pageLoadTime
                });
            },
            getHjljParams: function() {
                var e = this.options.context || {}, t = e.userdata || {}, n = {
                    event_code: o.EVENT_ID_MAP[t.gmkey] || t.gmkey,
                    logtype: "2",
                    logkey: t.logkey,
                    event_timestamp: new Date()
                };
                return Object.assign({}, this.getCommonParams(), n);
            },
            run: function() {
                var e = {};
                e = "PV" === this.options.config.recordType ? this.getPvParams() : this.getHjljParams(), 
                this.options.context.what_to_send.logdata = e;
            }
        };
    };
}, function(e, t, n) {
    "use strict";
    function a(e, t, n) {
        return e ? o.hash(encodeURIComponent(e)).substr(0, t) : n;
    }
    var o = n(70), r = function(e) {
        function t(e) {
            var t = "0123456789abcdefhijklmnopqrstuvwxyzABCDEFHIJKLMNOPQRSTUVWXYZ", n = "0123456789abcdefghijkmnopqrstuvwxyzABCDEFGHIJKMNOPQRSTUVWXYZ";
            return 1 == e ? t.substr(Math.floor(60 * Math.random()), 1) : 2 == e ? n.substr(Math.floor(60 * Math.random()), 1) : "0";
        }
        for (var n, a = "", o = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ", r = !1; a.length < e; ) n = o.substr(Math.floor(62 * Math.random()), 1), 
        !r && a.length <= 2 && ("g" == n.toLowerCase() || "l" == n.toLowerCase()) && (0 === a.length && "g" == n.toLowerCase() ? Math.random() < .5 && (n = t(1), 
        r = !0) : 1 == a.length && "l" == n.toLowerCase() && "g" == a.charAt(0).toLowerCase() && (n = t(2), 
        r = !0)), a += n;
        return a;
    };
    t.getLogId = function(e, t) {
        var n = r(8), o = n.substr(0, 4), s = n.substr(0, 6);
        return [ a(e, 4, o), a(t, 4, o), s ].join("");
    };
}, function(e, t) {
    "use strict";
    t.hash = function(e, t) {
        var n, a, o = 1315423911, r = t || o;
        for (n = e.length - 1; n >= 0; n--) a = e.charCodeAt(n), r ^= (r << 5) + a + (r >> 2);
        var s = (2147483647 & r).toString(16);
        return s;
    };
}, function(e, t) {
    t.getTimeZone = function() {
        var e = -new Date().getTimezoneOffset() / 60, t = "+";
        e < 0 && (t = "-");
        var n = Math.abs(parseInt(e)), a = Math.abs(parseInt(e) - e), o = "00";
        return a > 0 && (o = 60 * a), "GMT" + t + (n > 9 ? n : "0" + n) + ":" + o;
    };
}, function(e, t, n) {
    "use strict";
    var a = n(3), o = n(2), r = n(8);
    e.exports = function() {
        return {
            run: function() {
                var e = r.isTB(), t = o.getGlobalValue(a.APLUS), n = this.options.context.what_to_send.logdata || {}, s = getCurrentPages(), i = s[s.length - 1] || {};
                i && !n.title && (n.title = i.route || ""), n.url = (!e && t.globalConfig.isAli ? "https://" : "") + (i.route || i.is || "-");
                var u = "-";
                if (s.length > 1) {
                    var c = s[s.length - 2] || {};
                    u = (!e && t.globalConfig.isAli ? "https://" : "") + (c.route || c.is || "-");
                }
                n.pre = u, n.sdk_info && (n.sdk_info.windmill = "1"), this.options.context.what_to_send.logdata = n;
            }
        };
    };
}, function(e, t, n) {
    "use strict";
    var a = n(32), o = n(18), r = n(2), s = n(3), i = n(8);
    e.exports = function() {
        return {
            getUserdata: function() {
                var e = r.getGlobalValue("aplus"), t = this.options.config || {}, n = {};
                t && !t.is_auto && t.gokey && ("string" == typeof t.gokey ? n = a.param2obj(t.gokey) : "object" == typeof t.gokey && (n = t.gokey));
                var s = function(e) {
                    o(e) ? e.forEach(function(e) {
                        n = Object.assign({}, n, e);
                    }) : n = Object.assign({}, n, e);
                };
                s(e.getMetaInfo("aplus-cpvdata"));
                var u = i.getCurrentPage(), c = u.route || u.is || "page", p = e.getMetaInfo("aplus-page-properties") || {}, l = p[c];
                "object" == typeof l && s(l);
                var g = this.options.context || {}, f = g.userdata || {};
                return s(f), n;
            },
            updatePre: function(e) {
                var t = this.options.config || {}, n = r.getGoldlogVal("_$") || {};
                return t && t.referrer && (n.page_referrer = t.referrer, e.pre = t.referrer), r.setGoldlogVal("_$", n), 
                e;
            },
            updateUrl: function(e) {
                var t = this.options.config || {};
                return t && t.pageUrl && (e.url = t.pageUrl), e;
            },
            updateSpmUrl: function(e) {
                var t = this.options.config || {}, n = t[s.SPM_URL] || t.spmUrl;
                return n && (e.gokey[s.SPM_URL] = n), e;
            },
            run: function() {
                var e = this.options.context.what_to_send.logdata, t = Object.assign({}, this.getUserdata(), e.userdata || {});
                e.gokey = Object.assign({}, e.gokey, t), e = this.updatePre(e), e = this.updateUrl(e), 
                e = this.updateSpmUrl(e), this.options.context.what_to_send.logdata = e, this.options.context.userdata = e.gokey;
            }
        };
    };
}, function(e, t, n) {
    "use strict";
    var a = n(2);
    e.exports = function() {
        return {
            run: function() {
                var e = a.getGoldlogVal("_$") || {}, t = e.send_pv_count || 0;
                e.send_pv_count = ++t, a.setGoldlogVal("_$", e);
            }
        };
    };
}, function(e, t, n) {
    "use strict";
    var a = n(32), o = n(18), r = n(2);
    e.exports = function() {
        return {
            getUserData: function() {
                var e = r.getGlobalValue("aplus"), t = this.options.context || {}, n = t.userdata || {}, s = t.what_to_send.logdata.gokey;
                s = Object.assign({}, s, a.param2obj(n.gokey)), s = Object.assign({}, s, a.param2obj(e.getMetaInfo("aplus-exinfo") || {}));
                var i = e.getMetaInfo("aplus-exdata");
                return o(i) ? i.forEach(function(e) {
                    s = Object.assign({}, s, e);
                }) : s = Object.assign({}, s, i || {}), s;
            },
            run: function() {
                var e = this.options.context.what_to_send.logdata, t = this.getUserData();
                "1010" === e.gmkey && (e.arg1 = t.duration || e.logkey), e.gokey = t, this.options.context.what_to_send.logdata = e;
            }
        };
    };
}, function(e, t, n) {
    "use strict";
    e.exports = function() {
        return {
            run: function() {
                n(77)(this.options.context.logConfig);
            }
        };
    };
}, function(e, t, n) {
    "use strict";
    var a = n(41), o = n(3), r = n(2);
    e.exports = function(e) {
        var t = r.getGlobalValue(o.APLUS);
        if (!t._aplus_api) {
            t._aplus_api = {
                status: o.COMPLETE
            };
            var s = n(78).run.create({
                logConfig: e
            });
            for (var i in s) t[i] = s[i];
            r.setGlobalValue(o.APLUS, t);
            var u = [ o.APLUS + "Ready", o.COMPLETE ];
            a.doPubMsg(u), a.doCachePubs(u);
        }
    };
}, function(e, t, n) {
    "use strict";
    var a = n(37), o = n(9), r = n(8), s = n(18), i = n(3), u = n(41), c = n(7), p = n(2), l = n(79), g = n(40), f = n(82), d = n(26), h = n(10), _ = n(30), v = function(e, t) {
        my && my.call && "function" == typeof t && my.call("handleLoggingAction", {
            type: "behavior",
            subType: e.subType
        }, function(n) {
            var a = {};
            a[e.spmType] = n[e.spmType], t(a);
        });
    }, m = a.extend({
        _send: function(e, t, n, a, o) {
            return e = h.can2https(e), "object" == typeof t && "POST" === n ? r.request(e, {
                method: n,
                data: t,
                dataType: "base64"
            }, a, o) : r.request(e + "?" + t, {
                method: n,
                dataType: "base64"
            }, a, o), e;
        },
        _requestVTConfig: function(e, t, n) {
            if (0 === e.indexOf("//")) {
                var a = i.HTTPS;
                /(\d+\.){3,}\d+/.test(e) && (a = "http:"), e = a + e;
            }
            r.request(e, {
                method: "GET"
            }, t, n);
        },
        _sendPV: function(e, t) {
            var n = p.getGlobalValue(i.APLUS);
            e = e || {}, e.pageName && n._setMetaInfo(i.APLUS + "-pagename", e.pageName);
            var a = new l();
            e.recordType = "PV", e.method || (e.method = "GET");
            var o = n.logConfig.pv;
            return a.run({
                plugins: o.plugins,
                context: c(o.context)
            }, {
                config: e,
                userdata: t || {},
                pubsubType: "pv",
                middlewareMessageKey: "mw_change_pv"
            }), !0;
        },
        _combineRecord: function(e, t, n, a) {
            var o = p.getGlobalValue(i.APLUS), r = "EXP";
            if (!o.globalConfig.isAli || t !== r && "CLK" !== t) console.warn("only support EXP or CLK log to combile record!"); else if (s(n)) {
                a || (a = "POST");
                var u = [], c = "true";
                n.forEach(function(e) {
                    u.push({
                        exargs: "object" == typeof e.exargs ? e.exargs : {},
                        scm: e.scm,
                        spm: e.spm,
                        aplusContentId: e.aplusContentId
                    }), "false" === e._aplus_sendtomy && "true" === c && (c = "false");
                });
                var l = [];
                l.push((t === r ? "expdata=" : "clkdata=") + JSON.stringify(u)), l.push(t === r ? "_is_auto_exp=1" : "_is_auto_clk=1"), 
                l.push("_eventType=custom"), l.push("_method=" + a), l.push("_pkgSize=" + n.length), 
                "false" === c && l.push("_aplus_sendtomy=false"), o.record(e, t, l.join("&"), a);
            } else console.warn("type of gokeys must be ArrayObject!");
        },
        _record: function(e, t, n, a, r) {
            var s = p.getGlobalValue(i.APLUS);
            e += "", e && 0 !== e.indexOf("/") && s.globalConfig.isAli && (e = "/" + e);
            var u = new l(), g = s.logConfig.hjlj;
            return u.run({
                plugins: g.plugins,
                context: c(g.context)
            }, {
                config: {
                    recordType: "COMMON_HJLJ",
                    method: a || "GET"
                },
                userdata: {
                    logkey: e,
                    gmkey: t,
                    gokey: n
                },
                pubsubType: "hjlj",
                middlewareMessageKey: "mw_change_hjlj"
            }, function() {
                o(r) && r();
            }), !0;
        },
        getPageSPM: function() {
            var e = p.getGlobalValue(i.APLUS), t = e._$ || {}, n = t.spm || {}, a = n.data || {};
            return [ a.a, a.b ];
        },
        _setPageSPM: function() {
            var e, t = {}, n = arguments;
            "object" == typeof n[0] ? (t = n[0], e = n[1]) : (t.spmCnt = [ n[0], n[1], "0", "0" ].join("."), 
            e = n[2]);
            var a;
            t.spmCnt || t.spmUrl || !g.getMetaInfo("pageConfig") ? (a = [ "setPageSPM", t ], 
            u.doPubMsg(a), u.doCachePubs(a)) : (a = [ "clearPageSPM" ], u.doPubMsg(a), u.doCachePubs(a));
            var o = "function" == typeof e ? e : function() {};
            o(a);
        },
        _setMetaInfo: function(e, t) {
            return g._setMetaInfo(e, t);
        },
        _updatePageProperties: function(e) {
            if ("object" == typeof e) {
                f() ? my.reportAnalytics("updatePageProperties", e) : "my" === r.getPlatformType() && my.call("reportData", {
                    spmDetail: e,
                    ignoreDefaultPageMonitor: !0
                });
                var t = r.getCurrentPage(), n = t.route || t.is || "page", a = {};
                a[n] = e, g.appendMetaInfo("aplus-page-properties", a);
            }
        },
        _updateNextPageProperties: function(e) {
            if (e || (e = {}), my) {
                var t = {
                    type: "updateNextProp",
                    eventId: -1,
                    eventid: -1,
                    name: "",
                    pageName: "",
                    comName: "",
                    arg1: "",
                    arg2: "",
                    arg3: "",
                    param: e,
                    params: e
                };
                my.callUserTrack ? my.callUserTrack("commitut", t) : my.reportAnalytics && my.reportAnalytics("enter", t);
            }
        },
        _appendMetaInfo: g.appendMetaInfo,
        getMetaInfo: function(e) {
            return g.getMetaInfo(e);
        },
        cloneDeep: c,
        _skipPage: function() {
            my && my.callUserTrack && my.callUserTrack("skipPage");
        },
        _pageAppear: function() {
            my && my.callUserTrack && this.isPageDisAppear && (this.isPageDisAppear = !1, this.isPageAppear = !0, 
            my.callUserTrack("pageAppear"));
        },
        _pageDisappear: function() {
            my && my.callUserTrack && this.isPageAppear && (this.isPageDisAppear = !0, this.isPageAppear = !1, 
            my.callUserTrack("pageDisappear"));
        },
        _updatePageUtparam: function(e) {
            e || (e = {}), my && my.callUserTrack && my.callUserTrack("updatePageUtparam", {
                utParamJson: JSON.stringify(e)
            });
        },
        _updateNextPageUtparam: function(e) {
            e || (e = {}), my && my.callUserTrack && my.callUserTrack("updateNextPageUtparam", {
                utParamJson: JSON.stringify(e)
            });
        },
        _updateSessionProperties: function(e) {
            my && my.call && "object" == typeof e && my.call("handleLoggingAction", {
                type: "behavior",
                subType: "updateSessionProperties",
                extData: e
            });
        },
        _getPageSpmUrl: function(e) {
            v({
                subType: "getPageSpmUrl",
                spmType: "spmUrl"
            }, e);
        },
        _getPageSpmPre: function(e) {
            v({
                subType: "getPageSpmPre",
                spmType: "spmPre"
            }, e);
        },
        _setPageName: function(e, t) {
            if (!e) return void d.logger({
                msg: "setPageName failed:  pageName=" + e
            });
            var n = t || _.getCurrentPagePath(), a = c(g.getMetaInfo("pageConfig") || {});
            a[n] = e, g.appendMetaInfo("pageConfig", a);
        },
        getPageName: function(e) {
            return _.getPageCode(e);
        },
        _getElementSPM: function(e, t) {
            if (e) {
                var n = _.getPageCode() || "";
                if ("string" != typeof e) {
                    var a = e.dataset && e.dataset.trackerParams || "", o = h.jsonLikeStr2JSON(a);
                    return [ n, o.spmC, o.spmD ].join(".");
                }
                var s, i = r.getContext(), u = g.getMetaInfo("aplus-auto-clk") || [], c = g.getMetaInfo("aplus-auto-exp") || [];
                try {
                    var p;
                    for (p = 0; p < u.length; p++) {
                        var l = u[p];
                        if (l.cssSelector === e) {
                            s = [ n, l.spmC, l.spmD ].join(".");
                            break;
                        }
                    }
                    for (p = 0; p < c.length; p++) {
                        var f = c[p];
                        if (f.cssSelector === e) {
                            s = [ n, f.spmC, f.spmD ].join(".");
                            break;
                        }
                    }
                    var d = i.createSelectorQuery().selectAll(e);
                    "function" == typeof d.fields && d.fields({
                        dataset: !0,
                        id: !0
                    }, function(e) {
                        var n = [];
                        if (e && e.length > 0) {
                            for (var a = 1; a <= e.length; a++) n.push(s + "_" + a);
                            t && "function" == typeof t && t(n);
                        }
                    }).exec();
                } catch (e) {
                    console.warn("该平台不支持dom元素查询, err = ", e);
                }
            }
        }
    });
    t.run = m;
}, function(e, t, n) {
    "use strict";
    var a = n(16), o = n(2), r = n(9), s = n(41), i = n(26), u = n(3), c = n(80), p = n(81), l = function() {};
    l.prototype.run = function(e, t, n) {
        var l = new p();
        l.init({
            middleware: [],
            config: t.config,
            plugins: e.plugins
        });
        var g = l.run(), f = r(e.context) ? new e.context() : e.context;
        f.userdata = t.userdata, f.logger = i.logger;
        var d = {
            context: f,
            pubsub: o.getGoldlogVal("aplus_pubsub"),
            pubsubType: t && t.pubsubType
        }, h = new c();
        h.create(d), h.wrap(g, function() {
            d.context.status = u.COMPLETE, t && (t.middlewareMessageKey && s.doPubMsg([ t.middlewareMessageKey, d.context ]), 
            t.messageFnQueue && a(t.messageFnQueue, function(t) {
                t(o.getGlobalValue(u.APLUS), e);
            })), r(n) && n(d.context);
        })();
    }, e.exports = l;
}, function(e, t, n) {
    "use strict";
    function a() {}
    var o = n(9), r = n(51), s = n(26);
    a.prototype.create = function(e) {
        for (var t in e) "undefined" == typeof this[t] && (this[t] = e[t]);
        return this;
    }, a.prototype.calledList = [], a.prototype.setCalledList = function(e) {
        r.indexof(this.calledList, e) === -1 && this.calledList.push(e);
    }, a.prototype.resetCalledList = function() {
        this.calledList = [];
    }, a.prototype.wrap = function(e, t) {
        var n = this, a = this.context || {}, i = a.compose || {}, u = i.maxTimeout || 1e4;
        return function(a) {
            var i, c = e.length, p = 0, l = 0, g = function(f, d) {
                if (p === c) return a = "done", n.resetCalledList(), o(t) && d !== a && t.call(n, a), 
                void clearTimeout(i);
                if (r.indexof(n.calledList, p) === -1) {
                    if (n.setCalledList && n.setCalledList(p), !(e && e[p] && o(e[p][0]))) return;
                    try {
                        a = e[p][0].call(n, a, function() {
                            p++, l = 1, g(p);
                        });
                    } catch (e) {
                        s.logger({
                            msg: e
                        });
                    }
                }
                var h = "number" == typeof a;
                if ("pause" === a || h) {
                    l = 0;
                    var _ = h ? a : u, v = e[p] ? e[p][1] : "";
                    i = setTimeout(function() {
                        0 === l && (s.logger({
                            msg: "jump the middleware about " + v + ", because waiting timeout maxTimeout = " + _
                        }), a = null, p++, g(p));
                    }, _);
                } else "done" === a ? (p = c, g(p, a)) : (p++, g(p));
            };
            return n.calledList && n.calledList.length > 0 && n.resetCalledList(), g(p);
        };
    }, e.exports = a;
}, function(e, t, n) {
    "use strict";
    var a = n(29), o = n(26);
    e.exports = function() {
        return {
            init: function(e) {
                this.opts = e, e && "object" == typeof e.middleware && e.middleware.length > 0 ? this.middleware = e.middleware : this.middleware = [], 
                this.plugins_name = [];
            },
            pubsubInfo: function(e, t) {
                try {
                    var n = e.pubsub;
                    n && n.publish("plugins_change_" + e.pubsubType, t);
                } catch (e) {
                    o.logger({
                        msg: e
                    });
                }
            },
            run: function(e) {
                e || (e = 0);
                var t = this, n = this.middleware, o = this.opts || {}, r = o.plugins;
                if (r && "object" == typeof r && r.length > 0) {
                    var s = r[e];
                    if (this.plugins_name.push(s.name), n.push([ function(e, n) {
                        t.pubsubInfo(this, s);
                        var r = new s.path();
                        return r.init || (r.init = function(e) {
                            this.options = e;
                        }), r.init({
                            context: this.context,
                            config: a(s.config || {}, o.config)
                        }), r.run(e, function(e) {
                            setTimeout(function() {
                                n(s, e);
                            }, 1);
                        });
                    }, s.name ]), e++, r[e]) return this.run(e);
                }
                return n;
            }
        };
    };
}, function(e, t) {
    function n() {
        try {
            var e = navigator ? navigator.userAgent || navigator.swuserAgent : "";
            return /Triver/g.test(e);
        } catch (e) {
            return !1;
        }
    }
    e.exports = n;
}, function(e, t, n) {
    "use strict";
    var a = n(84), o = n(2);
    e.exports = function() {
        return {
            run: function() {
                var e = this.options.context.aplus_config, t = e.globalConfig.APLUS_QUEUE, n = o.getContext(), r = n[t] || [], s = a.getFormatQueue(r, "metaQueue");
                n[t] = s.queue, a.processGoldlogQueue(s.formatQueue, this.options.config);
            }
        };
    };
}, function(e, t, n) {
    function a() {
        var e = u.getGoldlogVal("_$") || {}, t = e.meta_info;
        return t;
    }
    function o() {
        var e = a() || {}, t = e.uaid + "";
        return "1" !== t || e._anony_id ? e._hold || e["aplus-waiting"] : "BLOCK";
    }
    function r(e) {
        var t = o(), n = a() || {}, r = !0, s = e.arguments || [], i = s[0], u = s[1], c = "START";
        if ("_hold" === i && u === c) return c;
        if ("_anony_id" === i && u) return c;
        if (e && /sendPV|record|setPageSPM|setMetaInfo|appendMetaInfo$/.test(e.action)) switch (t) {
          case "BLOCK":
            n[t] || (_.push(e), r = !1);
        }
        return r;
    }
    function s(e) {
        f(d, e), f(h, e), f(_, e);
    }
    function i(e, t) {
        return t && g.openAPIs.indexOf(e) > -1 && (e = "_" + e), e;
    }
    var u = n(2), c = n(51), p = n(9), l = n(26), g = n(3), f = function(e, t) {
        function n() {
            if (e && c.isArray(e) && e.length) {
                for (var n = m(e).queue, a = {}, o = []; a = n.shift(); ) v(a, t, function(e) {
                    o.push(e);
                });
                o.length > 0 && setTimeout(function() {
                    for (;a = o.shift(); ) v(a, t);
                }, 100);
            }
        }
        try {
            n();
        } catch (e) {
            l.logger({
                msg: e
            });
        }
    };
    t.processGoldlogQueue = f;
    var d = [], h = [], _ = [];
    t.subscribeAndProcessQueue = function(e, t) {
        var n = u.getGlobalValue(e);
        n.push({
            action: g.SUBSCRIBE,
            arguments: [ g.SET_META_INFO, function(e, n) {
                e === g._USER_ID && n ? f(d, t) : e === g._ANONY_ID && n ? f(h, t) : "_hold" === e && "START" === n && s(t);
            } ]
        });
    };
    var v = function(e, t, n) {
        var a = !!t.isOpenApi, o = e ? e.action : "", g = e ? e.arguments : "", f = r(e);
        if (f) {
            var d = u.getContext();
            try {
                if (o && g && c.isArray(g)) {
                    var h, _ = o.split("."), v = d, m = d;
                    if (3 === _.length) v = d[_[0]][_[1]] || {}, h = i(_[2], a), m = v[h] ? v[h] : ""; else for (;_.length; ) if (h = i(_.shift(), a), 
                    m = v = v[h], !v) return void (p(n) && n(e));
                    p(m) && m.apply(v, g), "START" === f && s(t);
                }
            } catch (e) {
                l.logger({
                    msg: e
                });
            }
        }
    };
    t.processTask = v;
    var m = function(e, t) {
        for (var n = {
            subscribeMwChangeQueue: [],
            subscribeMetaQueue: [],
            subscribeQueue: [],
            metaQueue: [],
            othersQueue: []
        }, a = [], o = {}; o = e.shift(); ) try {
            var r = o.action, s = o.arguments[0];
            /subscribe/.test(r) ? "setMetaInfo" === s ? n.subscribeMetaQueue.push(o) : s === g.MW_CHANGE_PV || s === g.MW_CHANGE_HJLJ ? n.subscribeMwChangeQueue.push(o) : n.subscribeQueue.push(o) : /MetaInfo/.test(r) ? n.metaQueue.push(o) : n.othersQueue.push(o);
        } catch (e) {
            l.logger({
                msg: e
            }), n.othersQueue.push(o);
        }
        var i;
        return t && n[t] && (i = n[t], n[t] = []), a = n.subscribeMwChangeQueue.concat(n.metaQueue), 
        a = a.concat(n.subscribeQueue), a = a.concat(n.subscribeMetaQueue, n.othersQueue), 
        {
            queue: a,
            formatQueue: i
        };
    };
    t.getFormatQueue = m;
}, function(e, t, n) {
    "use strict";
    var a = n(37), o = n(2), r = n(84), s = a.extend({
        push: function(e) {
            this.length++, r.processTask(e, this.opts);
        }
    });
    e.exports = function() {
        return {
            processAplusQueue: function(e) {
                var t = this.options.config || {}, n = o.getGlobalValue(e);
                r.processGoldlogQueue(n, t), o.setGlobalValue(e, s.create({
                    opts: t,
                    startLength: n.length,
                    length: 0
                }));
            },
            run: function() {
                var e = this.options.context.aplus_config, t = e.globalConfig.APLUS_QUEUE;
                this.processAplusQueue(t), "aplus_queue" === t && this.processAplusQueue("goldlog_queue"), 
                r.subscribeAndProcessQueue(t, this.options.config);
            }
        };
    };
}, function(e, t, n) {
    "use strict";
    function a() {
        function e() {
            var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "", t = s.getCurrentPage(), n = t.route || t.is;
            switch (e) {
              case "onPullDownRefresh":
                b.onPullDownRefresh += 1, v.push({
                    action: "aplus.record",
                    arguments: [ c.logkey || "$$_pull_down_refresh", "CLK", {
                        event: e,
                        pagename: f.getPageCode() || n,
                        count: b.onPullDownRefresh
                    } ]
                });
                break;

              case "onReachBottom":
                b.onReachBottom += 1, v.push({
                    action: "aplus.record",
                    arguments: [ a.logkey || "$$_reach_bottom", "CLK", {
                        event: e,
                        pagename: f.getPageCode() || n,
                        count: b.onReachBottom
                    } ]
                });
                break;

              case "onShareAppMessage":
                b.onShareAppMessage += 1, v.push({
                    action: "aplus.record",
                    arguments: [ d.logkey || "$$_share", "CLK", {
                        event: e,
                        pagename: f.getPageCode() || n,
                        count: b.onShareAppMessage,
                        share_type: 1
                    } ]
                });
                break;

              case "onShareTimeline":
                b.onShareTimeline += 1, v.push({
                    action: "aplus.record",
                    arguments: [ d.logkey || "$$_share", "CLK", {
                        event: e,
                        pagename: f.getPageCode() || n,
                        count: b.onShareTimeline,
                        share_type: 0
                    } ]
                });
                break;

              case "onPageShow":
                if (_.globalConfig.isAli) {
                    var o = _.getMetaInfo("pageConfig"), p = t.route || t.is;
                    o && o[p] ? u(o[p].spm) ? v.push({
                        action: "aplus.setPageSPM",
                        arguments: o[p].spm
                    }) : i.logger({
                        level: "error",
                        msg: p + '在metaInfo.pageConfig中配置的spm格式不对，正确格式为：["spma","spmb"]'
                    }) : i.logger({
                        level: "error",
                        msg: "未匹配该页面(" + p + ")的spm，请检查metaInfo.pageConfig"
                    });
                }
                t.route && !m && (y = {
                    ts: Date.now(),
                    path: t.route,
                    page_name: t.route
                }, m = !0);
                break;

              case "onPageHide":
                if (m) {
                    var l = Date.now() - y.ts;
                    if (_.getMetaInfo("aplus-vt-cfg-url") || f.getVTRealtimeCode()) {
                        var g = (f.getPageName() || {}).extraParams, h = Object.assign({}, g, {
                            duration: l,
                            path: y.path,
                            page_name: f.getPageCode(),
                            page_start: y.ts,
                            isMini: !0,
                            _page_auto_id: r.PAGE_END,
                            _page_auto_pv: !0
                        });
                        _.sendPV({
                            is_auto: !0
                        }, h);
                    } else _.sendPV({
                        is_auto: !0
                    }, {
                        duration: l,
                        path: y.path,
                        page_name: f.getPageCode() || y.page_name,
                        page_start: y.ts,
                        isMini: !0,
                        _page_auto_id: r.PAGE_END,
                        _page_auto_pv: !0
                    });
                    y = null, m = !1;
                }
            }
        }
        function t() {
            a = _.getMetaInfo("rb_config"), c = _.getMetaInfo("pdr_config"), d = _.getMetaInfo("share_config");
        }
        function n(e, t) {
            if (e && t) try {
                var n = _.getMetaInfo("aplus-api-host"), a = /[[a-z|\-|\_|0-9\.]+[a-z|\-|\_|0-9](:\d*)?/, o = n.match(a);
                if (o && o[0]) {
                    var u = r.HTTPS;
                    /(\d+\.){3,}\d+/.test(o[0]) && (u = "http:");
                    var c = u + "//" + n + "/vt/loadTransferConfig?code=" + e + "&appInfoId=" + t;
                    s.request(c, {}, function(e) {
                        try {
                            var t = e.data && e.data.data && e.data.data.config || "", n = e.data && e.data.data && e.data.data.debugId || "";
                            n && _.appendMetaInfo("aplus-global-args", {
                                debugId: n
                            });
                            var a = new Date().getTime();
                            _._minicfg_load = new Date().getTime() - a, t && (_._aplus_vt_cfg = JSON.parse(t) || {}, 
                            g.vt2autoEvent());
                        } catch (e) {
                            i.logger({
                                level: "error",
                                msg: "拉取实时可视化埋点验证失败, 错误信息：" + e
                            });
                        }
                    });
                }
            } catch (e) {}
        }
        var a, c, d, h = o.getContext(), _ = o.getGlobalValue(r.APLUS), v = o.getGlobalValue(r.APLUS_QUEUE), m = !1, y = null, b = {
            onPullDownRefresh: 0,
            onShareTimeline: 0,
            onReachBottom: 0,
            onShareAppMessage: 0,
            onClick: 0
        };
        v.push({
            action: r.SUBSCRIBE,
            arguments: [ "aplusReady", function(e) {
                "complete" === e && t();
            } ]
        }), _.aplus_pubsub.subscribe("onLoad", function(e) {
            if ("ready" === e.status) try {
                var t = f.getVTRealtimeCode();
                if (t) {
                    var a = _.getMetaInfo("appInfoId");
                    n(t, a);
                } else !!_.getMetaInfo("aplus-vt-cfg-url") && g.vt2autoEvent();
            } catch (e) {
                i.logger({
                    level: "error",
                    msg: "拉取实时可视化埋点验证信息失败， 错误原因：" + e
                });
            }
        }), _.aplus_pubsub.subscribe("onShow", function(t) {
            if ("ready" === t.status) {
                var n = "MAN" !== h.aplus.getMetaInfo("aplus-waiting");
                n && e("onPageShow");
            }
        }), _.aplus_pubsub.subscribe("onHide", function(t) {
            if ("ready" === t.status) {
                var n = "MAN" !== h.aplus.getMetaInfo("aplus-waiting");
                n && e("onPageHide");
            }
        }), _.aplus_pubsub.subscribe("onPullDownRefresh", function(t) {
            "ready" === t.status && e("onPullDownRefresh");
        }), _.aplus_pubsub.subscribe("onReachBottom", function(t) {
            "ready" === t.status && e("onReachBottom");
        }), _.aplus_pubsub.subscribe("onShareAppMessage", function(t) {
            "ready" === t.status && e("onShareAppMessage");
        }), _.aplus_pubsub.subscribe("onShareTimeline", function(t) {
            "ready" === t.status && e("onShareTimeline");
        }), _.getMetaInfo("aplus-vt-cfg-url") && p.pushIntoGoldlogQueue(r.SUBSCRIBE, [ l, function(e) {
            var t = e.pageConfig;
            t && t.enabled && (_._aplus_vt_cfg = t);
        } ]);
    }
    var o = n(2), r = n(3), s = n(8), i = n(26), u = n(18), c = n(87), p = n(58), l = "MiniVtConfigFormat", g = n(90), f = n(30);
    e.exports = function() {
        return {
            run: function() {
                var e = o.getGlobalValue("aplus");
                if (a(), !e._aplus_aleady_load_minivt) {
                    e._aplus_aleady_load_minivt = 1;
                    var t = c.create();
                    t.run();
                }
            }
        };
    };
}, function(e, t, n) {
    "use strict";
    var a = n(37), o = n(58), r = n(88), s = n(16), i = n(28), u = n(89), c = n(3), p = n(2), l = "MiniVtConfigBack", g = "MiniVtConfigFormat", f = c.PUBLISH;
    e.exports = a.extend(i.assign(u, {
        pathname: "",
        pageConfig: {},
        originSpm: {
            spmA: "",
            spmB: ""
        },
        updateCfgLs: function() {
            var e = this;
            setTimeout(function() {
                e.fetchFromCdn();
            }, 1e3);
        },
        fetchFromCdn: function() {
            var e = this, t = p.getGlobalValue("aplus"), n = t.getMetaInfo("aplus-vt-cfg-url");
            if (n) {
                var a = new Date().getTime();
                t.requestVTConfig(n, function(n) {
                    var r = n.data;
                    if (t._minicfg_load = new Date().getTime() - a, r) try {
                        t._aplus_vt_cfg = "object" == typeof r ? r : JSON.parse(r), t._aplus_vt_cfg.points && s(t._aplus_vt_cfg.points, function(e) {
                            e.selector = decodeURIComponent(e.selector);
                        }), e.setConfigIntoLs(t._aplus_vt_cfg);
                    } catch (e) {
                        t._aplus_vt_cfg = {
                            enabled: !1
                        };
                    }
                    o.pushIntoGoldlogQueue(f, [ l, {
                        pageConfig: t._aplus_vt_cfg,
                        enable: 0
                    } ]);
                }, function(e) {
                    t._aplus_vt_cfg && t._aplus_vt_cfg.enabled && o.pushIntoGoldlogQueue(f, [ l, {
                        pageConfig: t._aplus_vt_cfg,
                        enable: 0
                    } ]), r.catchException("getTrackerCfg", e, {
                        msg: n
                    });
                }, {
                    timeout: 5e3
                });
            }
        },
        getMiniVtData: function(e, t, n) {
            var a = p.getGlobalValue("aplus");
            if (a._minicfg_load = 0, e) {
                var r = this.fetchFromLS(e);
                if ("string" == typeof r) try {
                    r = JSON.parse(r);
                } catch (e) {
                    r = {};
                }
                r && r.enabled && (a._aplus_vt_cfg = r), n ? this.fetchFromCdn(e, t) : o.pushIntoGoldlogQueue(f, [ l, {
                    pageConfig: r,
                    enable: 0
                } ]);
            }
        },
        syncMiniVtData: function() {
            var e = this.getVtConfigPath();
            this.getMiniVtData(e, "", !0);
        },
        init: function() {
            var e = this, t = c.SUBSCRIBE;
            o.pushIntoGoldlogQueue(t, [ l, function(t) {
                t.enable || (e.pageConfig = t.pageConfig), o.pushIntoGoldlogQueue(f, [ g, {
                    pageConfig: e.pageConfig,
                    originSpm: e.originSpm
                } ]), !t.enable && e.setConfigIntoLs(e.pageConfig);
            } ]), e.syncMiniVtData();
        },
        run: function() {
            return this.init(), this;
        }
    }));
}, function(e, t, n) {
    "use strict";
    var a = n(58);
    t.catchException = function(e, t) {
        var n = e;
        "object" == typeof t && t.message && (n = n + "_" + t.message), a.pushIntoGoldlogQueue("aplus._aplus_cplugin_m.do_tracker_jserror", [ {
            message: n,
            error: JSON.stringify(t),
            filename: e
        } ]);
    };
}, function(e, t, n) {
    "use strict";
    var a = n(2), o = n(8);
    e.exports = {
        lsMinivtConfigKey: "APLUS_MINI_CONFIG",
        getMiniVtTplCdnPath: function() {
            var e = a.getGlobalValue("aplus"), t = e.getMetaInfo("aplus-track-config-id"), n = t && t.turnon, o = t && t.value;
            return "1" === n && o ? o : "";
        },
        getVtConfigPath: function() {
            var e, t = a.getGlobalValue("aplus"), n = this.getMiniVtTplCdnPath(), o = [], r = t.getMetaInfo("appkey") || t.getMetaInfo("appId") || t.getMetaInfo("appKey");
            return r && (e = r), e && (o = e.split(".")), 2 === o.length ? this.originSpm = {
                spmA: o[0],
                spmB: o[1]
            } : 1 === o.length && (this.originSpm.spmA = o[0]), n ? n : 2 === o.length ? o.join("_") : 1 === o.length ? o[0] : void 0;
        },
        fetchFromLS: function(e) {
            this.cdnpath || (this.cdnpath = e || this.getMiniVtTplCdnPath());
            var t = o.getContext();
            return decodeURIComponent(t.getStorageSync(this.lsMinivtConfigKey + "-" + e)) || {};
        },
        setConfigIntoLs: function(e) {
            this.cdnpath || (this.cdnpath = this.getVtConfigPath());
            var t = o.getContext();
            t.setStorageSync(this.lsMinivtConfigKey + "-" + this.cdnpath, encodeURIComponent(JSON.stringify(e)));
        }
    };
}, function(e, t, n) {
    "use strict";
    var a = n(8), o = n(2), r = n(16), s = o.getGlobalValue("aplus"), i = n(30);
    t.getCurrentPageVTCfg = function() {
        var e = s._aplus_vt_cfg;
        if (e) for (var t = i.getCurrentPagePath(), n = 0; n < e.pages.length; n++) {
            var a = e.pages[n];
            if (a.matchUrl === t) return a;
        }
    }, t.vt2autoEvent = function() {
        var e = s._aplus_vt_cfg;
        if (e) {
            var t = a.getCurrentPage(), n = t.route || t.is;
            r(e.pages, function(t) {
                if (s.setPageName({
                    pageName: t.spmB,
                    extraParams: t.extraParams
                }, t.matchUrl), t.matchUrl === n) {
                    var a = [], o = [];
                    r(e.points, function(e) {
                        t.spmB === e.spmB && ("exposure" === e.trackerType ? a.push({
                            cssSelector: e.selector,
                            logkey: e.logkey,
                            props: e.selectorType,
                            spmC: e.spmC,
                            spmD: e.spmD,
                            customArgs: e.customArgs,
                            _vt: t.template || t.stdId ? 2 : 1
                        }) : o.push({
                            cssSelector: e.selector,
                            logkey: e.logkey,
                            props: e.selectorType,
                            spmC: e.spmC,
                            spmD: e.spmD,
                            customArgs: e.customArgs,
                            _vt: t.template || t.stdId ? 2 : 1
                        }));
                    }), a.length > 0 && s.appendMetaInfo("aplus-auto-exp", a), o.length > 0 && s.appendMetaInfo("aplus-auto-clk", o);
                }
            });
        }
    };
}, function(e, t, n) {
    "use strict";
    e.exports = function(e, t) {
        var a = n(2), o = n(41), r = n(26), s = n(16), i = n(8), u = n(92);
        i.initIsTB(), "object" == typeof e && (e.siteId && (t.globalConfig.siteId = e.siteId), 
        t.metaInfo = Object.assign({}, t.metaInfo, e.metaInfo));
        var c = "running", p = "complete", l = [ "aplusReady", c ];
        return o.doPubMsg(l), u.run({
            plugins: t.plugins,
            context: function() {
                var e = {
                    PAGE_LOAD_TIME: new Date()
                }, n = [];
                return s(t.plugins, function(t) {
                    e[t.name] = t.config, "aplus_log_inject" === t.name && t.config && t.config.plugins && (n = t.config.plugins.pv, 
                    s(n, function(t) {
                        e[t.name] = t.config;
                    }));
                }), Object.assign({}, e, {
                    aplus_config: t
                });
            }
        }, function() {
            r.logger({
                msg: "APLUS INIT SUCCESS"
            }), l[1] = p, o.doPubMsg(l);
        }), a.getContext();
    };
}, function(e, t, n) {
    "use strict";
    var a = n(79), o = n(9), r = n(41);
    t.run = function(e, t) {
        var n = new a();
        n.run({
            plugins: e.plugins,
            context: e.context
        }, {
            config: {},
            userdata: {},
            pubsubType: "aplusinit",
            messageFnQueue: [],
            middlewareMessageKey: "mw_change_aplusinit"
        }, function(e) {
            var n = [ "aplusInitContext", e ];
            r.doPubMsg(n), r.doCachePubs(n), o(t) && t(e);
        });
    };
} ]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,