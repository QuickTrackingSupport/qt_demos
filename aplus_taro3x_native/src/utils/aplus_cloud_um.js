/*! 2021-12-20 14:20:33 */
!function(t) {
    function e(a) {
        if (n[a]) return n[a].exports;
        var o = n[a] = {
            exports: {},
            id: a,
            loaded: !1
        };
        return t[a].call(o.exports, o, o.exports, e), o.loaded = !0, o.exports;
    }
    var n = {};
    return e.m = t, e.c = n, e.p = "", e(0);
}([ function(t, e, n) {
    t.exports = n(1);
}, function(t, e, n) {
    "use strict";
    n(2).initGlobal(window), function() {
        var t = n(4);
        n(94)(t);
    }();
}, function(t, e, n) {
    "use strict";
    var a, o = n(3), r = o.APLUS, i = o.APLUS_QUEUE, s = o.GOLDLOG, u = o.GOLDLOG_QUEUE, c = !1;
    try {
        a = window, c = !0;
    } catch (t) {
        a = {};
    }
    e.getContext = function() {
        return a;
    }, e.initGlobal = function(t) {
        a = t ? t : {
            v: 1,
            aplus: {},
            aplus_queue: []
        };
        var e, n;
        if (c) try {
            e = a.aplus || (a.aplus = {});
            var o = a.goldlog_queue || (a.goldlog_queue = []);
            n = a.aplus_queue || (a.aplus_queue = []), n = o.concat(n);
        } catch (t) {} else e = a.aplus, n = a.aplus_queue;
        return a.aplus = a.goldlog = e, a.aplus_queue = a.goldlog_queue = n, a;
    };
    var l = function(t) {
        if (t === r || t === s) {
            var e = a[r] || a[s];
            return e || (e = a[r] = a[s] = {}), e;
        }
        var n = u, o = i;
        if (t === o || t === n) {
            var c = a[o] || a[n];
            return c || (c = a[o] = a[n] = []), c;
        }
    };
    e.getGlobalValue = l, e.setGlobalValue = function(t, e) {
        a[t] = e;
    };
    var p = function(t) {
        var e;
        try {
            var n = l(r);
            e = n[t];
        } catch (t) {
            e = "";
        } finally {
            return e;
        }
    };
    e.getGoldlogVal = p;
    var g = function(t, e) {
        var n = !1;
        try {
            var a = l(r);
            t && (a[t] = e, n = !0);
        } catch (t) {
            n = !1;
        } finally {
            return n;
        }
    };
    e.setGoldlogVal = g, e.getClientInfo = function() {
        return p("_aplus_client") || {};
    };
}, function(t, e) {
    var n = "aplus", a = "goldlog", o = n + "_queue", r = a + "_queue", i = "mw_change", s = "MetaInfo", u = "append" + s, c = "set" + s, l = "http", p = "_pubsub", g = "other", f = "2101", d = "2201", _ = "2202", h = "19999", m = "1023", v = "1010", y = 3e4, b = 18e5, E = "ekvs", I = 1e4, P = 1, w = 3e3, S = "$$_page_start", x = "$$_page_end", T = "$$_app_start", A = "$$_app_end", C = "aplus_user_profile", M = "imprint", k = "aplus-idtype", O = "aplus-jsbridge-only", N = "aplus-page-config", R = "aplus-skip-apv-rules";
    t.exports = {
        PAGE_ENTER: "PAGE_ENTER",
        CURRENT_PAGE_CONFIG: "CURRENT_PAGE_CONFIG",
        _ANONY_ID: "_anony_id",
        _USER_ID: "_user_id",
        DEFAULT_CODE: g,
        OTHER: h,
        EVENT_MAP: {
            "2101": "click",
            "2201": "exposure",
            "2202": "exposure",
            "19999": g,
            "1023": "app_show",
            "1010": "app_hide_or_unload"
        },
        EVENT_ID_MAP: {
            EXP: d,
            IMPEXP: _,
            CLK: f,
            OTHER: h,
            SHOW: m,
            H_OR_U: v
        },
        APLUS: n,
        GOLDLOG: a,
        UNSUBSCRIBE: n + "." + n + p + ".unsubscribe",
        SUBSCRIBE: n + "." + n + p + ".subscribe",
        PUBLISH: n + "." + n + p + ".publish",
        CACHE_PUBS: n + "." + n + p + ".cachePubs",
        APLUS_UNIVERSAL: n + "_universal",
        APLUS_QUEUE: o,
        GOLDLOG_QUEUE: r,
        COMPLETE: "complete",
        PV_CODE: "2001",
        EXP_CODE: d,
        CLK_CODE: f,
        OTHER_CODE: h,
        CLK: "CLK",
        EXP: "EXP",
        SPM_CNT: "spm-cnt",
        SPM_URL: "spm-url",
        SPM_PRE: "spm-pre",
        MW_CHANGE_PV: i + "_pv",
        MW_CHANGE_HJLJ: i + "_hjlj",
        HTTP: l + ":",
        HTTPS: "https:",
        APPEND_META_INFO: u,
        SET_META_INFO: c,
        APLUS_APPEND_META_INFO: n + "." + u,
        APLUS_SET_META_INFO: n + "." + c,
        PVID: "pvid",
        APLUS_LOG_PIPE: "aplus-log-pipe",
        openAPIs: [ "send", "enter", "sendPV", "record", "combineRecord", "recordUdata", "requestVTConfig", "setPageSPM", "setMetaInfo", "appendMetaInfo", "updatePageProperties", "updateNextPageProperties", "updatePageUtparam", "updateNextPageUtparam", "pageAppear", "pageDisappear", "skipPage", "updateSessionProperties", "getPageSpmUrl", "getPageSpmPre", "setPageName", "getElementSPM" ],
        SESSION_INTERVAL: y,
        SESSION_PAUSE_TIME: "session_pause_time",
        IMPRINT: "imprint",
        CURRENT_SESSION: "current_session",
        MAX_EVENTID_LENGTH: 128,
        MAX_PROPERTY_KEY_LENGTH: 256,
        MAX_PROPERTY_KEYS_COUNT: 100,
        REQUESTS: "requests",
        SHARES: "shares",
        APLUS_SSRC: "_aplus_ssrc",
        EKVS: E,
        EVENT_MAX_COUNT: I,
        MEMORY_MAX_COUNT: P,
        EVENT_SEND_DEFAULT_INTERVAL: w,
        PAGE_START: S,
        PAGE_END: x,
        APP_START: T,
        APP_END: A,
        USER_PROFILE_KEY: C,
        SHARE_CACHE_INTERVAL: b,
        IMPRINT: M,
        ID_TYPE: k,
        JSBRIDGE_ONLY: O,
        PAGE_CONFIG: N,
        APLUS_SKIP_APV_RULES: R
    };
}, function(t, e, n) {
    t.exports = {
        metaInfo: {
            "aplus-ifr-pv": "1",
            "aplus-rhost-v": "",
            "aplus-rhost-g": "",
            "aplus-channel": "",
            appId: "",
            sdkId: "aplus_cloud_um",
            "aplus-cpvdata": {},
            "aplus-exdata": {},
            "aplus-globaldata": {},
            "aplus-mmstat-timeout": "10000",
            "aplus-etag-timeout": "1500",
            "aplus-toUT": ""
        },
        globalConfig: {
            isDecodeUrl: !0,
            isAli: !1,
            isUM: !0,
            APLUS_QUEUE: "aplus_queue",
            ETAG_STORAGE_KEY: "__ETAG__CNA__ID__",
            script_name: "aplus.js",
            lver: "1.7.10",
            NAME_STORAGE_KEYS: {
                REFERRER: "wm_referrer",
                REFERRER_PV_ID: "refer_pv_id",
                LOST_PV_PAGE_DURATION: "lost_pv_page_duration",
                LOST_PV_PAGE_SPMAB: "lost_pv_page_spmab",
                LOST_PV_PAGE: "lost_pv_page",
                LOST_PV_PAGE_MSG: "lost_pv_page_msg"
            }
        },
        plugins: [ {
            name: "aplus_track_debug",
            path: n(5)
        }, {
            name: "aplus_body_ready",
            path: n(6)
        }, {
            name: "pubsub",
            path: n(7)
        }, {
            name: "aplus_client",
            path: n(12)
        }, {
            name: "aplus_meta_inject",
            path: n(14)
        }, {
            name: "name_storage",
            path: n(31)
        }, {
            name: "aplus_web_http_um",
            path: n(35)
        }, {
            name: "aplus_log_inject",
            path: n(51),
            deps: [ "aplus_meta_inject" ],
            config: {
                plugins: {
                    pv: [ {
                        name: "etag",
                        path: n(52)
                    }, {
                        name: "when_to_sendpv",
                        path: n(59),
                        config: {
                            aplusWaiting: ""
                        }
                    }, {
                        name: "where_to_send",
                        path: n(60)
                    }, {
                        name: "what_to_send",
                        path: n(62),
                        config: {
                            pvdataToUt: {}
                        }
                    }, {
                        name: "what_to_sendpv_userdata",
                        path: n(66),
                        deps: [ "what_to_send" ]
                    }, {
                        name: "what_to_sendpv_userdata_web",
                        path: n(68),
                        deps: [ "what_to_send", "what_to_sendpv_userdata" ]
                    }, {
                        name: "what_to_sendpv_ut2",
                        path: n(71),
                        deps: [ "what_to_send" ]
                    }, {
                        name: "what_to_sendpv_um2native",
                        path: n(73),
                        deps: [ "what_to_send" ]
                    }, {
                        name: "can_to_sendpv",
                        path: n(74),
                        config: {
                            flag: "NO"
                        }
                    }, {
                        name: "after_pv",
                        path: n(75)
                    } ],
                    hjlj: [ {
                        name: "etag",
                        path: n(52)
                    }, {
                        name: "where_to_send",
                        path: n(60),
                        deps: []
                    }, {
                        name: "what_to_send",
                        path: n(62),
                        deps: []
                    }, {
                        name: "what_to_hjlj_userdata",
                        path: n(77),
                        deps: [ "what_to_send" ]
                    }, {
                        name: "what_to_hjlj_userdata_web",
                        path: n(78),
                        deps: [ "what_to_send", "what_to_hjlj_userdata" ]
                    }, {
                        name: "what_to_hjlj_ut2",
                        path: n(79),
                        deps: [ "what_to_send" ]
                    }, {
                        name: "what_to_hjlj_um2native",
                        path: n(80),
                        deps: [ "what_to_send" ]
                    } ]
                }
            }
        }, {
            name: "aplus_api",
            path: n(81)
        }, {
            name: "meta_queue",
            path: n(89)
        }, {
            name: "etag",
            path: n(52)
        }, {
            name: "etag_web_sync",
            path: n(91)
        }, {
            name: "aplus_queue",
            path: n(92)
        }, {
            name: "hot_loader",
            path: n(93),
            config: {
                urlRules: [ {
                    rule: "aplus_webvt_messager",
                    cdnPath: [ "https://d.alicdn.com/alilog/mlog/aplus_webvt_messager.js" ]
                } ]
            }
        } ]
    };
}, function(t, e) {
    "use strict";
    t.exports = function() {
        return {
            run: function() {
                var t = document, e = window.aplus || (window.aplus = {});
                if (!e._aplus_cplugin_track_deb) {
                    e._aplus_cplugin_track_deb = {
                        status: "init"
                    };
                    var n = window, a = function() {
                        try {
                            var e = n.localStorage, a = "aplus_track_debug_id", o = new RegExp("[?|&]" + a + "=(\\w*)"), r = location.href.match(o);
                            if (r && r.length > 0) e.setItem(a, r[1]); else {
                                var i = t.referrer || "", s = i.match(o);
                                if (s && s.length > 0) e.setItem(a, s[1]); else {
                                    var u = n.name || "", c = u.match(o);
                                    c && c.length > 0 && e.setItem(a, c[1]);
                                }
                            }
                            var l = e.getItem(a) || "";
                            if (!(l && l.length > 50)) return !1;
                            var p, g = l.split("_");
                            if (g && g.length > 0) {
                                p = g[g.length - 1].replace(/log/, "");
                                var f = new Date(), d = f.getTime(), _ = new Date(), h = _.getTime();
                                f.setFullYear(parseInt(p.substr(0, 4))), f.setMonth(parseInt(p.substr(4, 2) - 1)), 
                                f.setDate(parseInt(p.substr(6, 2))), f.setHours(parseInt(p.substr(8, 2))), f.setMinutes(parseInt(p.substr(10, 2))), 
                                f.setSeconds(parseInt(p.substr(12, 2))), f.setMilliseconds(0), d = f.getTime(), 
                                h = _.getTime();
                                var m = h - d;
                                return m <= 36e5 && (l || r[1]);
                            }
                        } catch (t) {
                            return !1;
                        }
                    }, o = a();
                    if (o) {
                        e._aplus_cplugin_track_deb.status = "start";
                        var r = {
                            aplus_track_debug_id: o
                        }, i = window.aplus_queue || (window.aplus_queue = []);
                        i.push({
                            action: "aplus.appendMetaInfo",
                            arguments: [ "aplus-exdata", r ]
                        }), i.push({
                            action: "aplus.appendMetaInfo",
                            arguments: [ "aplus-cpvdata", r ]
                        }), e._aplus_cplugin_track_deb.status = "complete";
                    }
                }
            }
        };
    };
}, function(t, e) {
    "use strict";
    t.exports = function() {
        return {
            run: function(t, e) {
                var n = setInterval(function() {
                    document.getElementsByTagName("body").length && (clearInterval(n), n = null, e());
                }, 50);
                return setTimeout(function() {
                    n && clearInterval(n);
                }, 1e3), 1e3;
            }
        };
    };
}, function(t, e, n) {
    var a = n(8), o = n(2);
    t.exports = function() {
        return {
            run: function() {
                var t = o.getGlobalValue("aplus");
                t.aplus_pubsub || (t.aplus_pubsub = a.create());
            }
        };
    };
}, function(t, e, n) {
    var a = n(9);
    t.exports = a.extend({
        subscribeOnce: function(t, e) {
            this.callable(e);
            var n, a = this;
            return this.subscribe.call(this, t, n = function() {
                a.unsubscribe.call(a, t, n);
                var o = Array.prototype.slice.call(arguments);
                e.apply(a, o);
            }), this;
        }
    });
}, function(t, e, n) {
    "use strict";
    var a = n(10), o = n(11), r = function(t) {
        for (var e = t.length, n = new Array(e - 1), a = 1; a < e; a++) n[a - 1] = t[a];
        return n;
    }, i = o.extend({
        callable: function(t) {
            if (!a(t)) throw new TypeError(t + " is not a function");
            return t;
        },
        create: function(t) {
            var e = new this();
            for (var n in t) e[n] = t[n];
            return e.handlers = [], e.pubs = {}, e;
        },
        setHandlers: function(t) {
            this.handlers = t;
        },
        subscribe: function(t, e) {
            this.callable(e);
            var n = this, a = n.pubs || {}, o = a[t] || [];
            if (o) for (var r = 0; r < o.length; r++) {
                var i = o[r]();
                e.apply(n, i);
            }
            var s = n.handlers || [];
            return t in s || (s[t] = []), s[t].push(e), n.setHandlers(s), n;
        },
        unsubscribe: function(t, e) {
            this.callable(e);
            try {
                var n = this.handlers[t];
                if (!n) return this;
                if ("object" == typeof n && n.length > 0) {
                    for (var a = 0; a < n.length; a++) {
                        var o = e.toString(), r = n[a].toString();
                        o === r && n.splice(a, 1);
                    }
                    this.handlers[t] = n;
                } else delete this.handlers[t];
            } catch (t) {}
            return this;
        },
        publish: function(t) {
            var e = r(arguments), n = this.handlers || [], o = n[t] ? n[t].length : 0;
            if (o > 0) for (var i = 0; i < o; i++) {
                var s = n[t][i];
                a(s) && s.apply(this, e);
            }
            return this;
        },
        cachePubs: function(t) {
            var e = this.pubs || {}, n = r(arguments);
            e[t] || (e[t] = []), e[t].push(function() {
                return n;
            });
        }
    });
    t.exports = i;
}, function(t, e) {
    "use strict";
    t.exports = function(t) {
        return "function" == typeof t;
    };
}, function(t, e, n) {
    "use strict";
    function a() {}
    var o = n(10);
    a.prototype.extend = function() {}, a.prototype.create = function() {}, a.extend = function(t) {
        return this.prototype.extend.call(this, t);
    }, a.prototype.create = function(t) {
        var e = new this();
        for (var n in t) e[n] = t[n];
        return e;
    }, a.prototype.extend = function(t) {
        var e = function() {};
        try {
            o(Object.create) || (Object.create = function(t) {
                function e() {}
                return e.prototype = t, new e();
            }), e.prototype = Object.create(this.prototype);
            for (var n in t) e.prototype[n] = t[n];
            e.prototype.constructor = e, e.extend = e.prototype.extend, e.create = e.prototype.create;
        } catch (t) {
            console && console.log(t);
        } finally {
            return e;
        }
    }, t.exports = a;
}, function(t, e, n) {
    "use strict";
    t.exports = function() {
        return {
            run: function() {
                var t = window.aplus || (window.aplus = {});
                t._aplus_client = n(13)();
            }
        };
    };
}, function(t, e) {
    "use strict";
    function n(t) {
        for (var e = [ [ "Windows NT 5.1", "winXP" ], [ "Windows NT 6.1", "win7" ], [ "Windows NT 6.0", "winVista" ], [ "Windows NT 6.2", "win8" ], [ "Windows NT 6.3", "win8.1" ], [ "Windows NT 10.0", "win10" ], [ "Ubuntu", "ubuntu" ], [ "Linux", "linux" ], [ "Windows NT 5.2", "win2003" ], [ "Windows NT 5.0", "win2000" ], [ "Windows", "winOther" ], [ "rhino", "rhino" ] ], n = 0, a = e.length; n < a; ++n) {
            var o = e[n][0];
            if (t.indexOf(o) !== -1) {
                var r = o.split(" ")[0];
                return {
                    device_model: r,
                    os: r,
                    os_version: e[n][1]
                };
            }
        }
        var i = "other";
        return {
            device_model: i,
            os: i,
            os_version: i
        };
    }
    function a(t, e) {
        var n = t.substring(t.indexOf("(") + 1, t.indexOf(")")), a = {
            device_model: e
        }, o = e.toLowerCase();
        switch (o) {
          case "ipad":
          case "iphone":
          case "ipod":
          case "macintosh":
            "macintosh" === o ? /Mac OS X/.test(n) ? a.os = "Mac OS X" : a.os = "Mac OS" : a.os = "IOS", 
            a.os_version = n.match(/[0-9_.]+/)[0];
            break;

          case "android":
            a.os = "Android", a.os_version = n.match(/[0-9.]+/)[0];
        }
        return a.os_version = a.os_version.replace(/_/g, "."), a;
    }
    t.exports = function() {
        var t = navigator.userAgent, e = {}, o = t.match(/iphone|ipad|android|macintosh/i), r = t.match(/Darwin/i);
        if (o) e = a(t, o[0]); else if (r) {
            var i = t.split(" ")[2];
            e = {
                os: "Darwin",
                os_version: i.match(/[0-9.]+/)[0],
                device_model: "Darwin"
            };
        } else e = n(t);
        var s = screen || {};
        return e.screenWidth = s.width, e.screenHeight = s.height, navigator && (e.userAgent = navigator.userAgent || "-", 
        e.language = navigator.language || navigator.userLanguage || "-"), e;
    };
}, function(t, e, n) {
    "use strict";
    t.exports = function() {
        return {
            run: function() {
                n(15)(this.options.context.aplus_config);
            }
        };
    };
}, function(t, e, n) {
    "use strict";
    function a() {
        var t = document, e = "//g.alicdn.com";
        if (t) {
            var n = t.getElementById("beacon-aplus") || t.getElementById("tb-beacon-aplus"), a = [ "//assets.alicdn.com/g", "//g-assets.daily.taobao.net", "//alidt.oss-cn-hangzhou.aliyuncs.com" ];
            if (n) for (var o = 0; o < a.length; o++) {
                var r = new RegExp(a[o]);
                if (r.test(n.src)) {
                    e = a[o];
                    break;
                }
            }
        }
        return e;
    }
    function o() {
        s || (s = a());
        var t = "//assets.alicdn.com/g" === s || "//laz-g-cdn.alicdn.com" === s;
        return t || "int" === g.getMetaInfo("aplus-env");
    }
    function r() {
        if (navigator && navigator.userAgent) {
            var t = /iphone|android/i.test(navigator.userAgent), e = t || /TB\-PD/i.test(navigator.userAgent);
            return e;
        }
        return !0;
    }
    function i() {
        var t, e = c.getParamFromUrl("utparamcnt", location.href);
        if (e) try {
            t = e = JSON.parse(decodeURIComponent(e));
        } catch (t) {}
        return t;
    }
    var s, u = n(2), c = n(16), l = n(17), p = n(18), g = n(19);
    t.exports = function(t) {
        var e = u.getGlobalValue("aplus"), s = t.globalConfig.NAME_STORAGE_KEYS, c = n(30).getRefer(s);
        e.nameStorage = p.nameStorage, l.haveNativeFlagInUA();
        var f = e._$ = e._$ || {};
        f.is_terminal = r(), f.send_pv_count = 0, f.page_referrer = c, f.spm = {
            data: {},
            page_referrer: c
        }, e.globalConfig = t.globalConfig;
        var d = i();
        f.meta_info = g.qGet() || {};
        for (var _ in t.metaInfo) if (!f.meta_info.hasOwnProperty(_)) {
            var h = t.metaInfo[_];
            "aplus-utparam" === _ ? (d && g.appendMetaInfo(_, d), g.appendMetaInfo(_, h)) : g.setMetaInfo(_, h);
        }
        e._$ = f, e.isInternational = o, e.getCdnPath = a;
    };
}, function(t, e) {
    "use strict";
    function n(t, e) {
        if (!t || !e) return "";
        var n, a = "";
        try {
            var o = new RegExp(t + "=([^&|#|?|/]+)");
            if ("spm" === t || "scm" === t) {
                var r = new RegExp("\\?.*" + t + "=([\\w\\.\\-\\*/]+)"), i = e.match(o), s = e.match(r), u = i && 2 === i.length ? i[1] : "", c = s && 2 === s.length ? s[1] : "";
                a = u > c ? u : c, a = decodeURIComponent(a);
            } else n = e.match(o), a = n && 2 === n.length ? n[1] : "";
        } catch (t) {} finally {
            return a;
        }
    }
    e.getParamFromUrl = n, e.getSPMFromUrl = function(t) {
        return n("spm", t);
    };
}, function(t, e, n) {
    "use strict";
    var a = n(2), o = "UT4Aplus", r = "Umeng4Aplus";
    e.isNative4Aplus = function() {
        var t = a.getGlobalValue("aplus"), e = t.getMetaInfo("aplus-toUT"), n = t.aplusBridgeName;
        return n === o && e === o || n === r;
    }, e.haveNativeFlagInUA = function() {
        var t = a.getGlobalValue("aplus"), e = t.aplusBridgeName;
        if (!e && "boolean" != typeof e && navigator && navigator.userAgent) {
            var n = new RegExp([ o, r ].join("|"), "i"), i = navigator.userAgent.match(n);
            e = !!i && i[0], t.aplusBridgeName = e;
        }
        return !!e;
    };
}, function(t, e, n) {
    "use strict";
    var a = n(2), o = function() {
        function t() {
            var t, e = [], n = !0;
            for (var a in g) g.hasOwnProperty(a) && (n = !1, t = g[a] || "", e.push(l(a) + u + l(t)));
            window.name = n ? o : r + l(o) + s + e.join(c);
        }
        function e(t, e, n) {
            t && (t.addEventListener ? t.addEventListener(e, n, !1) : t.attachEvent && t.attachEvent("on" + e, function(e) {
                n.call(t, e);
            }));
        }
        var n = a.getGlobalValue("nameStorage");
        if (n) return n;
        var o, r = "nameStorage:", i = /^([^=]+)(?:=(.*))?$/, s = "?", u = "=", c = "&", l = encodeURIComponent, p = decodeURIComponent, g = {}, f = {};
        return function(t) {
            if (t && 0 === t.indexOf(r)) {
                var e = t.split(/[:?]/);
                e.shift(), o = p(e.shift()) || "";
                for (var n, a, s, u = e.join(""), l = u.split(c), f = 0, d = l.length; f < d; f++) n = l[f].match(i), 
                n && n[1] && (a = p(n[1]), s = p(n[2]) || "", g[a] = s);
            } else o = t || "";
        }(window.name), f.setItem = function(e, n) {
            e && "undefined" != typeof n && (g[e] = String(n), t());
        }, f.getItem = function(t) {
            return g.hasOwnProperty(t) ? g[t] : null;
        }, f.removeItem = function(e) {
            g.hasOwnProperty(e) && (g[e] = null, delete g[e], t());
        }, f.clear = function() {
            g = {}, t();
        }, f.valueOf = function() {
            return g;
        }, f.toString = function() {
            var t = window.name;
            return 0 === t.indexOf(r) ? t : r + t;
        }, e(window, "beforeunload", function() {
            t();
        }), f;
    }();
    e.nameStorage = o;
}, function(t, e, n) {
    "use strict";
    function a(t) {
        var e, n, a, o = t.length, r = {};
        for (v._microscope_data = r, e = 0; e < o; e++) n = t[e], "microscope-data" === _.tryToGetAttribute(n, "name") && (a = _.tryToGetAttribute(n, "content"), 
        g.parseSemicolonContent(a, r), v.is_head_has_meta_microscope_data = !0);
        v._microscope_data_params = l.obj2param(r), v.ms_data_page_id = r.pageId, v.ms_data_shop_id = r.shopId, 
        v.ms_data_instance_id = r.siteInstanceId, v.ms_data_siteCategoryId = r.siteCategory, 
        v.ms_prototype_id = r.prototypeId, v.site_instance_id_or_shop_id = v.ms_data_instance_id || v.ms_data_shop_id, 
        v._atp_beacon_data = {}, v._atp_beacon_data_params = "";
    }
    function o(t) {
        var e, n = function() {
            var e;
            return document.querySelector && (e = document.querySelector("meta[name=data-spm]")), 
            d(t, function(t) {
                "data-spm" === _.tryToGetAttribute(t, "name") && (e = t);
            }), e;
        }, a = n();
        return a && (e = _.tryToGetAttribute(a, "data-spm-protocol")), e;
    }
    function r(t) {
        var e = t.isonepage || "-1", n = e.split("|"), a = n[0], o = n[1] ? n[1] : "";
        t.isonepage_data = {
            isonepage: a,
            urlpagename: o
        };
    }
    function i() {
        if (document) {
            var t = h.getMetaTags();
            a(t), d(t, function(t) {
                var e = _.tryToGetAttribute(t, "name");
                if (/^aplus/.test(e) && (v[e] = h.getMetaCnt(e), e === y)) try {
                    u = v[e] = JSON.parse(h.getMetaCnt(e));
                } catch (t) {}
            }), d(b, function(t) {
                v[t] = h.getMetaCnt(t);
            }), v.spm_protocol = o(t), u && (v = p.assign(v, u));
            var e, n, i = [ "aplus-rate-ahot" ], s = i.length;
            for (e = 0; e < s; e++) n = i[e], v[n] = parseFloat(v[n]);
            r(v);
        }
        return c = v || {}, v;
    }
    function s(t) {
        f.logger({
            msg: "please do not repeat setPriorityMetaInfo " + t
        });
    }
    var u, c, l = n(20), p = n(21), g = n(23), f = n(26), d = n(27), _ = n(28), h = n(29), m = n(2), v = {}, y = "aplus-x-settings", b = [ "ahot-aplus", "isonepage", "spm-id", "data-spm", "microscope-data" ];
    e.getInfo = i, e.qGet = function() {
        return c || i();
    }, e.setMetaInfo = function(t, e) {
        if (c || (c = {}), "object" == typeof u && u[t]) return s(t), !0;
        if (t === y) {
            if (u) s(t); else try {
                u = "object" == typeof e ? e : JSON.parse(e), c = p.assign(c, u);
            } catch (t) {
                console && console.log(t);
            }
            return !0;
        }
        return "aplus-exinfo" === t ? c[t] = "object" == typeof e ? e : l.param2obj(e) : c[t] = e, 
        !0;
    };
    var E = function(t) {
        return c || (c = {}), c[t] || "";
    };
    e.getMetaInfo = E, e.appendMetaInfo = function(t, e) {
        var n = m.getGlobalValue("aplus");
        if (t && e) {
            var a, o = function(n) {
                try {
                    var a = "string" == typeof e ? JSON.parse(e) : e;
                    s(t, p.assign(n, a));
                } catch (t) {}
            }, r = function(n) {
                try {
                    var a = "string" == typeof e ? JSON.parse(e) : e;
                    s(t, n.concat(a));
                } catch (t) {}
            }, i = function(t) {
                t.constructor === Array ? r(t) : o(t);
            }, s = function(t, e) {
                n.setMetaInfo(t, e, {
                    from: "appendMetaInfo"
                });
            }, u = function(n) {
                var a = l.param2obj(e);
                s(t, p.assign(n, a));
            }, c = n.getMetaInfo(t);
            if ("aplus-exinfo" === t && (u(c), a = !0), c) if ("object" == typeof c) i(c), a = !0; else try {
                var g = JSON.parse(c);
                "object" == typeof g && (i(g), a = !0);
            } catch (t) {}
            a || s(t, e);
        }
    };
}, function(t, e) {
    "use strict";
    function n(t, e) {
        var n, o, r, i = [], s = t.length;
        for (r = 0; r < s; r++) {
            n = t[r][0], o = t[r][1];
            var u = 0 === n.indexOf(a), c = u || e ? o : encodeURIComponent(o);
            i.push(u ? c : n + "=" + c);
        }
        return i.join("&");
    }
    e.arr2obj = function(t) {
        var e, n, a, o = {}, r = t.length;
        for (a = 0; a < r; a++) e = t[a][0], n = t[a][1], o[e] = n;
        return o;
    }, e.param2obj = function(t) {
        if ("object" == typeof t) return t;
        t || (t = "");
        for (var e = {}, n = t.split("&"), a = 0; a < n.length; a++) {
            var o = n[a], r = o.indexOf("="), i = o.split("="), s = o.length;
            if (2 === i.length) e[i[0]] = i[1] || ""; else if (r > 0) {
                var u = o.slice(0, r), c = o.slice(r + 1, s) || "";
                e[u] = c;
            } else e[i[0]] = "";
        }
        return e;
    };
    var a = "::-plain-::";
    e.s_plain_obj = a, e.arr2param = n, e.obj2param = function(t, e) {
        var n, o, r, i = [];
        for (n in t) n && t.hasOwnProperty(n) && (o = "" + t[n], r = n + "=" + o, e ? i.push(r) : i.push(0 === n.indexOf(a) ? o : r));
        return i.join("&");
    }, e.encodeGokeyValue = function(t) {
        return t;
    };
}, function(t, e, n) {
    "use strict";
    e.assign = n(22), e.makeCacheNum = function() {
        return Math.floor(268435456 * Math.random()).toString(16);
    }, e.isStartWith = function(t, e) {
        return 0 === t.indexOf(e);
    }, e.isEndWith = function(t, e) {
        var n = t.length, a = e.length;
        return n >= a && t.indexOf(e) == n - a;
    }, e.any = function(t, e) {
        var n, a = t.length;
        for (n = 0; n < a; n++) if (e(t[n])) return !0;
        return !1;
    }, e.isNumber = function(t) {
        return "number" == typeof t;
    }, e.isNaN = function(t) {
        return isNaN ? isNaN(t) : t !== t;
    }, e.isContain = function(t, e) {
        return t.indexOf(e) > -1;
    };
    var a = function(t) {
        var e, n = t.constructor === Array ? [] : {};
        if ("object" == typeof t) {
            if (JSON && JSON.parse) e = JSON.stringify(t), n = JSON.parse(e); else for (var o in t) n[o] = "object" == typeof t[o] ? a(t[o]) : t[o];
            return n;
        }
    };
    e.cloneDeep = a;
}, function(t, e) {
    t.exports = function(t, e) {
        return "function" != typeof Object.assign ? function(t) {
            for (var e = Object(t), n = 1; n < arguments.length; n++) {
                var a = arguments[n];
                if (null !== a) for (var o in a) Object.prototype.hasOwnProperty.call(a, o) && (e[o] = a[o]);
            }
            return e;
        }(t, e) : Object.assign({}, t, e);
    };
}, function(t, e, n) {
    "use strict";
    var a = n(24), o = n(25), r = n(2);
    t.exports = {
        tryToDecodeURIComponent: function(t, e) {
            var n = e || "";
            if (t) try {
                n = decodeURIComponent(t);
            } catch (t) {}
            return n;
        },
        parseSemicolonContent: function(t, e, n) {
            e = e || {};
            var o, r, i = t.split(";"), s = i.length;
            for (o = 0; o < s; o++) {
                r = i[o].split("=");
                var u = a.trim(r.slice(1).join("="));
                e[a.trim(r[0]) || ""] = n ? u : this.tryToDecodeURIComponent(u);
            }
            return e;
        },
        nodeListToArray: function(t) {
            var e, n;
            try {
                return e = [].slice.call(t);
            } catch (o) {
                e = [], n = t.length;
                for (var a = 0; a < n; a++) e.push(t[a]);
                return e;
            }
        },
        getLsCna: function(t, e) {
            if (o.set && o.test()) {
                var n = "", a = o.get(t);
                if (a) {
                    var r = a.split("_") || [];
                    n = e ? r.length > 1 && e === r[0] ? r[1] : "" : r.length > 1 ? r[1] : "";
                }
                return decodeURIComponent(n);
            }
            return "";
        },
        setLsCna: function(t, e, n) {
            n && o.set && o.test() && o.set(t, e + "_" + encodeURIComponent(n));
        },
        getUrl: function(t) {
            var e = r.getGlobalValue("aplus"), n = t || "//log.mmstat.com/eg.js";
            try {
                var a = e.getMetaInfo("aplus-rhost-v"), o = /[[a-z|\-|\_|0-9\.]+[a-z|\-|\_|0-9](:\d*)?/, i = a.match(o);
                i && i[0] && (n = "//" + i[0] + "/eg.js");
            } catch (t) {}
            return n;
        }
    };
}, function(t, e) {
    "use strict";
    function n(t) {
        return "string" == typeof t ? t.replace(/^\s+|\s+$/g, "") : "";
    }
    e.trim = n;
}, function(t, e) {
    "use strict";
    t.exports = {
        set: function(t, e) {
            try {
                return localStorage.setItem(t, e), !0;
            } catch (t) {
                return !1;
            }
        },
        get: function(t) {
            try {
                return localStorage.getItem(t);
            } catch (t) {
                return "";
            }
        },
        test: function() {
            var t = "grey_test_key";
            try {
                return localStorage.setItem(t, 1), localStorage.removeItem(t), !0;
            } catch (t) {
                return !1;
            }
        },
        remove: function(t) {
            localStorage.removeItem(t);
        }
    };
}, function(t, e, n) {
    "use strict";
    var a = "[aplus log]: ";
    e.logger = function(t) {
        t || (t = {});
        var e = t.level || "warn";
        console && console[e] && console[e](a + t.msg);
    }, e.debugLog = function(t) {
        var e = n(2).getGlobalValue("aplus");
        e && e.aplusDebug && this.logger(t);
    };
}, function(t, e) {
    "use strict";
    t.exports = function(t, e) {
        var n, a = t.length;
        for (n = 0; n < a; n++) {
            var o = e(t[n], n);
            if ("break" === o) break;
        }
    };
}, function(t, e) {
    "use strict";
    e.tryToGetAttribute = function(t, e) {
        return t && t.getAttribute ? t.getAttribute(e) || "" : "";
    };
    var n = function(t, e, n) {
        if (t && t.setAttribute) try {
            t.setAttribute(e, n);
        } catch (t) {}
    };
    e.tryToSetAttribute = n, e.tryToRemoveAttribute = function(t, e) {
        if (t && t.removeAttribute) try {
            t.removeAttribute(e);
        } catch (a) {
            n(t, e, "");
        }
    };
}, function(t, e, n) {
    "use strict";
    function a(t) {
        return i = i || document.getElementsByTagName("head")[0], s && !t ? s : i ? s = i.getElementsByTagName("meta") : [];
    }
    function o(t, e) {
        var n, o, r, i = a(), s = i.length;
        for (n = 0; n < s; n++) o = i[n], u.tryToGetAttribute(o, "name") === t && (r = u.tryToGetAttribute(o, e || "content"));
        return r || "";
    }
    function r(t) {
        var e = {
            isonepage: "-1",
            urlpagename: ""
        }, n = t.qGet();
        if (n && n.hasOwnProperty("isonepage_data")) e.isonepage = n.isonepage_data.isonepage, 
        e.urlpagename = n.isonepage_data.urlpagename; else {
            var a = o("isonepage") || "-1", r = a.split("|");
            e.isonepage = r[0], e.urlpagename = r[1] ? r[1] : "";
        }
        return e;
    }
    var i, s, u = n(28);
    e.getMetaTags = a, e.getMetaCnt = o, e.getOnePageInfo = r;
}, function(t, e, n) {
    "use strict";
    var a = n(18).nameStorage;
    e.getRefer = function(t) {
        return document.referrer || a.getItem(t.REFERRER) || "";
    };
}, function(t, e, n) {
    "use strict";
    var a = n(32), o = n(3), r = n(18).nameStorage, i = n(30);
    t.exports = function() {
        return {
            recordValInWindowName: function() {
                var t, e, n = o.HTTPS == location.protocol, a = aplus.globalConfig.NAMESTORAGE_KEYS || {}, s = parent !== self;
                if (!s && n) {
                    var u = location.href, c = n && (u.indexOf("login.taobao.com") >= 0 || u.indexOf("login.tmall.com") >= 0), l = i.getRefer(a);
                    c && l ? (t = l, e = r.getItem(a.REFERRER_PV_ID)) : (t = u, e = aplus.pvid), r.setItem(a.REFERRER, t), 
                    r.setItem(a.REFERRER_PV_ID, e);
                }
            },
            run: function() {
                var t = this;
                a.on(window, "beforeunload", function() {
                    t.recordValInWindowName();
                });
            }
        };
    };
}, function(t, e, n) {
    "use strict";
    function a(t, e, n) {
        var a = aplus._$ || {}, o = a.meta_info || {}, r = o.aplus_ctap || {}, i = o["aplus-touch"];
        if (r && "function" == typeof r.on) r.on(t, e); else {
            var u = "ontouchend" in document.createElement("div");
            !u || "tap" !== i && "tapSpm" !== n && "tap" !== n ? s(t, u ? "touchstart" : "mousedown", e) : c.on(t, e);
        }
    }
    function o(t) {
        try {
            document.documentElement.doScroll("left");
        } catch (e) {
            return void setTimeout(function() {
                o(t);
            }, 1);
        }
        t();
    }
    function r(t) {
        var e = 0, n = function() {
            0 === e && t(), e++;
        };
        "complete" === document.readyState && n();
        var a;
        if (document.addEventListener) a = function() {
            document.removeEventListener("DOMContentLoaded", a, !1), n();
        }, document.addEventListener("DOMContentLoaded", a, !1), window.addEventListener("load", n, !1); else if (document.attachEvent) {
            a = function() {
                "complete" === document.readyState && (document.detachEvent("onreadystatechange", a), 
                n());
            }, document.attachEvent("onreadystatechange", a), window.attachEvent("onload", n);
            var r = !1;
            try {
                r = null === window.frameElement;
            } catch (t) {}
            document.documentElement.doScroll && r && o(n);
        }
    }
    function i(t) {
        "complete" === document.readyState ? t() : s(window, "load", t);
    }
    function s() {
        var t = window, e = arguments;
        if (2 === e.length) "DOMReady" === e[0] && r(e[1]), "onload" === e[0] && i(e[1]); else if (3 === e.length) {
            var n = e[0], o = e[1], s = e[2];
            if ("tap" === o || "tapSpm" === o) a(n, s, o); else {
                var c = document.attachEvent ? "attachEvent" : "addEventListener", l = !!document.attachEvent;
                n[c]((l ? "on" : "") + o, function(e) {
                    e = e || t.event;
                    var n = e.target || e.srcElement;
                    "function" == typeof s && s(e, n);
                }, !!u(o) && {
                    passive: !0
                });
            }
        }
    }
    var u = n(33), c = n(34);
    e.DOMReady = r, e.onload = i, e.on = s;
}, function(t, e) {
    var n;
    t.exports = function(t) {
        if ("boolean" == typeof n) return n;
        if (!/touch|mouse|scroll|wheel/i.test(t)) return !1;
        n = !1;
        try {
            var e = Object.defineProperty({}, "passive", {
                get: function() {
                    n = !0;
                }
            });
            window.addEventListener("test", null, e);
        } catch (t) {}
        return n;
    };
}, function(t, e) {
    "use strict";
    function n(t, e) {
        return t + Math.floor(Math.random() * (e - t + 1));
    }
    function a(t, e, n) {
        var a = document.createEvent("HTMLEvents");
        if (a.initEvent(e, !0, !0), "object" == typeof n) for (var o in n) a[o] = n[o];
        t.dispatchEvent(a);
    }
    function o(t) {
        var e = document.documentElement;
        0 === Object.keys(l).length && (e.addEventListener(f, r, !1), e.addEventListener(g, i, !1), 
        e.addEventListener(_, i, !1));
        for (var n = 0; n < t.changedTouches.length; n++) {
            var a = t.changedTouches[n], o = {};
            for (var s in a) o[s] = a[s];
            var u = {
                startTouch: o,
                startTime: Date.now(),
                status: d,
                element: t.srcElement || t.target
            };
            l[a.identifier] = u;
        }
    }
    function r(t) {
        for (var e = 0; e < t.changedTouches.length; e++) {
            var n = t.changedTouches[e], a = l[n.identifier];
            if (!a) return;
            var o = n.clientX - a.startTouch.clientX, r = n.clientY - a.startTouch.clientY, i = Math.sqrt(Math.pow(o, 2) + Math.pow(r, 2));
            (a.status === d || "pressing" === a.status) && i > 10 && (a.status = "panning");
        }
    }
    function i(t) {
        for (var e = 0; e < t.changedTouches.length; e++) {
            var n = t.changedTouches[e], o = n.identifier, s = l[o];
            s && (s.status === d && t.type === g && (s.timestamp = Date.now(), a(s.element, h, {
                touch: n,
                touchEvent: t
            })), delete l[o]);
        }
        var u = document.documentElement;
        0 === Object.keys(l).length && (u.removeEventListener(f, r, !1), u.removeEventListener(g, i, !1), 
        u.removeEventListener(_, i, !1));
    }
    function s(t) {
        t.__fixTouchEvent || (t.addEventListener(p, function() {}, !1), t.__fixTouchEvent = !0);
    }
    function u() {
        if (!c) {
            var t = document.documentElement;
            t.addEventListener(p, o, !1), c = !0;
        }
    }
    var c = !1, l = {}, p = "touchstart", g = "touchend", f = "touchmove", d = "tapping", _ = "touchcancel", h = "aplus_tap" + n(1, 1e5);
    t.exports = {
        on: function(t, e) {
            u(), t && t.addEventListener && e && (s(t), t.addEventListener(h, e._aplus_tap_callback = function(t) {
                e(t, t.target);
            }, !1));
        },
        un: function(t, e) {
            t && t.removeEventListener && e && e._aplus_tap_callback && t.removeEventListener(h, e._aplus_tap_callback, !1);
        }
    };
}, function(t, e, n) {
    "use strict";
    t.exports = function() {
        return {
            run: function() {
                var t = n(36), e = t.create({
                    WS: null,
                    CTX: window,
                    CTX_TYPE: "WEB"
                });
                e.run(this.options);
            }
        };
    };
}, function(t, e, n) {
    "use strict";
    var a, o = n(37), r = n(2), i = n(38), s = n(40), u = n(44), c = n(3), l = n(25), p = n(50), g = n(26);
    t.exports = i.extend({
        handlerMiddleware: function(t) {
            var e = r.getGlobalValue("aplus");
            if (!e.getMetaInfo(c.JSBRIDGE_ONLY)) {
                var n = o.changeToObj(t.what_to_send.logdata);
                u().setDebug(!!e.getMetaInfo("DEBUG"));
                var i, f = s(n, t.userdata);
                e._h5_share_enable ? i = "POST" : (i = t.where_to_send.method, "POST" === i && navigator && navigator.sendBeacon || (f = "d=" + encodeURIComponent(f))), 
                u().i("event before send to: ", t.where_to_send.url), a || (a = new Date().getTime()), 
                a && a - new Date().getTime() > c.SHARE_CACHE_INTERVAL && e._h5_share_enable && (l.remove("__sharefrom"), 
                l.remove("__fromappkey"), l.remove("_um_ssrc"), l.remove("_um_channel"), l.remove("_um_campaign")), 
                e._h5_share_enable ? p.request4um({
                    url: t.where_to_send.url,
                    method: i,
                    data: f,
                    success: function(t) {
                        t && t.imprint && l.set(c.IMPRINT, t.imprint);
                    },
                    error: function(t) {
                        g.logger({
                            msg: "aplus weblogs error: " + t
                        });
                    }
                }) : e.send(t.where_to_send.url, f, i);
            }
        }
    });
}, function(t, e, n) {
    "use strict";
    var a = n(2);
    e.getKeyIndex = function(t) {
        var e = {
            protocol: 1,
            event_args: 25
        };
        return e[t];
    };
    var o = "-";
    e.changeToArray = function(t, e) {
        var n = a.getGlobalValue("aplus"), r = e.event_timestamp.getTime().toString(), i = e.client || {}, s = i.screenWidth || "", u = i.screenHeight || "", c = s + "*" + u, l = s && u ? c : o, p = i.language || o, g = e.gokey || {}, f = JSON.stringify(g), d = JSON.stringify({
            customSdkId: e.sdk_info.customSdkId || "",
            platform_type: e.sdk_info.platformType || ""
        }), _ = e.appKey || e.appId || o, h = JSON.stringify({
            appId: i.appId || n.getMetaInfo("miniAppId") || ""
        }), m = JSON.stringify(e.sessionArgs || {}), v = JSON.stringify(e.globalArgs || {}), y = e.arg1 || e.logkey || o;
        0 === y.indexOf("/$$_") && (y = y.substring(1, y.length)), "2001" === e.event_code && e.trackerEventCode && (y = e.trackerEventCode);
        var b = [ e.cache, e.method || "GET", o, l, _, h, e._dev_id || o, "{}", e._user_nick || o, e._user_id || o, e._anony_id || o, "{}", p, e.timeZone || o, i.os || o, i.os_version || o, d, e._session_id || o, e.cna || o, r, encodeURIComponent(e.url) || o, e.event_code || o, encodeURIComponent(e.pre) || o, v, m, f, y, e.sdk_info.jsver, e.sdk_info.lver, i.appVersion || "devtools" || o, i.brand || o, o, i.networkType || o ];
        return b;
    }, e.changeToObj = function(t) {
        var e = a.getGlobalValue("aplus"), n = t.event_timestamp.getTime().toString(), r = t.client || {}, i = r.language || o, s = t.gokey || {}, u = JSON.stringify(s), c = JSON.stringify({
            customSdkId: t.sdk_info.customSdkId || "",
            platform_type: t.sdk_info.platformType || ""
        }), l = t.appKey || t.appId || o, p = JSON.stringify({
            appId: r.appId || e.getMetaInfo("miniAppId") || ""
        }), g = JSON.stringify(t.sessionArgs || {}), f = JSON.stringify(t.globalArgs || {}), d = t.arg1 || t.logkey || o;
        0 === d.indexOf("/$$_") && (d = d.substring(1, d.length)), "2001" === t.event_code && t.trackerEventCode && (d = t.trackerEventCode);
        var _ = {};
        _.platform = t.sdk_info.platformType || "", _.sdk_type = _.platform ? _.platform + "mp" : "", 
        _.appkey = l, _.sdk_version = t.sdk_info.lver, _.device_type = r.device_model || "", 
        _.os = r.os || "", _.os_version = r.os_version || "", _.jsver = t.sdk_info.jsver, 
        _.pixel_ratio = window.devicePixelRatio || "";
        var h = Math.round(r.screenWidth * (window.devicePixelRatio || 1)), m = Math.round(r.screenHeight * (window.devicePixelRatio || 1));
        _.resolution = h > m ? h + "*" + m : m + "*" + h, _.language = i, _.app_version = e.getMetaInfo("appVersion") || "devtools", 
        _.arg1 = d, _.event_args = u, _.event_code = t.event_code || "", _.sessionArgs = g, 
        _.global_args = f, _.app_ext_info = p, _.time = n, _.cna = t.cna || "", _.url = t.url || "", 
        _.pre = t.pre || "", _.method = t.method || "GET", _.log_id = t.cache || "", _.sdk_info = c, 
        _.is_auto = t.is_auto;
        var v = e.getMetaInfo("aplus-exdata");
        return v && v.aplus_track_debug_id && (_.track_debug_id = v.aplus_track_debug_id), 
        _;
    };
}, function(t, e, n) {
    "use strict";
    var a = n(11), o = n(39), r = n(3);
    t.exports = a.extend({
        subscribeLogs: function(t, e) {
            o.pushIntoGoldlogQueue(r.SUBSCRIBE, [ t, function(t) {
                t.status === r.COMPLETE && e(t);
            } ]);
        },
        getLogicSymbol: function() {
            return "ALI" === this.format ? "&" : "||";
        },
        handlerMiddleware: function() {},
        watchLOG: function() {
            var t = this;
            t.subscribeLogs(r.MW_CHANGE_PV, function(e) {
                t.handlerMiddleware(e, "pv");
            }), t.subscribeLogs(r.MW_CHANGE_HJLJ, function(e) {
                t.handlerMiddleware(e, r.APLUS);
            });
        },
        run: function() {
            this.watchLOG();
        }
    });
}, function(t, e, n) {
    "use strict";
    var a = n(2);
    e.pushIntoGoldlogQueue = function(t, e) {
        var n = a.getGlobalValue("aplus_queue"), o = a.getGlobalValue("aplus"), r = t.split("."), i = o[r[1]], s = i ? i[r[2]] : null;
        o && 2 === r.length && i ? i.apply(o, e) : 3 === r.length && s ? s.apply(i, e) : n.push({
            action: t,
            arguments: e
        });
    };
}, function(t, e, n) {
    function a() {
        var t = u.getGlobalValue("aplus");
        if (t._h5_share_enable) {
            var e = {}, n = m.get("__sharefrom"), a = m.get("__fromappkey"), o = m.get("_um_ssrc"), r = m.get("_um_channel"), i = m.get("_um_campaign");
            return n && (e.sharefrom = n), a && (e.fromappkey = a), o && (e._um_ssrc = o), r && (e._um_channel = r), 
            i && (e._um_campaign = i), e;
        }
    }
    function o(t, e) {
        var n = u.getGlobalValue("aplus");
        try {
            var o = {}, r = n.getMetaInfo("globalproperty");
            r && (o.gp = r);
            var s, l = e.gokey;
            s = "string" == typeof l ? JSON.parse('{"' + l.replace(/\&/g, '","').replace(/\=/g, '":"') + '"}', function(t, e) {
                return "" === t ? e : decodeURIComponent(e);
            }) : "object" == typeof l ? i(l) : {};
            var p = v.getPageCode(location.pathname);
            t.url && (o.page_name = s.spmB || s["data-pagename"] || s.page_name || p || t.url || "-", 
            o.url = t.url || "-", o.page_name && s.spmC && (o["spm-cnt"] = [ encodeURIComponent(o.page_name), encodeURIComponent(s.spmC), encodeURIComponent(s.spmD) ].filter(function(t) {
                return !!t;
            }).join("."), delete s.spmC, delete s.spmD, delete s.spmB));
            var g = i(s);
            for (var f in g) "string" == typeof f && c.startsWith(f, "_") && (o[f] = g[f], delete s[f]);
            o = h.assign(o, a() || {}), o.is_auto = e.gokey && "string" == typeof e.gokey && e.gokey.match("is_auto") ? 1 : 0;
            var _ = d(e.logkey, h.assign(o, {
                cusp: s
            }));
            return _;
        } catch (t) {
            return console.warn("JSON parse failed", t), {};
        }
    }
    function r(t, e) {
        var n = u.getGlobalValue("aplus"), o = n.getMetaInfo("globalproperty"), r = {};
        r.r = t.arg1, o && (r.gp = o), r.is_auto = t.is_auto ? 1 : 0;
        var s = e, l = i(c.deleteInfo(s, [ "_anony_id", "_dev_id", "_session_id", "_user_id", "_user_nick", "_src_pos_id" ]));
        l.duration && (r.duration = l.duration, delete l.duration);
        var p = v.getPageCode(location.pathname);
        if (t.url && (r.page_name = l.spmB || l.page_name || document.body.dataset && document.body.dataset.pagename || p || t.url || "-", 
        r.url = t.url, r["spm-cnt"] = encodeURIComponent(r.page_name)), t.pre && (r.ref_url = t.pre || "-", 
        n._h5_share_enable && r.ref_url.length > 1)) {
            var f = r.ref_url.match(/(\w|-)+\.(\w|-)+\.(\w|-)+/);
            f && f.length > 0 && (r._um_referer_domain = f[0]);
        }
        return r = h.assign(r, a() || {}), d(g.PAGE_START, h.assign(r, {
            cusp: l
        }));
    }
    var i = n(41), s = n(42), u = n(2), c = n(43), l = n(45), p = n(46), g = n(3), f = n(47), d = n(48), _ = n(44), h = n(21), m = n(25), v = n(49);
    t.exports = function(t, e) {
        var n = u.getGlobalValue("aplus");
        if (!t || !e || c.checkEmptyObj(t) || c.checkEmptyObj(e)) return {};
        var a = {}, d = i(s(t)), h = n.getMetaInfo(g._ANONY_ID) || t.cna;
        h && (d.anony_id = h, d.id_tracking.anony_id = h);
        var v = n.getMetaInfo("_dev_id") || t.cna;
        if (v && (d.dev_id = v, d.id_tracking.dev_id = v), n._h5_share_enable) {
            var y = n.getMetaInfo("uuid");
            y && (d.id_tracking.ud = y);
            var b = n.getMetaInfo("openid");
            b && (d.id_tracking.openid = b);
            var E = n.getMetaInfo("unionid");
            E && (d.id_tracking.unionid = E);
            var I = n.getMetaInfo("anouymousopenid");
            I && (d.id_tracking.anonymousid = I);
            var P = n.getMetaInfo("alipayid");
            P && (d.id_tracking.alipay_id = P);
            var w = n.getMetaInfo("swanid");
            w && (d.id_tracking.anonymousid = w);
            var S = n.getMetaInfo(g.USER_PROFILE_KEY);
            S && (d.user_info = S);
            var x = m.get(g.IMPRINT);
            x && (d.imprint = x);
            var T = n.getMetaInfo(g.ID_TYPE) || "cnaid";
            d.id_type = T;
        }
        var A = null;
        A = "2001" === t.event_code ? r(t, e) : o(t, e), A && (a = {
            analytics: {
                ekvs: {
                    sessionid: [ i(A) ]
                }
            }
        });
        var C = n.getMetaInfo(g._USER_ID);
        C && a.analytics && (a.analytics.active_user = {
            puid: C,
            provider: n.getMetaInfo("_user_nick")
        }), a.header = c.assign(d, a.header, {
            ts: Date.now(),
            traceId: c.getRandomStr(10) + Date.now() + c.getRandomStr(9)
        });
        var M = l(a), k = f.stringfy(M);
        return _().i("event data: ", M), p.encode(k);
    };
}, function(t, e) {
    function n(t) {
        var e, a = Array.isArray(t) ? [] : {};
        if ("object" == typeof t) {
            if (JSON && JSON.parse) e = JSON.stringify(t), a = JSON.parse(e); else for (var o in t) a[o] = "object" == typeof t[o] ? n(t[o]) : t[o];
            return a;
        }
    }
    t.exports = n;
}, function(t, e) {
    t.exports = function(t) {
        var e = {};
        return e.sdk_type = t.sdk_type, e.appkey = t.appkey, e.sdk_version = t.sdk_version, 
        e.device_type = t.device_type, e.os = t.os, e.os_version = t.os_version, e.platform = t.platform, 
        e.pixel_ratio = t.pixel_ratio, e.resolution = t.resolution, e.language = t.language, 
        e.app_version = t.app_version, e.jsver = t.jsver, e.pre = t.pre, e.url = t.url, 
        e.debugId = t.track_debug_id, e.id_tracking = {}, e;
    };
}, function(t, e, n) {
    e.getRandomStr = function(t) {
        for (var e = "", n = [ "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z" ], a = 0; a < Number(t); a++) {
            var o = Math.round(Math.random() * (n.length - 1));
            e += n[o];
        }
        return e;
    }, e.startsWith = function(t, e) {
        return !(!t || !e || 0 === e.length || e.length > t.length) && t.substr(0, e.length) === e;
    }, e.assign = function(t) {
        if (void 0 === t || null === t) throw new TypeError("Cannot convert undefined or null to object");
        for (var e = Object(t), n = 1; n < arguments.length; n++) {
            var a = arguments[n];
            if (a) for (var o in a) Object.prototype.hasOwnProperty.call(a, o) && (e[o] = a[o]);
        }
        return e;
    }, e.checkEvent = function(t, e) {
        var a = n(3), o = n(44);
        if (!t || "string" != typeof t) return o().e('please check trackEvent id. id should be "string" and not null'), 
        !1;
        var r = [ "id", "du" ], i = {};
        if (r.forEach(function(t) {
            i[t] = 1;
        }), i[t]) return o().e("eventId不能与以下保留字冲突: " + r.join(",")), !1;
        if (t.length > a.MAX_EVENTID_LENGTH) return o().e("The maximum length of event id shall not exceed " + a.MAX_EVENTID_LENGTH), 
        !1;
        if (e && ("object" != typeof e || Array.isArray(e)) && "string" != typeof e) return o().e("please check trackEvent properties. properties should be string or object(not include Array)"), 
        !1;
        if ("object" == typeof e) {
            var s = 0;
            for (var u in e) if ({}.hasOwnProperty.call(e, u)) {
                if (u.length > a.MAX_PROPERTY_KEY_LENGTH) return o().e("The maximum length of property key shall not exceed " + a.MAX_PROPERTY_KEY_LENGTH), 
                !1;
                if (s >= a.MAX_PROPERTY_KEYS_COUNT) return o().e("The maximum count of properties shall not exceed " + a.MAX_PROPERTY_KEYS_COUNT), 
                !1;
                if (i[u]) return o().e("属性中的key不能与以下保留字冲突: " + r.join(",")), !1;
                s += 1;
            }
        }
        return !0;
    };
    var a = n(27);
    e.deleteInfo = function(t, e) {
        return a(e, function(e) {
            delete t[e];
        }), t;
    }, e.checkEmptyObj = function(t) {
        return "object" != typeof t || 0 === Object.keys(t).length;
    }, e.DataType = {
        HALF_SESSION: "half_session",
        CLOSE_SESSION: "close_session",
        EKV: "ekv",
        ENTER_PAGE: "enter_page",
        LEAVE_PAGE: "leave_page"
    }, e.AccessType = {
        MOBILE_NETWORK_2G: "2g",
        MOBILE_NETWORK_3G: "3g",
        MOBILE_NETWORK_4G: "4g",
        MOBILE_NETWORK_NONE: "none"
    };
}, function(t, e) {
    var n = "[APLUS] -- ";
    t.exports = function() {
        function t() {
            this.setDebug = function(t) {
                a = t;
            }, this.d = function() {
                if (a) try {
                    "string" == typeof arguments[0] && (arguments[0] = n + arguments[0]), console.debug.apply(console, arguments);
                } catch (t) {}
            }, this.i = function() {
                try {
                    if (a) try {
                        "string" == typeof arguments[0] && (arguments[0] = n + arguments[0]), console.info.apply(console, arguments);
                    } catch (t) {}
                } catch (t) {}
            }, this.e = function() {
                if (a) try {
                    "string" == typeof arguments[0] && (arguments[0] = n + arguments[0]), console.error.apply(console, arguments);
                } catch (t) {}
            }, this.w = function() {
                if (a) try {
                    "string" == typeof arguments[0] && (arguments[0] = n + arguments[0]), console.warn.apply(console, arguments);
                } catch (t) {}
            }, this.v = function() {
                if (a) try {
                    "string" == typeof arguments[0] && (arguments[0] = n + arguments[0]), console.log.apply(console, arguments);
                } catch (t) {}
            }, this.t = function() {
                if (a) try {
                    console.table.apply(console, arguments);
                } catch (t) {}
            }, this.tip = function() {
                try {
                    "string" == typeof arguments[0] && (arguments[0] = n + arguments[0]), console.log.apply(console, arguments);
                } catch (t) {}
            }, this.tip_w = function(t) {
                try {
                    console.log("%c " + n + t, "background:red; padding: 4px; padding-right: 8px; border-radius: 4px; color: #fff;");
                } catch (t) {}
            }, this.err = function() {
                try {
                    "string" == typeof arguments[0] && (arguments[0] = n + arguments[0]), console.error.apply(console, arguments);
                } catch (t) {}
            }, this.repeat = function(t) {
                for (var e = t; e.length < 86; ) e += t;
                return e;
            };
        }
        var e = null, a = !1;
        return function() {
            return null === e && (e = new t()), e;
        };
    }();
}, function(t, e) {
    function n(t, e) {
        var n = a(t, e);
        return t && t.id_tracking && (n[e.id_tracking || "id_tracking"] = a(t.id_tracking, s)), 
        n;
    }
    function a(t, e) {
        var n = {};
        for (var a in t) e[a] ? n[e[a]] = t[a] : n[a] = t[a];
        return n;
    }
    function o(t, e) {
        var n = {};
        if (t) for (var a in t) t[a] && (n[e[a]] = t[a]);
        return n;
    }
    var r = {
        ekvs: "e",
        active_user: "active_user"
    }, i = {
        sdk_type: "sdt",
        device_model: "dm",
        language: "lang",
        device_type: "dt",
        os_version: "ov",
        appkey: "ak",
        sdk_version: "sv",
        resolution: "rl",
        testToken: "ttn",
        pixel_ratio: "pr",
        _id: "id",
        id_type: "it",
        id_tracking: "itr",
        imprint: "imp",
        debugId: "dk"
    }, s = {
        uuid: "ud",
        unionid: "und",
        openid: "od",
        anonymousid: "nd",
        alipay_id: "ad",
        device_id: "dd",
        userid: "puid"
    };
    t.exports = function(t) {
        return {
            h: n(t.header, i),
            a: o(t.analytics, r)
        };
    };
}, function(t, e) {
    var n = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", a = function(t) {
        for (var e = {}, n = 0, a = t.length; n < a; n++) e[t.charAt(n)] = n;
        return e;
    }(n), o = String.fromCharCode, r = function(t) {
        var e;
        return t.length < 2 ? (e = t.charCodeAt(0), e < 128 ? t : e < 2048 ? o(192 | e >>> 6) + o(128 | 63 & e) : o(224 | e >>> 12 & 15) + o(128 | e >>> 6 & 63) + o(128 | 63 & e)) : (e = 65536 + 1024 * (t.charCodeAt(0) - 55296) + (t.charCodeAt(1) - 56320), 
        o(240 | e >>> 18 & 7) + o(128 | e >>> 12 & 63) + o(128 | e >>> 6 & 63) + o(128 | 63 & e));
    }, i = /[\uD800-\uDBFF][\uDC00-\uDFFFF]|[^\x00-\x7F]/g, s = function(t) {
        return t.replace(i, r);
    }, u = function(t) {
        var e = [ 0, 2, 1 ][t.length % 3], a = t.charCodeAt(0) << 16 | (t.length > 1 ? t.charCodeAt(1) : 0) << 8 | (t.length > 2 ? t.charCodeAt(2) : 0), o = [ n.charAt(a >>> 18), n.charAt(a >>> 12 & 63), e >= 2 ? "=" : n.charAt(a >>> 6 & 63), e >= 1 ? "=" : n.charAt(63 & a) ];
        return o.join("");
    }, c = function(t) {
        return t.replace(/[\s\S]{1,3}/g, u);
    }, l = function(t) {
        return c(s(t));
    }, p = function(t, e) {
        return e ? l(String(t)).replace(/[+\/]/g, function(t) {
            return "+" == t ? "-" : "_";
        }).replace(/\=/g, "") : l(String(t));
    }, g = new RegExp([ "[À-ß][-¿]", "[à-ï][-¿]{2}", "[ð-÷][-¿]{3}" ].join("|"), "g"), f = function(t) {
        switch (t.length) {
          case 4:
            var e = (7 & t.charCodeAt(0)) << 18 | (63 & t.charCodeAt(1)) << 12 | (63 & t.charCodeAt(2)) << 6 | 63 & t.charCodeAt(3), n = e - 65536;
            return o((n >>> 10) + 55296) + o((1023 & n) + 56320);

          case 3:
            return o((15 & t.charCodeAt(0)) << 12 | (63 & t.charCodeAt(1)) << 6 | 63 & t.charCodeAt(2));

          default:
            return o((31 & t.charCodeAt(0)) << 6 | 63 & t.charCodeAt(1));
        }
    }, d = function(t) {
        return t.replace(g, f);
    }, _ = function(t) {
        var e = t.length, n = e % 4, r = (e > 0 ? a[t.charAt(0)] << 18 : 0) | (e > 1 ? a[t.charAt(1)] << 12 : 0) | (e > 2 ? a[t.charAt(2)] << 6 : 0) | (e > 3 ? a[t.charAt(3)] : 0), i = [ o(r >>> 16), o(r >>> 8 & 255), o(255 & r) ];
        return i.length -= [ 0, 0, 2, 1 ][n], i.join("");
    }, h = function(t) {
        return t.replace(/[\s\S]{1,4}/g, _);
    }, m = function(t) {
        return d(h(t));
    }, v = function(t) {
        return m(String(t).replace(/[-_]/g, function(t) {
            return "-" == t ? "+" : "/";
        }).replace(/[^A-Za-z0-9\+\/]/g, ""));
    };
    e.encode = p, e.decode = v;
}, function(t, e) {
    e.stringfy = function(t) {
        if (t) try {
            return JSON.stringify(t);
        } catch (t) {}
        return "";
    }, e.parse = function(t) {
        if (t) try {
            return JSON.parse(t);
        } catch (t) {}
        return null;
    }, e.parseToArray = function(t) {
        if (t) try {
            return JSON.parse(t);
        } catch (t) {}
        return [];
    };
}, function(t, e, n) {
    var a = n(2);
    t.exports = function(t, e) {
        if ("string" != typeof t) return null;
        var n = Object.create(null);
        n.id = t, e && e.ts || (n.ts = Date.now());
        var o = typeof e;
        if ("object" === o) for (var r in e) ({}).hasOwnProperty.call(e, r) && (n[r] = e[r]);
        var i = a.getGlobalValue("aplus"), s = i.getMetaInfo("globalproperty");
        return s && (n.gp = s), n;
    };
}, function(t, e, n) {
    function a(t, e) {
        if (!t) return "";
        var n = [];
        for (var a in e) n.push(a + "=" + e[a]);
        var o = n.join("&");
        return o ? t + "?" + o : t;
    }
    var o = n(2), r = "", i = {};
    e.getCurrentPagePath = function() {
        return r;
    }, e.setCurrentPath = function(t) {
        t && (r = t);
    }, e.getPageQuery = function(t) {
        if (t) return i[t];
    }, e.setPageQuery = function(t, e) {
        t && (i[t] = e);
    }, e.getFullPath = function(t) {
        return a(r, i[t]);
    }, e.getPageName = function(t) {
        var e = o.getGlobalValue("aplus"), n = e.getMetaInfo("pageConfig"), a = t || r;
        try {
            if (n && "object" == typeof n) for (var i in n) {
                if (i === a) break;
                if (n[i] && n[i].regRule) {
                    a = n[i].regRule.test(t) ? i : a;
                    break;
                }
            }
        } catch (t) {}
        return n[a];
    }, e.getPageCode = function(t) {
        return (this.getPageName(t) || {}).pageName;
    }, e.getVTRealtimeCode = function() {
        if (r) {
            var t = i[r] || {}, e = /^\$vt_/, n = decodeURIComponent(t.scene);
            return n && e.test(n) && n.replace(e, "");
        }
    };
}, function(t, e, n) {
    "use strict";
    var a = n(3), o = {
        base: 1e4,
        timeout: 1e4
    }, r = function(t, e, n, r) {
        /^\/\//.test(t) && (t = a.HTTPS + t);
        var i = !0, s = r && r.timeout ? r.timeout : o.timeout;
        setTimeout(function() {
            i && (i = !1, n({
                timeout: s
            }));
        }, s), window.fetch(t).then(function(t) {
            return /application\/json/.test(t.headers.get("content-type")) ? t.json() : t.text();
        }).then(function(t) {
            i && (e(t), i = !1);
        }).catch(function(t) {
            i && n(t);
        });
    }, i = function(t, e, n, a) {
        var r, i = "GET", s = function() {
            r.responseText ? e(r.responseText) : n();
        }, u = window.XMLHttpRequest && "withCredentials" in new XMLHttpRequest();
        u ? (r = new XMLHttpRequest(), r.open(i, t, !0)) : (r = new window.XDomainRequest(), 
        r.open(i, t));
        var c = a && a.timeout ? a.timeout : o.timeout;
        r.timeout = c, r.onload = s, r.onerror = n, r.ontimeout = n, r.send();
    }, s = function(t, e, n, a) {
        window.fetch ? r(t, e, n, a) : i(t, e, n, a);
    }, u = function(t, e) {
        t = t || {}, t.method = (t.method || "POST").toUpperCase(), t.url = t.url || "", 
        t.data = t.data || null, t.success = t.success || function() {}, t.error = t.error || function() {};
        var n = new XMLHttpRequest(), a = [];
        for (var o in t.data) a.push(o + "=" + encodeURIComponent(t.data[o]));
        var r = a.join("&"), i = JSON.stringify(t.data || {});
        "POST" === t.method ? (n.open(t.method, t.url, !0), n.setRequestHeader("Content-Type", e || "application/json")) : "GET" === t.method && n.open(t.method, t.url + "?" + r, !0), 
        n.withCredentials = !0, n.timeout = 3e3, n.onreadystatechange = function() {
            if (4 == n.readyState && 200 == n.status) {
                var e = {};
                try {
                    e = JSON.parse(n.responseText);
                } catch (t) {}
                t.success(e);
            } else 4 == n.readyState && t.error(n.staus);
        }, "POST" === t.method ? n.send(i) : n.send();
    };
    e.request = s, e.request4um = u;
}, function(t, e, n) {
    "use strict";
    var a = n(27);
    t.exports = function() {
        return {
            getLogConfig: function() {
                var t = {}, e = this.options.config.plugins;
                for (var n in e) t[n] = {
                    plugins: e[n],
                    context: {}
                }, a(e[n], function(e) {
                    t[n].context[e.name] = e.config || {};
                });
                return t;
            },
            run: function() {
                this.options.context.logConfig = this.getLogConfig(), this.options.context.logConfig.pageLoadTime = this.options.context.PAGE_LOAD_TIME;
            }
        };
    };
}, function(t, e, n) {
    "use strict";
    var a = n(53), o = n(23), r = n(56), i = n(57), s = n(2), u = n(21);
    t.exports = function() {
        var t = n(58);
        return {
            init: function(t) {
                this.options = t;
                var e = this.options.context.etag || {};
                this.cna = e.cna || a.getCookieCna("cna"), this.setTag(0), this.setStag(-1), this.setLsTag("-1"), 
                this.setEtag(this.cna || ""), this.requesting = !1, this.today = r.getFormatDate();
            },
            setLsTag: function(t) {
                this.lstag = t, this.options.context.etag.lstag = t;
            },
            setTag: function(t) {
                this.tag = t, this.options.context.etag.tag = t;
            },
            setStag: function(t) {
                this.stag = t, this.options.context.etag.stag = t;
            },
            setEtag: function(t) {
                this.etag = t, this.options.context.etag.cna = t, a.getCookieCna("cna") !== t && a.setCookieCna("cna", t, {
                    SameSite: "none"
                });
            },
            setLscnaStatus: function(t) {
                this.options.context.etag.lscnastatus = t;
            },
            run: function(e, n) {
                var a = this, r = s.getGlobalValue("aplus");
                if (a.cna) return void a.setTag(1);
                var c = null, l = r._$.meta_info["aplus-rhost-v"];
                if (l) {
                    this.options.context.etag.egUrl = l + "/eg.js";
                    var p = i.getUrl(this.options.context.etag || {});
                    a.requesting = !0;
                    var g = function() {
                        setTimeout(function() {
                            n();
                        }, 20), clearTimeout(c);
                    }, f = this.options.context.etag.unittest, d = f || t.loadScript;
                    d(p, function(t) {
                        var e, n;
                        if (t && "error" === t.type ? a.setStag(-3) : (e = s.getGoldlogVal("Etag"), e && a.setEtag(e), 
                        n = s.getGoldlogVal("stag"), "undefined" != typeof n && a.setStag(n)), a.requesting) {
                            var i = r.globalConfig || {};
                            if (2 === n || 4 === n) {
                                var u = o.getLsCna(i.ETAG_STORAGE_KEY);
                                u ? (a.setLsTag(1), a.setEtag(u)) : (a.setLsTag(0), o.setLsCna(i.ETAG_STORAGE_KEY, a.today, e));
                            }
                            g();
                        }
                    });
                    var _ = r.getMetaInfo("aplus-etag-timeout"), h = 200, m = h;
                    try {
                        m = parseInt(_), (u.isNaN(m) || m < 200) && (m = h);
                    } catch (t) {}
                    return c = setTimeout(function() {
                        a.requesting = !1, a.setStag(-2), n();
                    }, m), m;
                }
            }
        };
    };
}, function(t, e, n) {
    "use strict";
    function a(t) {
        if (!document) return "";
        var e = document.cookie.match(new RegExp("(?:^|;)\\s*" + t + "=([^;]+)"));
        return e ? e[1] : "";
    }
    function o(t) {
        var e = new Date(), n = "";
        if ("session" === t.expires) ; else if (t.expires && ("number" == typeof t.expires || t.expires.toUTCString)) "number" == typeof t.expires ? e.setTime(e.getTime() + 24 * t.expires * 60 * 60 * 1e3) : e = t.expires, 
        n = "expires=" + e.toUTCString(); else {
            var a = 20;
            c.indexof([ "v.youku.com", "www.youku.com", "player.youku.com" ], location.hostname) > -1 && (a = 1), 
            e.setTime(e.getTime() + 365 * a * 24 * 60 * 60 * 1e3), n = "expires=" + e.toUTCString();
        }
        return n;
    }
    function r(t, e, n) {
        if (document) {
            n || (n = {}), e += ";" + (n.expires || o(n)), e += "; path=" + (n.path ? n.path : "/"), 
            e += "; domain=" + n.domain, document.cookie = t + "=" + e;
            var r = 0;
            try {
                var i = navigator.userAgent.match(/Chrome\/\d/);
                i && i[0] && (r = i[0].split("/")[1], r && (r = parseInt(r)));
            } catch (t) {}
            return n.SameSite && r >= 8 && (e += "; SameSite=" + n.SameSite, e += "; Secure", 
            document.cookie = t + "=" + e), a(t);
        }
    }
    function i(t, e, n) {
        try {
            if (!document) return "";
            if (n || (n = {}), n.domain) r(t, e, n); else for (var a = u.getDomains(), o = 0; o < a.length; ) n.domain = a[o], 
            r(t, e, n) ? o = a.length : o++;
        } catch (t) {}
    }
    var s = n(27), u = n(54), c = n(55);
    e.getCookie = a, e.trySetCookie = r, e.setCookie = i;
    var l = [ "tracknick", "thw", "cna" ];
    e.getData = function() {
        var t = {};
        if (s(l, function(e) {
            t[e] = a(e);
        }), location) {
            var e = location.hostname;
            t.cnaui = /\btanx\.com$/.test(e) ? a("cnaui") : "";
        }
        return t;
    }, e.getHng = function() {
        return encodeURIComponent(a("hng") || "");
    }, e.getCookieCna = function(t) {
        return a(t) || a("_" + t);
    }, e.setCookieCna = function(t, e, n) {
        for (var a = u.getDomains(), i = 0; i < a.length; ) if (n.domain = a[i], r(t, e, n)) i = a.length; else {
            if (i === a.length - 1) {
                var s = e + ";" + o(n);
                s += "; path=/", document.cookie = "_" + t + "=" + s;
            }
            i++;
        }
    };
}, function(t, e) {
    "use strict";
    e.getDomains = function() {
        var t = [];
        try {
            for (var e = location.hostname, n = e.split("."), a = 2; a <= n.length; ) t.push(n.slice(n.length - a).join(".")), 
            a++;
        } catch (t) {}
        return t;
    };
}, function(t, e) {
    "use strict";
    e.indexof = function(t, e) {
        var n = -1;
        try {
            n = t.indexOf(e);
        } catch (o) {
            for (var a = 0; a < t.length; a++) t[a] === e && (n = a);
        } finally {
            return n;
        }
    }, e.itemMatch = function(t, e) {
        var n = !1;
        try {
            if (!this.isArray(t)) return n;
            n = t.some(function(t) {
                return t && t.length > 0 && e.indexOf(t) !== -1;
            });
        } catch (o) {
            for (var a = 0; a < t.length; a++) if (e.indexOf(t[a]) !== -1) {
                n = !0;
                break;
            }
        }
        return n;
    }, e.isArray = function(t) {
        return Array.isArray ? Array.isArray(t) : /Array/.test(Object.prototype.toString.call(t));
    };
}, function(t, e) {
    "use strict";
    function n(t, e, n) {
        var a = "" + Math.abs(t), o = e - a.length, r = t >= 0;
        return (r ? n ? "+" : "" : "-") + Math.pow(10, Math.max(0, o)).toString().substr(1) + a;
    }
    e.getFormatDate = function(t) {
        var e = new Date();
        try {
            return [ e.getFullYear(), n(e.getMonth() + 1, 2, 0), n(e.getDate(), 2, 0) ].join(t || "");
        } catch (t) {
            return "";
        }
    };
}, function(t, e, n) {
    "use strict";
    var a = n(23);
    e.getUrl = function(t) {
        var e = a.getUrl(t && t.egUrl);
        if (0 !== e.indexOf("http")) {
            var n = "https:";
            /(\d+\.){3,}\d+/.test(e) && (n = "http:"), e = n + e;
        }
        return e;
    };
}, function(t, e, n) {
    "use strict";
    function a() {
        return i || (i = document.getElementById("beacon-aplus") || document.getElementById("tb-beacon-aplus")), 
        i;
    }
    function o(t) {
        var e = a(), n = s.tryToGetAttribute(e, "cspx");
        t && n && (t.nonce = n);
    }
    var r, i, s = n(28), u = n(3);
    e.getCurrentNode = a, e.addScript = function(t, e, n) {
        var i = "script", s = document.createElement(i);
        s.type = "text/javascript", s.async = !0;
        var c = a(), l = c && c.hasAttribute("crossorigin");
        l && (s.crossOrigin = "anonymous");
        var p = u.HTTPS === location.protocol ? e || t : t;
        0 === p.indexOf("//") && (p = u.HTTPS + p), s.src = p, n && (s.id = n), o(s);
        var g = document.getElementsByTagName(i)[0];
        r = r || document.getElementsByTagName("head")[0], g ? g.parentNode.insertBefore(s, g) : r && r.appendChild(s);
    }, e.loadScript = function(t, e) {
        function n(t) {
            a.onreadystatechange = a.onload = a.onerror = null, a = null, e(t);
        }
        var a = document.createElement("script");
        if (r = r || document.getElementsByTagName("head")[0], a.async = !0, "onload" in a) a.onload = n; else {
            var i = function() {
                /loaded|complete/.test(a.readyState) && n();
            };
            a.onreadystatechange = i, i();
        }
        a.onerror = function(t) {
            n(t);
        }, a.src = t, o(a), r.appendChild(a);
    }, e.isTouch = function() {
        return "ontouchend" in document.createElement("div");
    };
}, function(t, e, n) {
    "use strict";
    var a = n(2), o = n(3);
    t.exports = function() {
        return {
            getMetaInfo: function() {
                var t = a.getGoldlogVal("_$") || {}, e = t.meta_info;
                return e;
            },
            getAplusWaiting: function() {
                var t = this.getMetaInfo() || {};
                return t["aplus-waiting"];
            },
            run: function(t, e) {
                var n = this.options.config || {}, a = this.getAplusWaiting();
                if (a && n.is_auto) switch (a = this.getAplusWaiting() + "", this.options.context.when_to_sendpv = {
                    aplusWaiting: a
                }, a) {
                  case o._USER_ID:
                  case o._ANONY_ID:
                  case "MAN":
                    return "done";

                  case "1":
                    return this.options.context.when_to_sendpv.isWait = !0, setTimeout(function() {
                        e();
                    }, 6e3), 6e3;

                  default:
                    var r = 1 * a;
                    if (r + "" != "NaN") return this.options.context.when_to_sendpv.isWait = !0, setTimeout(function() {
                        e();
                    }, r), r;
                }
            }
        };
    };
}, function(t, e, n) {
    "use strict";
    var a = n(61), o = n(2), r = n(26), i = "POST", s = "GET";
    t.exports = function() {
        return {
            getMetaInfo: function() {
                var t = o.getGoldlogVal("_$") || {}, e = t.meta_info;
                return e;
            },
            getAplusMetaByKey: function(t) {
                var e = this.getMetaInfo() || {};
                return e[t];
            },
            getRhost: function() {
                var t = this.getAplusMetaByKey("aplus-rhost-v");
                return t;
            },
            getHjljHostUrl: function(t) {
                var e = /^\/\//.test(t) ? "" : "//", n = "/web_logs", a = e + t + n;
                return a;
            },
            getPvHostUrl: function(t) {
                var e = /^\/\//.test(t) ? "" : "//", n = /\/$/.test(t) ? "" : "/", o = "v.gif";
                return a.isMobile() && (o = "m.gif"), e + t + n + o;
            },
            getHostUrl: function(t) {
                var e = /^\/\//.test(t) ? "" : "//", n = "/web_logs", a = e + t + n;
                return a;
            },
            getChannel: function(t) {
                var e, n = this.getAplusMetaByKey("aplus-channel"), a = [ "WS", "WS-ONLY", s, i ];
                return a.indexOf(t) > -1 && (e = t), !e && a.indexOf(n) > -1 && (e = n), e;
            },
            run: function() {
                var t = o.getGlobalValue("aplus"), e = !!this.options.context.is_single;
                if (!e) {
                    var n = this.options.config.recordType, a = this.getRhost(n);
                    if (!a) return r.logger({
                        msg: "current request domain invalid, please check your aplus-rhost-v value inside metainfo!"
                    }), "done";
                    var u;
                    u = "PV" !== n || t._h5_share_enable ? this.getHjljHostUrl(a) : this.getPvHostUrl(a);
                    var c = this.options.config || {}, l = this.getChannel(c.method) || i;
                    l !== i || navigator && navigator.sendBeacon || (l = s), this.options.context.where_to_send.method = c.method, 
                    this.options.context.where_to_send.url = u;
                }
            }
        };
    };
}, function(t, e) {
    "use strict";
    e.isMobile = function() {
        var t = navigator ? navigator.userAgent : "", e = /AliApp|Yunos|cyclone/i.test(t), n = /iPhone|iPad|iPod/i.test(t), a = /Android/i.test(t), o = /Windows Phone/i.test(t) || /IEMobile/i.test(t) || /WPDesktop/i.test(t), r = /BlackBerry/i.test(t), i = /Opera Mini/i.test(t);
        return e || n || a || o || r || i;
    };
}, function(t, e, n) {
    "use strict";
    var a = n(53), o = n(26), r = n(63), i = n(21), s = n(61), u = n(2), c = n(3), l = n(65);
    t.exports = function() {
        return {
            getCommonParams: function() {
                var t = u.getGlobalValue("aplus"), e = this.options.context || {}, n = e.etag || {}, p = e.userdata || {}, g = u.getGoldlogVal("_$") || {}, f = this.options.config || {}, d = s.isMobile() ? "WAP" : "PC", _ = {
                    _dev_id: t.getMetaInfo("_dev_id"),
                    _anony_id: t.getMetaInfo(c._ANONY_ID),
                    _user_id: t.getMetaInfo(c._USER_ID),
                    _user_nick: t.getMetaInfo("_user_nick") || a.getCookie("tracknick"),
                    _session_id: t.getMetaInfo("_session_id")
                }, h = f.pageUrl || (location ? location.href : "-"), m = f.title || document && document.title, v = (t.globalConfig.isDecodeUrl ? "DC_" : "") + r.getLogId(h, m), y = t.getMetaInfo("appKey") || t.getMetaInfo("appId");
                y || o.logger({
                    msg: "please set appId in aplus metaInfo before sendPV!"
                });
                var b = i.assign({
                    appId: y,
                    cache: v,
                    cna: n.cna || a.getCookieCna("cna"),
                    etag: n,
                    pre: g.page_referrer || "-",
                    sdk_info: {
                        jsver: t.globalConfig.script_name,
                        lver: t.globalConfig.lver,
                        customSdkId: t.getMetaInfo("customSdkId") || "",
                        platformType: d.toLowerCase()
                    },
                    trackerEventCode: f.trackerEventCode,
                    title: m,
                    url: h,
                    client: t._aplus_client || {},
                    timeZone: l.getTimeZone(),
                    gokey: _,
                    gmkey: p.gmkey || "",
                    method: this.options.context.where_to_send.method
                }, _);
                return b;
            },
            getPvParams: function() {
                var t = this.getCommonParams(), e = u.getGlobalValue("aplus");
                return this.options.config.is_auto || (t.sdk_info.mansndlog = 1), i.assign(t, {
                    event_code: "2001",
                    logtype: "1",
                    logkey: s.isMobile() ? "/m.gif" : "/v.gif",
                    event_timestamp: e._$.send_pv_count > 0 ? new Date() : e.logConfig.pageLoadTime,
                    is_auto: this.options.config.is_auto
                });
            },
            getHjljParams: function() {
                var t = this.options.context || {}, e = t.userdata || {}, n = {
                    event_code: c.EVENT_ID_MAP[e.gmkey] || c.OTHER,
                    logtype: "2",
                    logkey: e.logkey,
                    event_timestamp: new Date()
                };
                return i.assign(this.getCommonParams(), n);
            },
            run: function() {
                var t = {};
                t = "PV" === this.options.config.recordType ? this.getPvParams() : this.getHjljParams(), 
                this.options.context.what_to_send.logdata = t;
            }
        };
    };
}, function(t, e, n) {
    "use strict";
    function a(t, e, n) {
        return t ? o.hash(encodeURIComponent(t)).substr(0, e) : n;
    }
    var o = n(64), r = function(t) {
        function e(t) {
            var e = "0123456789abcdefhijklmnopqrstuvwxyzABCDEFHIJKLMNOPQRSTUVWXYZ", n = "0123456789abcdefghijkmnopqrstuvwxyzABCDEFGHIJKMNOPQRSTUVWXYZ";
            return 1 == t ? e.substr(Math.floor(60 * Math.random()), 1) : 2 == t ? n.substr(Math.floor(60 * Math.random()), 1) : "0";
        }
        for (var n, a = "", o = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ", r = !1; a.length < t; ) n = o.substr(Math.floor(62 * Math.random()), 1), 
        !r && a.length <= 2 && ("g" == n.toLowerCase() || "l" == n.toLowerCase()) && (0 === a.length && "g" == n.toLowerCase() ? Math.random() < .5 && (n = e(1), 
        r = !0) : 1 == a.length && "l" == n.toLowerCase() && "g" == a.charAt(0).toLowerCase() && (n = e(2), 
        r = !0)), a += n;
        return a;
    };
    e.getLogId = function(t, e) {
        var n = r(8), o = n.substr(0, 4), i = n.substr(0, 6);
        return [ a(t, 4, o), a(e, 4, o), i ].join("");
    };
}, function(t, e) {
    "use strict";
    e.hash = function(t, e) {
        var n, a, o = 1315423911, r = e || o;
        for (n = t.length - 1; n >= 0; n--) a = t.charCodeAt(n), r ^= (r << 5) + a + (r >> 2);
        var i = (2147483647 & r).toString(16);
        return i;
    };
}, function(t, e) {
    e.getTimeZone = function() {
        var t = -new Date().getTimezoneOffset() / 60, e = "+";
        t < 0 && (e = "-");
        var n = Math.abs(parseInt(t)), a = Math.abs(parseInt(t) - t), o = "00";
        return a > 0 && (o = 60 * a), "GMT" + e + (n > 9 ? n : "0" + n) + ":" + o;
    };
}, function(t, e, n) {
    "use strict";
    var a = n(20), o = n(67), r = n(21), i = n(2);
    t.exports = function() {
        return {
            getUserdata: function() {
                var t = i.getGlobalValue("aplus"), e = this.options.config || {}, n = {};
                e && !e.is_auto && e.gokey && ("string" == typeof e.gokey ? n = a.param2obj(e.gokey) : "object" == typeof e.gokey && (n = e.gokey));
                var s = function(t) {
                    o(t) ? t.forEach(function(t) {
                        n = r.assign(n, t);
                    }) : n = r.assign(n, t);
                };
                s(t.getMetaInfo("aplus-globaldata")), s(t.getMetaInfo("aplus-cpvdata"));
                var u = this.options.context || {}, c = u.userdata || {};
                return s(c), n;
            },
            processLodashDollar: function() {
                var t = this.options.config || {}, e = i.getGoldlogVal("_$") || {};
                t && t.referrer && (e.page_referrer = t.referrer), i.setGoldlogVal("_$", e);
            },
            updatePre: function(t) {
                var e = i.getGoldlogVal("_$") || {};
                return e.page_referrer && (t.pre = e.page_referrer), t;
            },
            run: function() {
                var t = this.options.context.what_to_send.logdata, e = r.assign(this.getUserdata(), t.userdata || {});
                this.processLodashDollar(), t.gokey = r.assign(t.gokey, e), t = this.updatePre(t), 
                this.options.context.what_to_send.logdata = t, this.options.context.userdata = t.gokey;
            }
        };
    };
}, function(t, e) {
    "use strict";
    t.exports = function(t) {
        return Array.isArray ? Array.isArray(t) : /Array/.test(Object.prototype.toString.call(t));
    };
}, function(t, e, n) {
    "use strict";
    var a = n(69), o = n(70), r = n(2), i = n(22);
    t.exports = function() {
        return {
            getPageId: function() {
                var t = this.options.config || {}, e = this.options.context || {}, n = e.userdata || {};
                return t.page_id || t.pageid || t.pageId || n.page_id;
            },
            resetSpmB: function() {
                var t = r.getGlobalValue("aplus");
                if (t.spmAPI) {
                    var e = r.getGoldlogVal("_$") || {}, n = e.spm || {}, a = n.data.b;
                    if (a) {
                        var o = this.getPageId();
                        a = o ? a.split("/")[0] + "/" + o : a.split("/")[0], t.spmAPI && t.spmAPI.setB(a);
                        var i = n.spm_cnt.split(".");
                        i && i.length > 2 && (i[1] = a, n.spm_cnt = i.join("."));
                    }
                }
            },
            getExParamsInfo: function() {
                var t = a.getExParams();
                return this.options.context.what_to_send.logdata.exparams = t, o(t);
            },
            run: function() {
                this.resetSpmB();
                var t = this.options.context.what_to_send.logdata.gokey;
                t = i(this.getExParamsInfo(), t), this.options.context.what_to_send.logdata.gokey = t;
            }
        };
    };
}, function(t, e, n) {
    "use strict";
    function a(t) {
        for (var e, n = t.split("&"), a = 0, o = n.length, r = []; a < o; a++) e = n[a].split("="), 
        r.push([ e.shift(), e.join("=") ]);
        return r;
    }
    function o(t, e) {
        var n = "aplus&sidx=aplusSidex&ckx=aplusCkx", a = t || n;
        try {
            if (e) {
                var o = u.param2obj(e), r = [ d.APLUS, "cna", d.SPM_CNT, d.SPM_URL, d.SPM_PRE, "logtype", "pre", "uidaplus", "asid", "sidx", "trid", "gokey" ];
                s(r, function(t) {
                    o.hasOwnProperty(t) && (f.logger({
                        msg: "Can not inject keywords: " + t
                    }), delete o[t]);
                }), delete o[""];
                var i = "";
                if (t) {
                    var l = t.match(/aplus&/).index, p = l > 0 ? u.param2obj(t.substring(0, l)) : {};
                    delete p[""], i = u.obj2param(c.assign(p, o)) + "&" + t.substring(l, t.length);
                } else i = u.obj2param(o) + "&" + n;
                return i;
            }
            return a;
        } catch (t) {
            return a;
        }
    }
    function r() {
        var t = aplus && aplus._$ ? aplus._$ : {}, e = t.meta_info || {};
        return e["aplus-exparams"] || "";
    }
    function i() {
        var t = l.getCurrentNode(), e = p.tryToGetAttribute(t, "exparams"), n = o(e, r()) || "";
        return n && n.replace(/&amp;/g, "&").replace(/\buser(i|I)d=/, "uidaplus=");
    }
    var s = n(27), u = n(20), c = n(21), l = n(58), p = n(28), g = n(55), f = n(26), d = n(3);
    e.mergeExparams = o, e.getExParams = i, e.getExparamsInfos = function(t, e) {
        var n = {}, o = t || [ "uidaplus", "pc_i", "pu_i" ], r = i() || "";
        r = r.replace(/&aplus&/, "&");
        for (var s = a(r) || [], u = function(t) {
            return g.indexof(o, t) > -1;
        }, c = 0; c < s.length; c++) {
            var l = s[c], p = l[0] || "", f = l[1] || "";
            p && f && ("EXPARAMS" === e || u(p)) && (n[p] = f);
        }
        return n;
    };
}, function(t, e, n) {
    var a = n(20);
    t.exports = function(t) {
        var e = {};
        try {
            var n = a.param2obj(t.replace(/&amp;/g, "&").replace(/\buser(i|I)d=/, "uidaplus=").replace(/&aplus&/, "&"));
            n.uidaplus && (e.uidaplus = n.uidaplus), e.pc_i = n.pc_i, e.pu_i = n.pu_i;
        } catch (t) {
            console && console.log(t);
        }
        return e;
    };
}, function(t, e, n) {
    "use strict";
    function a(t) {
        var e, n, a, o, i = [], s = {};
        for (e = t.length - 1; e >= 0; e--) n = t[e], a = n[0], a && a.indexOf(r.s_plain_obj) == -1 && s.hasOwnProperty(a) || (o = n[1], 
        ("aplus" == a || o) && (i.unshift([ a, o ]), s[a] = 1));
        return i;
    }
    function o(t) {
        var e, n, a, o, i = [], u = {
            logtype: !0,
            cache: !0,
            scr: !0,
            "spm-cnt": !0
        };
        for (e = t.length - 1; e >= 0; e--) if (n = t[e], a = n[0], o = n[1], !(s.isStartWith(a, r.s_plain_obj) && !s.isStartWith(a, r.mkPlainKeyForExparams()) || u[a])) if (s.isStartWith(a, r.mkPlainKeyForExparams())) {
            var c = r.param2arr(o);
            if ("object" == typeof c && c.length > 0) for (var l = c.length - 1; l >= 0; l--) {
                var p = c[l];
                p && p[1] && i.unshift([ p[0], p[1] ]);
            }
        } else i.unshift([ a, o ]);
        return i;
    }
    var r = n(72), i = n(55), s = n(21), u = n(2), c = n(53), l = n(16), p = n(3);
    t.exports = function() {
        return {
            keyIsAvailable: function(t) {
                var e = [ "functype", "funcId", "spm-cnt", "spm-url", "spm-pre", "_ish5", "_is_g2u", "_h5url", "cna", "isonepage", "lver", "jsver" ];
                return i.indexof(e, t) === -1;
            },
            valIsAvailable: function(t) {
                return "object" != typeof t && "function" != typeof t;
            },
            upUtData: function(t, e) {
                var n = this;
                if (t = t ? t : {}, e && "object" == typeof e) for (var a in e) {
                    var o = e[a];
                    a && n.valIsAvailable(o) && n.keyIsAvailable(a) && (t[a] = o);
                }
                return t;
            },
            getToUtData: function() {
                var t = u.getGoldlogVal("_$") || {}, e = u.getGlobalValue(p.APLUS), n = t.spm || {}, i = this.options.context || {}, s = i.what_to_send || {}, g = s.logdata || {}, f = g.sdk_info || {}, d = this.options.context.etag || {}, _ = o(a(g.exparams || []));
                _ = r.arr2obj(_);
                var h = i.userdata, m = location.href, v = {}, y = l.getParamFromUrl("scm", m) || "";
                y && (v.scm = y);
                var b = l.getParamFromUrl("pg1stepk", m) || "";
                b && (v.pg1stepk = b);
                var E = l.getParamFromUrl("point", m) || "";
                E && (v.issb = 1), f && f.mansndlog && (v.mansndlog = f.mansndlog), v = this.upUtData(v, _), 
                v = this.upUtData(v, g.gokey), v = this.upUtData(v, h), v.functype = "page", v.funcId = "2001", 
                e && e.globalConfig && e.globalConfig.isAli ? v.url = (location.protocol || "https:") + "//" + location.host + location.pathname : v.url = location.href, 
                v._ish5 = "1", v._h5url = m, v._toUT = 2, v._bridgeName = "WindVane", v._bridgeVersion = "3.0.4", 
                n.spm_cnt && (v[p.SPM_CNT] = n.spm_cnt || ""), n.spm_url && (v[p.SPM_URL] = n.spm_url || ""), 
                n.spm_pre && (v[p.SPM_PRE] = n.spm_pre || ""), v.cna = d.cna || c.getCookieCna("cna"), 
                v.lver = f.lver, v.jsver = f.jsver, v.pver = "1.0.0", v.isonepage = -1;
                var I = e.getMetaInfo("aplus-utparam");
                return I && (v["utparam-cnt"] = JSON.stringify(I)), v._is_g2u_ = 1, v._slog = 1, 
                v;
            },
            run: function() {
                var t = this.options.context || {}, e = t.what_to_send || {};
                e.pvdataToUt = this.getToUtData(), this.options.context.what_to_send = e;
            }
        };
    };
}, function(t, e) {
    "use strict";
    function n(t) {
        var e, n, o, r = [], i = t.length;
        for (o = 0; o < i; o++) e = t[o][0], n = t[o][1], r.push(0 === e.indexOf(a) ? n : e + "=" + encodeURIComponent(n));
        return r.join("&");
    }
    var a = "::-plain-::";
    e.mkPlainKey = function() {
        return a + Math.random();
    }, e.s_plain_obj = a, e.mkPlainKeyForExparams = function(t) {
        var e = t || a;
        return e + "exparams";
    }, e.arr2param = n, e.param2arr = function(t) {
        for (var e, n = t.split("&"), a = 0, o = n.length, r = []; a < o; a++) e = n[a].split("="), 
        r.push([ e.shift(), e.join("=") ]);
        return r;
    }, e.arr2obj = function(t) {
        var e, n, a, o = {}, r = t.length;
        for (a = 0; a < r; a++) e = t[a][0], n = t[a][1], o[e] = n;
        return o;
    }, e.jsonLikeStr2JSON = function(t) {
        if (!t || "string" != typeof t) return {};
        for (var e = t.replace(/['"{}]+/g, ""), n = e.split(","), a = [], o = 0; o < n.length; o++) a.push(n[o].split(":"));
        var r = this.arr2obj(a);
        return r;
    }, e.can2https = function(t) {
        if (0 === t.indexOf("//")) {
            var e = "https:";
            /(\d+\.){3,}\d+/.test(t) && (e = "http:"), t = e + t;
        }
        return t;
    }, e.checkEmptyObj = function(t) {
        return "object" != typeof t || 0 === Object.keys(t).length;
    };
}, function(t, e, n) {
    "use strict";
    var a = n(21), o = n(43), r = n(3), i = n(2);
    t.exports = function() {
        return {
            getToNativeData: function() {
                var t = i.getGlobalValue(r.APLUS), e = this.options.context || {}, n = a.cloneDeep(e.userdata) || {}, s = e.what_to_send || {}, u = s.logdata || {}, c = u.sdk_info || {}, l = this.options.context.etag || {}, p = {}, g = {}, f = {};
                return g.cna = l.cna, g.lver = c.lver, g.jsver = c.jsver, g.id = r.PAGE_START, g.ts = Date.now(), 
                g.r = u.arg1 || u.logkey || "-", g.is_h5 = "1", n.hasOwnProperty("autosend") ? g.is_auto = 1 : g.is_auto = 0, 
                f = a.cloneDeep(o.deleteInfo(n, [ "_anony_id", "_dev_id", "_session_id", "_src_pos_id", "_user_id", "_user_nick" ])), 
                f.duration && (g.duration = f.duration, delete f.duration), f.page_start && (g.page_start = f.page_start, 
                delete f.page_start), u.url && (g.page_name = t.getPageName() || f.spmB || f.page_name || u.url || "-", 
                g.url = u.url || "-", g["spm-cnt"] = encodeURIComponent(g.page_name)), u.pre && (g.ref_url = u.pre || "-"), 
                f.ts && delete f.ts, p.sdkArgs = a.cloneDeep(g), p.cusp = f, p;
            },
            run: function() {
                var t = this.options.context || {}, e = t.what_to_send || {};
                e.pvdataToUmNative = this.getToNativeData(), this.options.context.what_to_send = e;
            }
        };
    };
}, function(t, e, n) {
    "use strict";
    var a = n(2);
    t.exports = function() {
        return {
            run: function() {
                var t = a.getGoldlogVal("_$") || {}, e = this.options.context.can_to_sendpv || {}, n = t.send_pv_count || 0, o = this.options.config || {};
                return o.is_auto && n > 0 ? "done" : (e.flag = "YES", this.options.context.can_to_sendpv = e, 
                t.send_pv_count = ++n, void a.setGoldlogVal("_$", t));
            }
        };
    };
}, function(t, e, n) {
    "use strict";
    var a = n(76), o = n(2);
    t.exports = function() {
        return {
            run: function() {
                var t = o.getGlobalValue("aplus"), e = t._$ || {}, n = this.options.context || {};
                o.setGoldlogVal("pv_context", n);
                var r = t.spm_ab || [], i = r.join("."), s = e.send_pv_count, u = {
                    cna: n.etag.cna,
                    count: s,
                    spmab_pre: t.spmab_pre
                };
                a.doPubMsg([ "sendPV", "complete", i, u ]), a.doCachePubs([ "sendPV", "complete", i, u ]);
            }
        };
    };
}, function(t, e, n) {
    "use strict";
    var a = n(2), o = "function", r = function() {
        var t = a.getGlobalValue("aplus"), e = t.aplus_pubsub || {}, n = typeof e.publish === o;
        return n ? e : "";
    };
    e.doPubMsg = function(t) {
        var e = r();
        e && typeof e.publish === o && e.publish.apply(e, t);
    }, e.doCachePubs = function(t) {
        var e = r();
        e && typeof e.cachePubs === o && e.cachePubs.apply(e, t);
    }, e.doSubMsg = function(t, e) {
        var n = r();
        n && typeof n.subscribe === o && n.subscribe(t, e);
    };
}, function(t, e, n) {
    "use strict";
    var a = n(20), o = n(67), r = n(21), i = n(2);
    t.exports = function() {
        return {
            getUserData: function() {
                var t = i.getGlobalValue("aplus"), e = this.options.context || {}, n = e.userdata || {}, s = e.what_to_send.logdata.gokey;
                s = r.assign(s, t.getMetaInfo("aplus-globaldata")), s = r.assign(s, a.param2obj(n.gokey));
                var u = t.getMetaInfo("aplus-exinfo");
                u && (s = r.assign(s, a.param2obj(u)));
                var c = t.getMetaInfo("aplus-exdata");
                return o(c) ? c.forEach(function(t) {
                    s = r.assign(s, t);
                }) : s = r.assign(s, t.getMetaInfo("aplus-exdata")), s;
            },
            run: function() {
                this.options.context.what_to_send.logdata.gokey = this.getUserData();
            }
        };
    };
}, function(t, e, n) {
    "use strict";
    var a = n(69), o = n(70), r = n(21);
    t.exports = function() {
        return {
            getExParamsInfo: function() {
                var t = a.getExParams();
                return this.options.context.what_to_send.logdata.exparams = t, o(t);
            },
            run: function() {
                var t = this.options.context.what_to_send.logdata.gokey;
                t = r.assign(this.getExParamsInfo(), t), this.options.context.what_to_send.logdata.gokey = t;
            }
        };
    };
}, function(t, e, n) {
    "use strict";
    var a = n(2), o = n(3);
    t.exports = function() {
        return {
            getToUtData: function() {
                var t = a.getGoldlogVal("_$") || {}, e = a.getGlobalValue(o.APLUS), n = t.spm || {}, r = this.options.context || {}, i = r.userdata || {}, s = r.etag || {}, u = r.what_to_send || {}, c = u.logdata || {}, l = c.sdk_info || {}, p = c.gokey || {}, g = [], f = "";
                for (var d in p) if ([ o.SPM_CNT, o.SPM_URL, o.SPM_PRE ].indexOf(d) === -1) {
                    var _ = p[d];
                    "undefined" !== p[d] && void 0 !== p[d] || (_ = ""), g.push(d + "=" + _);
                }
                g.length > 0 && (f = g.join("&"));
                var h = location.href, m = {};
                m.functype = "ctrl", m.funcId = c.event_code, e && e.globalConfig && e.globalConfig.isAli ? m.url = (location.protocol || "https:") + "//" + location.host + location.pathname : m.url = location.href, 
                m.logkey = c.logkey, m.gokey = encodeURIComponent(f), m.gmkey = c.gmkey, m._ish5 = "1", 
                m._h5url = h, m._is_g2u_ = 1, m._slog = 1, m._toUT = 2, m._bridgeName = "WindVane", 
                m._bridgeVersion = "3.0.4", n.spm_cnt && (m[o.SPM_CNT] = n.spm_cnt || ""), n.spm_url && (m[o.SPM_URL] = n.spm_url || ""), 
                n.spm_pre && (m[o.SPM_PRE] = n.spm_pre || ""), m.cna = s.cna, m.lver = l.lver, m.jsver = l.jsver, 
                i.hasOwnProperty("autosend") && (m.autosend = i.autosend);
                var v = e.getMetaInfo("aplus-utparam");
                return v && (m["utparam-cnt"] = JSON.stringify(v)), m;
            },
            run: function() {
                var t = this.options.context || {}, e = t.what_to_send || {};
                e.pvdataToUt = this.getToUtData(), this.options.context.what_to_send = e;
            }
        };
    };
}, function(t, e, n) {
    "use strict";
    var a = n(21), o = n(43), r = n(72), i = n(2), s = n(3);
    t.exports = function() {
        return {
            getToNativeData: function() {
                var t = i.getGlobalValue(s.APLUS), e = this.options.context || {}, n = e.userdata || {}, u = e.etag || {}, c = e.what_to_send || {}, l = c.logdata || {}, p = l.sdk_info || {}, g = {}, f = {}, d = {};
                f.cna = u.cna, f.lver = p.lver, f.jsver = p.jsver, f.id = n.logkey || "-", f.ts = Date.now(), 
                f.is_h5 = "1", f.funcId = l.event_code, n.gokey && "string" == typeof n.gokey && n.gokey.match("is_auto") ? f.is_auto = 1 : f.is_auto = 0, 
                d = "string" == typeof n.gokey ? r.arr2obj(r.param2arr(n.gokey || "")) : a.cloneDeep(o.deleteInfo(n.gokey, [ "_anony_id", "_dev_id", "_session_id", "_src_pos_id", "_user_id", "_user_nick" ])), 
                l.url && (f.page_name = t.getPageName() || d.spmB || d["data-pagename"] || d.page_name || l.url || "-", 
                f.url = l.url || "-", f.page_name && d.spmC && (f["spm-cnt"] = [ encodeURIComponent(f.page_name), encodeURIComponent(d.spmC), encodeURIComponent(d.spmD) ].filter(function(t) {
                    return !!t;
                }).join("."), delete d.spmC, delete d.spmB, delete d.spmD)), d.ts && delete d.ts;
                var _ = a.cloneDeep(d);
                for (var h in _) "string" == typeof h && o.startsWith(h, "_") && (f[h] = _[h], delete d[h]);
                return g.sdkArgs = a.cloneDeep(f), g.cusp = d, g;
            },
            run: function() {
                var t = this.options.context || {}, e = t.what_to_send || {};
                e.hjljdataToUmNative = this.getToNativeData(), this.options.context.what_to_send = e;
            }
        };
    };
}, function(t, e, n) {
    "use strict";
    t.exports = function() {
        return {
            run: function() {
                n(82)(this.options.context.logConfig);
            }
        };
    };
}, function(t, e, n) {
    "use strict";
    var a = n(76), o = n(2);
    t.exports = function(t) {
        var e = o.getGlobalValue("aplus");
        if (!e._aplus_api) {
            e._aplus_api = {
                status: "complete"
            };
            var r = n(83).run.create({
                logConfig: t
            });
            for (var i in r) e[i] = r[i];
            n(88).makePVId();
            var s = [ "aplusReady", "complete" ];
            a.doPubMsg(s), a.doCachePubs(s);
        }
    };
}, function(t, e, n) {
    "use strict";
    function a() {
        var t = 5e3;
        try {
            var e = p.getGlobalValue("aplus"), n = e.getMetaInfo("aplus-mmstat-timeout");
            if (n) {
                var a = parseInt(n);
                a >= 1e3 && a <= 1e4 && (t = a);
            }
        } catch (t) {}
        return t;
    }
    var o = document, r = n(11), i = n(53), s = n(32), u = n(26), c = n(76), l = n(21), p = n(2), g = n(10), f = n(3), d = n(39), _ = n(84), h = n(55), m = n(19), v = n(87), y = [], b = [], E = [], I = [], P = function() {};
    e.run = r.extend({
        beforeSendPV: function(t) {
            y.push(t);
        },
        send: function(t, e, n) {
            var o, r = p.getGlobalValue("aplus");
            if (0 === t.indexOf("//")) {
                var i = f.HTTPS;
                /(\d+\.){3,}\d+/.test(t) && (i = "http:"), t = i + t;
            }
            return o = "POST" === n && navigator && navigator.sendBeacon ? v.postData(t, e) : v.sendImg(t + "?" + e, a()), 
            r.req = o, o;
        },
        sendPV: function(t, e) {
            if (t = t || {}, l.any(y, function(e) {
                return e(n, t) === !1;
            })) return !1;
            var n = p.getGlobalValue("aplus"), a = n.getMetaInfo(f.APLUS_SKIP_APV_RULES) || [];
            if (!h.itemMatch(a, location.href) || !t.is_auto) {
                var o = new _();
                t.recordType = "PV";
                var r = n.globalConfig.isUM, i = n.globalConfig.isAli;
                (i || r) && (t.method = "POST");
                var s = n.logConfig.pv;
                return o.run({
                    plugins: s.plugins,
                    context: l.cloneDeep(s.context)
                }, {
                    config: t,
                    userdata: e,
                    pubsubType: "pv",
                    messageFnQueue: b,
                    middlewareMessageKey: "mw_change_pv"
                }), !0;
            }
        },
        pageEnter: function(t) {
            d.pushIntoGoldlogQueue(f.PUBLISH, [ f.PAGE_ENTER, t ]), d.pushIntoGoldlogQueue(f.CACHE_PUBS, [ f.PAGE_ENTER, t ]);
        },
        getParam: function(t) {
            var e = window.WindVane || {}, n = e && "function" == typeof e.getParam ? e.getParam(t) : "";
            return n;
        },
        beforeRecord: function(t) {
            E.push(t);
        },
        afterRecord: function(t) {
            I.push(t);
        },
        record: function(t, e, n, a, o) {
            var r = p.getGlobalValue("aplus"), i = r.globalConfig.isAli, s = r.globalConfig.isUM;
            if (t && 0 !== t.indexOf("/") && i && (t = "/" + t), l.any(E, function(t) {
                return t(r) === !1;
            })) return !1;
            var u = new _(), c = r.logConfig.hjlj;
            return u.run({
                plugins: c.plugins,
                context: l.cloneDeep(c.context)
            }, {
                config: {
                    recordType: "COMMON_HJLJ",
                    method: s ? a || "POST" : a
                },
                userdata: {
                    logkey: t,
                    gmkey: e,
                    gokey: n || {}
                },
                pubsubType: "hjlj",
                messageFnQueue: I,
                middlewareMessageKey: "mw_change_hjlj"
            }, function() {
                g(o) && o();
            }), !0;
        },
        recordUdata: function(t, e, n, a, o) {
            var r = p.getGlobalValue("aplus"), i = new _(), s = r.logConfig.hjlj, u = r.globalConfig.isAli;
            return i.run({
                plugins: s.plugins,
                context: l.cloneDeep(s.context)
            }, {
                config: {
                    recordType: "DATACLICK_HJLJ",
                    method: u ? a : a || "POST"
                },
                userdata: {
                    logkey: t,
                    gmkey: e,
                    gokey: n || {}
                },
                pubsubType: "hjlj",
                messageFnQueue: I,
                middlewareMessageKey: "mw_change_hjlj"
            }, function() {
                g(o) && o();
            }), !0;
        },
        setPageSPM: function(t, e, n) {
            var a = p.getGlobalValue("aplus"), o = a.getMetaInfo("aplus-spm-fixed"), r = "function" == typeof n ? n : function() {};
            a.spm_ab = a.spm_ab || [];
            var i = l.cloneDeep(a.spm_ab);
            t && (a.spm_ab[0] = "" + t, a._$.spm.data.a = "" + t), e && (a.spm_ab[1] = "" + e, 
            a._$.spm.data.b = "" + e);
            var s = m.qGet();
            if (a.spmAPI && a.spmAPI.spaInit(a, s, i), "1" !== o) {
                var u = i.join(".");
                a.spmab_pre = u;
            }
            var g = [ "setPageSPM", {
                spmab_pre: a.spmab_pre,
                spmab: a.spm_ab.join(".")
            } ];
            c.doPubMsg(g), c.doCachePubs(g), r();
        },
        setMetaInfo: function(t, e, n) {
            var a, o, r = "OVERWRITE", i = r;
            if ("object" == typeof t ? (a = t.metaName, o = t.metaValue, i = t.mode || r) : (a = t, 
            o = e), i !== r) return this.appendMetaInfo(a, o);
            if (m.setMetaInfo(a, o, n)) {
                var s = p.getGoldlogVal("_$") || {};
                s.meta_info = m.qGet();
                var u = p.setGoldlogVal("_$", s), l = [ "setMetaInfo", a, o, n ];
                return c.doPubMsg(l), c.doCachePubs(l), u;
            }
        },
        appendMetaInfo: m.appendMetaInfo,
        updatePageProperties: function(t) {
            var e = p.getGlobalValue("aplus");
            t && "object" == typeof t ? (t._page && (t.pageName = t._page, e.setMetaInfo("aplus-pagename", t.pageName), 
            delete t._page), e.appendMetaInfo("aplus-cpvdata", t)) : u.logger({
                msg: "warning: typeof updatePageProperties's params must be object"
            });
        },
        updateNextPageProperties: function(t) {
            var e = p.getGlobalValue("aplus");
            "object" == typeof t ? e.appendMetaInfo("aplus-nextpage-properties", t) : u.logger({
                msg: "warning: typeof updateNextPageProperties's params must be object"
            });
        },
        getMetaInfo: function(t) {
            return m.getMetaInfo(t);
        },
        on: s.on,
        cloneDeep: l.cloneDeep,
        setCookie: i.setCookie,
        getCookie: i.getCookie,
        pageAppear: P,
        pageDisappear: P,
        updatePageUtparam: P,
        updateNextPageUtparam: P,
        updateSessionProperties: function(t) {
            var e = p.getGlobalValue("aplus");
            "object" == typeof t && e.setMetaInfo("_session_args", t);
        },
        setPageName: function(t) {
            if (!t || "string" != typeof t) return void u.logger({
                msg: "setPageName failed:  pagename=" + t
            });
            var e = o.querySelector("body");
            try {
                e.setAttribute("data-pagename", t);
            } catch (t) {
                u.logger({
                    msg: "setPageName failed:  err=" + t
                });
            }
        },
        getPageName: function() {
            return window.document.body && window.document.body.dataset && window.document.body.dataset.pagename ? window.document.body.dataset.pagename : "";
        },
        getElementSPM: function(t) {
            if (t && t.dataset) return t.getAttribute("data-spm-anchor-id");
        }
    });
}, function(t, e, n) {
    "use strict";
    var a = n(27), o = n(2), r = n(10), i = n(76), s = n(26), u = n(3), c = n(85), l = n(86), p = function() {};
    p.prototype.run = function(t, e, n) {
        var p = new l();
        p.init({
            middleware: [],
            config: e.config,
            plugins: t.plugins
        });
        var g = p.run(), f = r(t.context) ? new t.context() : t.context;
        f.userdata = e.userdata, f.logger = s.logger;
        var d = {
            context: f,
            pubsub: o.getGoldlogVal("aplus_pubsub"),
            pubsubType: e && e.pubsubType
        }, _ = new c();
        _.create(d), _.wrap(g, function() {
            d.context.status = u.COMPLETE, e && (e.middlewareMessageKey && i.doPubMsg([ e.middlewareMessageKey, d.context ]), 
            e.messageFnQueue && a(e.messageFnQueue, function(e) {
                e(o.getGlobalValue(u.APLUS), t);
            })), r(n) && n(d.context);
        })();
    }, t.exports = p;
}, function(t, e, n) {
    "use strict";
    function a() {}
    var o = n(10), r = n(55), i = n(26);
    a.prototype.create = function(t) {
        for (var e in t) "undefined" == typeof this[e] && (this[e] = t[e]);
        return this;
    }, a.prototype.calledList = [], a.prototype.setCalledList = function(t) {
        r.indexof(this.calledList, t) === -1 && this.calledList.push(t);
    }, a.prototype.resetCalledList = function() {
        this.calledList = [];
    }, a.prototype.wrap = function(t, e) {
        var n = this, a = this.context || {}, s = a.compose || {}, u = s.maxTimeout || 1e4;
        return function(a) {
            var s, c = t.length, l = 0, p = 0, g = function(f, d) {
                if (l === c) return a = "done", n.resetCalledList(), o(e) && d !== a && e.call(n, a), 
                void clearTimeout(s);
                if (r.indexof(n.calledList, l) === -1) {
                    if (n.setCalledList && n.setCalledList(l), !(t && t[l] && o(t[l][0]))) return;
                    try {
                        a = t[l][0].call(n, a, function() {
                            l++, p = 1, g(l);
                        });
                    } catch (t) {
                        i.logger({
                            msg: t
                        });
                    }
                }
                var _ = "number" == typeof a;
                if ("pause" === a || _) {
                    p = 0;
                    var h = _ ? a : u, m = t[l] ? t[l][1] : "";
                    s = setTimeout(function() {
                        0 === p && (i.logger({
                            msg: "jump the middleware about " + m + ", because waiting timeout maxTimeout = " + h
                        }), a = null, l++, g(l));
                    }, h);
                } else "done" === a ? (l = c, g(l, a)) : (l++, g(l));
            };
            return n.calledList && n.calledList.length > 0 && n.resetCalledList(), g(l);
        };
    }, t.exports = a;
}, function(t, e, n) {
    "use strict";
    var a = n(22), o = n(26);
    t.exports = function() {
        return {
            init: function(t) {
                this.opts = t, t && "object" == typeof t.middleware && t.middleware.length > 0 ? this.middleware = t.middleware : this.middleware = [], 
                this.plugins_name = [];
            },
            pubsubInfo: function(t, e) {
                try {
                    var n = t.pubsub;
                    n && n.publish("plugins_change_" + t.pubsubType, e);
                } catch (t) {
                    o.logger({
                        msg: t
                    });
                }
            },
            run: function(t) {
                t || (t = 0);
                var e = this, n = this.middleware, o = this.opts || {}, r = o.plugins;
                if (r && "object" == typeof r && r.length > 0) {
                    var i = r[t];
                    if (this.plugins_name.push(i.name), n.push([ function(t, n) {
                        e.pubsubInfo(this, i);
                        var r = new i.path();
                        return r.init || (r.init = function(t) {
                            this.options = t;
                        }), r.init({
                            context: this.context,
                            config: a(i.config || {}, o.config)
                        }), r.run(t, function(t) {
                            setTimeout(function() {
                                n(i, t);
                            }, 1);
                        });
                    }, i.name ]), t++, r[t]) return this.run(t);
                }
                return n;
            }
        };
    };
}, function(t, e) {
    "use strict";
    e.sendImg = function(t, e) {
        var n = window || {}, a = new Image(), o = "_img_" + Math.random();
        n[o] = a;
        var r = function() {
            if (n[o]) try {
                delete n[o];
            } catch (t) {
                n[o] = void 0;
            }
        };
        return a.onload = function() {
            r();
        }, a.onerror = function() {
            r();
        }, setTimeout(function() {
            window[o] && (window[o].src = "", r());
        }, e || 5e3), a.src = t, a = null, t;
    }, e.postData = function(t, e) {
        return navigator.sendBeacon(t, e), t;
    };
}, function(t, e, n) {
    "use strict";
    function a() {
        var t, e = r.getGlobalValue("aplus");
        try {
            var n = e.getMetaInfo("aplus-disable-pvid") + "";
            "true" === n ? t = !0 : "false" === n && (t = !1);
        } catch (t) {}
        return t;
    }
    var o = n(76), r = n(2), i = n(63);
    e.isDisablePvid = a, e.makePVId = function() {
        var t = r.getGlobalValue("aplus"), e = t.pvid, n = location && location.href, s = document && document.title;
        t.pvid = i.getLogId(n, s);
        var u = [ "pvidChange", {
            pre_pvid: e,
            pvid: t.pvid
        } ];
        return o.doPubMsg(u), o.doCachePubs(u), a() ? "" : t.pvid;
    }, e.getPvId = function() {
        var t = r.getGlobalValue("aplus");
        return a() ? "" : t.pvid;
    };
}, function(t, e, n) {
    "use strict";
    var a = n(90), o = n(2);
    t.exports = function() {
        return {
            run: function() {
                var t = this.options.context.aplus_config, e = t.globalConfig.APLUS_QUEUE, n = o.getContext(), r = n[e] || [], i = a.getFormatQueue(r, "metaQueue");
                n[e] = i.queue, a.processGoldlogQueue(i.formatQueue, this.options.config);
            }
        };
    };
}, function(t, e, n) {
    function a() {
        var t = u.getGoldlogVal("_$") || {}, e = t.meta_info;
        return e;
    }
    function o() {
        var t = a() || {}, e = t.uaid + "";
        return "1" !== e || t._anony_id ? t._hold || t["aplus-waiting"] : "BLOCK";
    }
    function r(t) {
        var e = o(), n = a() || {}, r = !0, i = t.arguments || [], s = i[0], u = i[1], c = "START";
        if ("_hold" === s && u === c) return c;
        if ("_anony_id" === s && u) return c;
        if (t && /sendPV|record|setPageSPM|setMetaInfo|appendMetaInfo$/.test(t.action)) switch (e) {
          case "BLOCK":
            n[e] || (h.push(t), r = !1);
        }
        return r;
    }
    function i(t) {
        f(d, t), f(_, t), f(h, t);
    }
    function s(t, e) {
        return e && g.openAPIs.indexOf(t) > -1 && (t = "_" + t), t;
    }
    var u = n(2), c = n(55), l = n(10), p = n(26), g = n(3), f = function(t, e) {
        function n() {
            if (t && c.isArray(t) && t.length) {
                for (var n = v(t).queue, a = {}, o = []; a = n.shift(); ) m(a, e, function(t) {
                    o.push(t);
                });
                o.length > 0 && setTimeout(function() {
                    for (;a = o.shift(); ) m(a, e);
                }, 100);
            }
        }
        try {
            n();
        } catch (t) {
            p.logger({
                msg: t
            });
        }
    };
    e.processGoldlogQueue = f;
    var d = [], _ = [], h = [];
    e.subscribeAndProcessQueue = function(t, e) {
        var n = u.getGlobalValue(t);
        n.push({
            action: g.SUBSCRIBE,
            arguments: [ g.SET_META_INFO, function(t, n) {
                t === g._USER_ID && n ? f(d, e) : t === g._ANONY_ID && n ? f(_, e) : "_hold" === t && "START" === n && i(e);
            } ]
        });
    };
    var m = function(t, e, n) {
        var a = !!e.isOpenApi, o = t ? t.action : "", g = t ? t.arguments : "", f = r(t);
        if (f) {
            var d = u.getContext();
            try {
                if (o && g && c.isArray(g)) {
                    var _, h = o.split("."), m = d, v = d;
                    if (3 === h.length) m = d[h[0]][h[1]] || {}, _ = s(h[2], a), v = m[_] ? m[_] : ""; else for (;h.length; ) if (_ = s(h.shift(), a), 
                    v = m = m[_], !m) return void (l(n) && n(t));
                    l(v) && v.apply(m, g), "START" === f && i(e);
                }
            } catch (t) {
                p.logger({
                    msg: t
                });
            }
        }
    };
    e.processTask = m;
    var v = function(t, e) {
        for (var n = {
            subscribeMwChangeQueue: [],
            subscribeMetaQueue: [],
            subscribeQueue: [],
            metaQueue: [],
            othersQueue: []
        }, a = [], o = {}; o = t.shift(); ) try {
            var r = o.action, i = o.arguments[0];
            /subscribe/.test(r) ? "setMetaInfo" === i ? n.subscribeMetaQueue.push(o) : i === g.MW_CHANGE_PV || i === g.MW_CHANGE_HJLJ ? n.subscribeMwChangeQueue.push(o) : n.subscribeQueue.push(o) : /MetaInfo/.test(r) ? n.metaQueue.push(o) : n.othersQueue.push(o);
        } catch (t) {
            p.logger({
                msg: t
            }), n.othersQueue.push(o);
        }
        var s;
        return e && n[e] && (s = n[e], n[e] = []), a = n.subscribeMwChangeQueue.concat(n.metaQueue), 
        a = a.concat(n.subscribeQueue), a = a.concat(n.subscribeMetaQueue, n.othersQueue), 
        {
            queue: a,
            formatQueue: s
        };
    };
    e.getFormatQueue = v;
}, function(t, e, n) {
    "use strict";
    var a = n(23), o = n(58), r = n(57), i = n(25);
    t.exports = function() {
        return {
            run: function() {
                var t = this, e = this.options.context.aplus_config;
                if (i.test()) {
                    var n = a.getLsCna(e.globalConfig.ETAG_STORAGE_KEY, t.today);
                    n || setTimeout(function() {
                        var n = aplus._$.meta_info["aplus-rhost-v"];
                        if (n) {
                            t.options.context.etag.egUrl = n + "/eg.js";
                            var i = r.getUrl(t.options.context.etag || {});
                            o.loadScript(i, function(n) {
                                n && "error" !== n.type && a.setLsCna(e.globalConfig.ETAG_STORAGE_KEY, t.today, aplus.Etag);
                            });
                        }
                    }, 1e3);
                }
            }
        };
    };
}, function(t, e, n) {
    "use strict";
    var a = n(11), o = n(2), r = n(90), i = a.extend({
        push: function(t) {
            this.length++, r.processTask(t, this.opts);
        }
    });
    t.exports = function() {
        return {
            processAplusQueue: function(t) {
                var e = this.options.config || {}, n = o.getGlobalValue(t);
                r.processGoldlogQueue(n, e), o.setGlobalValue(t, i.create({
                    opts: e,
                    startLength: n.length,
                    length: 0
                }));
            },
            run: function() {
                var t = this.options.context.aplus_config, e = t.globalConfig.APLUS_QUEUE;
                this.processAplusQueue(e), "aplus_queue" === e && this.processAplusQueue("goldlog_queue"), 
                r.subscribeAndProcessQueue(e, this.options.config);
            }
        };
    };
}, function(t, e, n) {
    "use strict";
    var a = n(27), o = n(58), r = n(55);
    t.exports = function() {
        return {
            init: function(t) {
                this.options = t;
            },
            addStyle: function(t, e) {
                var n = t + "_style", a = document.getElementById(n);
                a || (a = document.createElement("link"), a.id = n, a.href = e, a.rel = "stylesheet", 
                a.type = "text/css", document.getElementsByTagName("head").item(0).appendChild(a));
            },
            run: function() {
                var t = this, e = parent !== self, n = this.options.config || {};
                !e && n.urlRules && a(n.urlRules, function(e) {
                    var n, i = new RegExp(e.rule);
                    try {
                        n = e.id ? window.sessionStorage.getItem(e.id) : "";
                    } catch (t) {}
                    if (i.test(location.href) || n) {
                        try {
                            window.sessionStorage.setItem(e.id, !0);
                        } catch (t) {}
                        r.isArray(e.cdnPath) ? a(e.cdnPath, function(n) {
                            /\.css$/.test(n) ? t.addStyle(e.id, n) : /\.js/.test(n) && o.addScript(n);
                        }) : o.addScript(e.cdnPath);
                    }
                });
            }
        };
    };
}, function(t, e, n) {
    "use strict";
    t.exports = function(t) {
        try {
            var e = window, a = "g_tb_aplus_loaded";
            if (e[a]) return;
            e[a] = 1, n(95).isDebugAplus();
            var o = n(26), r = n(76), i = n(21), s = n(27), u = n(96), c = "running", l = [ "aplusReady", c ];
            r.doPubMsg(l), u.run({
                plugins: t.plugins,
                context: function() {
                    var e = {
                        PAGE_LOAD_TIME: new Date()
                    }, n = [];
                    return s(t.plugins, function(t) {
                        e[t.name] = t.config || {}, "aplus_log_inject" === t.name && t.config && t.config.plugins && (n = t.config.plugins.pv, 
                        s(n, function(t) {
                            e[t.name] = t.config;
                        }));
                    }), i.assign(e, {
                        aplus_config: t
                    });
                }
            }, function() {
                o.logger({
                    msg: "APLUS INIT SUCCESS"
                });
            });
        } catch (t) {}
    };
}, function(t, e, n) {
    "use strict";
    var a, o = n(2);
    e.isDebugAplus = function(t) {
        if ("boolean" == typeof a) return a;
        if ("boolean" == typeof t && (a = t), localStorage && location) {
            var e = location.href.match(/aplusDebug=(true|false)/);
            e && e.length > 0 && localStorage.setItem("aplusDebug", e[1]), a = "true" === localStorage.getItem("aplusDebug");
        } else a = !1;
        return o.setGoldlogVal("aplusDebug", a), a;
    };
}, function(t, e, n) {
    "use strict";
    var a = n(84), o = n(10), r = n(76);
    e.run = function(t, e) {
        var n = new a();
        n.run({
            plugins: t.plugins,
            context: t.context
        }, {
            config: {},
            userdata: {},
            pubsubType: "aplusinit",
            messageFnQueue: [],
            middlewareMessageKey: "mw_change_aplusinit"
        }, function(t) {
            var n = [ "aplusInitContext", t ];
            r.doPubMsg(n), r.doCachePubs(n), o(e) && e(t);
        });
    };
} ]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,